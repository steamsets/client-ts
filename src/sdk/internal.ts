/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { internalAccountV1BookmarkBadge } from "../funcs/internalAccountV1BookmarkBadge.js";
import { internalAccountV1ConnectionReconnect } from "../funcs/internalAccountV1ConnectionReconnect.js";
import { internalAccountV1GetBadgeBookmarks } from "../funcs/internalAccountV1GetBadgeBookmarks.js";
import { internalAccountV1GetOwnedBadges } from "../funcs/internalAccountV1GetOwnedBadges.js";
import { internalAccountV1ImagesGet } from "../funcs/internalAccountV1ImagesGet.js";
import { internalAccountV1ImagesUpdate } from "../funcs/internalAccountV1ImagesUpdate.js";
import { internalAccountV1SettingsUpdateRole } from "../funcs/internalAccountV1SettingsUpdateRole.js";
import { internalAdminV1GetEvents } from "../funcs/internalAdminV1GetEvents.js";
import { internalAdminV1UpdateEvent } from "../funcs/internalAdminV1UpdateEvent.js";
import { internalAdminV1UpdateResources } from "../funcs/internalAdminV1UpdateResources.js";
import { internalAdminV1UpdateRoles } from "../funcs/internalAdminV1UpdateRoles.js";
import { internalBadgeV1Search } from "../funcs/internalBadgeV1Search.js";
import { internalCheck } from "../funcs/internalCheck.js";
import { internalCreateDeveloperApp } from "../funcs/internalCreateDeveloperApp.js";
import { internalDeleteDeveloperApp } from "../funcs/internalDeleteDeveloperApp.js";
import { internalDeleteImages } from "../funcs/internalDeleteImages.js";
import { internalGetAccount } from "../funcs/internalGetAccount.js";
import { internalGetStaff } from "../funcs/internalGetStaff.js";
import { internalGetTags } from "../funcs/internalGetTags.js";
import { internalSendEmailVerification } from "../funcs/internalSendEmailVerification.js";
import { internalUpdateApp } from "../funcs/internalUpdateApp.js";
import { internalUploadImages } from "../funcs/internalUploadImages.js";
import { internalVerifyEmail } from "../funcs/internalVerifyEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Internal extends ClientSDK {
  async accountV1BookmarkBadge(
    request: components.V1AccountBadgeBookmarkRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1BookmarkBadgeResponse> {
    return unwrapAsync(internalAccountV1BookmarkBadge(
      this,
      request,
      options,
    ));
  }

  async createDeveloperApp(
    request: components.V1DeveloperAppCreateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsDeveloperAppCreateResponse> {
    return unwrapAsync(internalCreateDeveloperApp(
      this,
      request,
      options,
    ));
  }

  async deleteDeveloperApp(
    request: components.V1AccountDeveloperAppDeleteRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsDeveloperAppDeleteResponse> {
    return unwrapAsync(internalDeleteDeveloperApp(
      this,
      request,
      options,
    ));
  }

  async deleteImages(
    request: components.V1DeleteImagesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesDeleteResponse> {
    return unwrapAsync(internalDeleteImages(
      this,
      request,
      options,
    ));
  }

  async updateApp(
    request: components.V1AccountDeveloperAppUpdateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsDeveloperAppUpdateResponse> {
    return unwrapAsync(internalUpdateApp(
      this,
      request,
      options,
    ));
  }

  async accountV1GetBadgeBookmarks(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetBadgeBookmarksResponse> {
    return unwrapAsync(internalAccountV1GetBadgeBookmarks(
      this,
      options,
    ));
  }

  async accountV1ImagesGet(
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesGetResponse> {
    return unwrapAsync(internalAccountV1ImagesGet(
      this,
      options,
    ));
  }

  async accountV1GetOwnedBadges(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetOwnedBadgesResponse> {
    return unwrapAsync(internalAccountV1GetOwnedBadges(
      this,
      options,
    ));
  }

  async getStaff(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetStaffResponse> {
    return unwrapAsync(internalGetStaff(
      this,
      options,
    ));
  }

  async accountV1ConnectionReconnect(
    request: components.V1ReconnectRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionReconnectResponse> {
    return unwrapAsync(internalAccountV1ConnectionReconnect(
      this,
      request,
      options,
    ));
  }

  async sendEmailVerification(
    request: operations.AccountV1SettingsSendEmailVerificationRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsSendEmailVerificationResponse> {
    return unwrapAsync(internalSendEmailVerification(
      this,
      request,
      options,
    ));
  }

  async accountV1ImagesUpdate(
    request: components.V1UpdateImageRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesUpdateResponse> {
    return unwrapAsync(internalAccountV1ImagesUpdate(
      this,
      request,
      options,
    ));
  }

  async accountV1SettingsUpdateRole(
    request: components.V1UpdateRoleRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsUpdateRoleResponse> {
    return unwrapAsync(internalAccountV1SettingsUpdateRole(
      this,
      request,
      options,
    ));
  }

  async uploadImages(
    request: components.V1UploadImagesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesUploadResponse> {
    return unwrapAsync(internalUploadImages(
      this,
      request,
      options,
    ));
  }

  async verifyEmail(
    request: components.V1VerifyEmailRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsVerfyEmailResponse> {
    return unwrapAsync(internalVerifyEmail(
      this,
      request,
      options,
    ));
  }

  async getAccount(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AdminV1GetAccountResponse> {
    return unwrapAsync(internalGetAccount(
      this,
      request,
      options,
    ));
  }

  async adminV1GetEvents(
    options?: RequestOptions,
  ): Promise<operations.AdminV1GetEventsResponse> {
    return unwrapAsync(internalAdminV1GetEvents(
      this,
      options,
    ));
  }

  async adminV1UpdateEvent(
    request: components.V1AdminUpdateEventRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AdminV1UpdateEventResponse> {
    return unwrapAsync(internalAdminV1UpdateEvent(
      this,
      request,
      options,
    ));
  }

  async adminV1UpdateResources(
    request: components.V1AdminUpdateResourcesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AdminV1UpdateResourcesResponse> {
    return unwrapAsync(internalAdminV1UpdateResources(
      this,
      request,
      options,
    ));
  }

  async adminV1UpdateRoles(
    request: components.V1AdminUpdateRolessRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AdminV1UpdateRolesResponse> {
    return unwrapAsync(internalAdminV1UpdateRoles(
      this,
      request,
      options,
    ));
  }

  async getTags(
    options?: RequestOptions,
  ): Promise<operations.BadgeV1TagsResponse> {
    return unwrapAsync(internalGetTags(
      this,
      options,
    ));
  }

  async badgeV1Search(
    request: components.V1SearchRequest,
    options?: RequestOptions,
  ): Promise<operations.BadgeV1SearchResponse> {
    return unwrapAsync(internalBadgeV1Search(
      this,
      request,
      options,
    ));
  }

  /**
   * Liveness check
   *
   * @remarks
   * This endpoint checks if the service is alive.
   */
  async check(
    options?: RequestOptions,
  ): Promise<operations.LivenessResponse> {
    return unwrapAsync(internalCheck(
      this,
      options,
    ));
  }
}
