/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountAccountV1ConnectionConnect } from "../funcs/accountAccountV1ConnectionConnect.js";
import { accountAccountV1ConnectionDeleteConnection } from "../funcs/accountAccountV1ConnectionDeleteConnection.js";
import { accountAccountV1ConnectionUpdateConnection } from "../funcs/accountAccountV1ConnectionUpdateConnection.js";
import { accountAccountV1ConnectionVerifyConnection } from "../funcs/accountAccountV1ConnectionVerifyConnection.js";
import { accountAccountV1GetApps } from "../funcs/accountAccountV1GetApps.js";
import { accountAccountV1GetBadges } from "../funcs/accountAccountV1GetBadges.js";
import { accountAccountV1GetFriends } from "../funcs/accountAccountV1GetFriends.js";
import { accountAccountV1GetInfo } from "../funcs/accountAccountV1GetInfo.js";
import { accountAccountV1GetLeaderboardHistory } from "../funcs/accountAccountV1GetLeaderboardHistory.js";
import { accountAccountV1GetStaff } from "../funcs/accountAccountV1GetStaff.js";
import { accountAccountV1SessionCreate } from "../funcs/accountAccountV1SessionCreate.js";
import { accountAccountV1SessionDelete } from "../funcs/accountAccountV1SessionDelete.js";
import { accountAccountV1SessionGet } from "../funcs/accountAccountV1SessionGet.js";
import { accountAccountV1SessionLogin } from "../funcs/accountAccountV1SessionLogin.js";
import { accountAccountV1SettingsDeleteImages } from "../funcs/accountAccountV1SettingsDeleteImages.js";
import { accountAccountV1SettingsGenerateApiKey } from "../funcs/accountAccountV1SettingsGenerateApiKey.js";
import { accountAccountV1SettingsGet } from "../funcs/accountAccountV1SettingsGet.js";
import { accountAccountV1SettingsSendEmailVerification } from "../funcs/accountAccountV1SettingsSendEmailVerification.js";
import { accountAccountV1SettingsUpdate } from "../funcs/accountAccountV1SettingsUpdate.js";
import { accountAccountV1SettingsUpdateImage } from "../funcs/accountAccountV1SettingsUpdateImage.js";
import { accountAccountV1SettingsUploadImages } from "../funcs/accountAccountV1SettingsUploadImages.js";
import { accountAccountV1SettingsVerfyEmail } from "../funcs/accountAccountV1SettingsVerfyEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Account extends ClientSDK {
    /**
     * Connect a new Social Provider
     */
    async accountV1ConnectionConnect(
        request: components.V1ConnectRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1ConnectionConnectResponse> {
        return unwrapAsync(accountAccountV1ConnectionConnect(this, request, options));
    }

    /**
     * Create a new session for non logged in users
     */
    async accountV1SessionCreate(
        request: operations.AccountV1SessionCreateRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1SessionCreateResponse> {
        return unwrapAsync(accountAccountV1SessionCreate(this, request, options));
    }

    /**
     * Remove a connection
     */
    async accountV1ConnectionDeleteConnection(
        request: components.V1DeleteConnectionRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1ConnectionDeleteConnectionResponse> {
        return unwrapAsync(accountAccountV1ConnectionDeleteConnection(this, request, options));
    }

    /**
     * Delete mulitple imagest
     */
    async accountV1SettingsDeleteImages(
        request: components.V1DeleteImagesRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsDeleteImagesResponse> {
        return unwrapAsync(accountAccountV1SettingsDeleteImages(this, request, options));
    }

    /**
     * Deletes a session, can also be used to logout
     */
    async accountV1SessionDelete(
        request: components.V1DeleteSessionRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1SessionDeleteResponse> {
        return unwrapAsync(accountAccountV1SessionDelete(this, request, options));
    }

    /**
     * Generate a new API key for the account
     */
    async accountV1SettingsGenerateApiKey(
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsGenerateApiKeyResponse> {
        return unwrapAsync(accountAccountV1SettingsGenerateApiKey(this, options));
    }

    /**
     * Get Account Apps
     */
    async accountV1GetApps(
        request: operations.AccountV1GetAppsRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1GetAppsResponse> {
        return unwrapAsync(accountAccountV1GetApps(this, request, options));
    }

    /**
     * Get Account Badges
     */
    async accountV1GetBadges(
        request: operations.AccountV1GetBadgesRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1GetBadgesResponse> {
        return unwrapAsync(accountAccountV1GetBadges(this, request, options));
    }

    /**
     * Get Account Friends
     */
    async accountV1GetFriends(
        request: operations.AccountV1GetFriendsRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1GetFriendsResponse> {
        return unwrapAsync(accountAccountV1GetFriends(this, request, options));
    }

    /**
     * Get Account Info
     */
    async accountV1GetInfo(
        request: components.AccountSearch,
        options?: RequestOptions
    ): Promise<operations.AccountV1GetInfoResponse> {
        return unwrapAsync(accountAccountV1GetInfo(this, request, options));
    }

    /**
     * Get Account Leaderboard History
     */
    async accountV1GetLeaderboardHistory(
        request: operations.AccountV1GetLeaderboardHistoryRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1GetLeaderboardHistoryResponse> {
        return unwrapAsync(accountAccountV1GetLeaderboardHistory(this, request, options));
    }

    /**
     * Gets all session data
     */
    async accountV1SessionGet(
        options?: RequestOptions
    ): Promise<operations.AccountV1SessionGetResponse> {
        return unwrapAsync(accountAccountV1SessionGet(this, options));
    }

    /**
     * Gets all settings for the account
     */
    async accountV1SettingsGet(
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsGetResponse> {
        return unwrapAsync(accountAccountV1SettingsGet(this, options));
    }

    /**
     * Get Staff Members and their info
     */
    async accountV1GetStaff(
        options?: RequestOptions
    ): Promise<operations.AccountV1GetStaffResponse> {
        return unwrapAsync(accountAccountV1GetStaff(this, options));
    }

    /**
     * Logs a user in and creates a new session
     */
    async accountV1SessionLogin(
        request: operations.AccountV1SessionLoginRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1SessionLoginResponse> {
        return unwrapAsync(accountAccountV1SessionLogin(this, request, options));
    }

    /**
     * Resend the verification code for an email
     */
    async accountV1SettingsSendEmailVerification(
        request: operations.AccountV1SettingsSendEmailVerificationRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsSendEmailVerificationResponse> {
        return unwrapAsync(accountAccountV1SettingsSendEmailVerification(this, request, options));
    }

    /**
     * Make a connection visible/invisible
     */
    async accountV1ConnectionUpdateConnection(
        request: components.V1UpdateConnectionRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1ConnectionUpdateConnectionResponse> {
        return unwrapAsync(accountAccountV1ConnectionUpdateConnection(this, request, options));
    }

    /**
     * Update one of the uploaded images
     */
    async accountV1SettingsUpdateImage(
        request: components.V1UpdateImageRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsUpdateImageResponse> {
        return unwrapAsync(accountAccountV1SettingsUpdateImage(this, request, options));
    }

    /**
     * Update settings for the logged in account
     */
    async accountV1SettingsUpdate(
        request: operations.AccountV1SettingsUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsUpdateResponse> {
        return unwrapAsync(accountAccountV1SettingsUpdate(this, request, options));
    }

    /**
     * Multi Upload Endpoint for images
     */
    async accountV1SettingsUploadImages(
        request: components.V1UploadImagesRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsUploadImagesResponse> {
        return unwrapAsync(accountAccountV1SettingsUploadImages(this, request, options));
    }

    /**
     * Verify a domain connection only atm
     */
    async accountV1ConnectionVerifyConnection(
        request: components.V1VerifyConnectionRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1ConnectionVerifyConnectionResponse> {
        return unwrapAsync(accountAccountV1ConnectionVerifyConnection(this, request, options));
    }

    /**
     * Verify the email by passing in the code the user should've gotten
     */
    async accountV1SettingsVerfyEmail(
        request: components.V1VerifyEmailRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountV1SettingsVerfyEmailResponse> {
        return unwrapAsync(accountAccountV1SettingsVerfyEmail(this, request, options));
    }
}
