/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountBookmarkBadge } from "../funcs/accountBookmarkBadge.js";
import { accountConnect } from "../funcs/accountConnect.js";
import { accountCreateDeveloperApp } from "../funcs/accountCreateDeveloperApp.js";
import { accountCreateSession } from "../funcs/accountCreateSession.js";
import { accountDeleteConnection } from "../funcs/accountDeleteConnection.js";
import { accountDeleteImages } from "../funcs/accountDeleteImages.js";
import { accountEmailSendVerification } from "../funcs/accountEmailSendVerification.js";
import { accountEmailSubscription } from "../funcs/accountEmailSubscription.js";
import { accountEmailVerify } from "../funcs/accountEmailVerify.js";
import { accountGetApps } from "../funcs/accountGetApps.js";
import { accountGetBadgeBookmarks } from "../funcs/accountGetBadgeBookmarks.js";
import { accountGetBadges } from "../funcs/accountGetBadges.js";
import { accountGetDataPoints } from "../funcs/accountGetDataPoints.js";
import { accountGetFriends } from "../funcs/accountGetFriends.js";
import { accountGetImages } from "../funcs/accountGetImages.js";
import { accountGetInfo } from "../funcs/accountGetInfo.js";
import { accountGetLeaderboardHistory } from "../funcs/accountGetLeaderboardHistory.js";
import { accountGetMeta } from "../funcs/accountGetMeta.js";
import { accountGetOwnedBadges } from "../funcs/accountGetOwnedBadges.js";
import { accountGetSession } from "../funcs/accountGetSession.js";
import { accountGetSettings } from "../funcs/accountGetSettings.js";
import { accountGetStaff } from "../funcs/accountGetStaff.js";
import { accountLogin } from "../funcs/accountLogin.js";
import { accountQueue } from "../funcs/accountQueue.js";
import { accountReconnect } from "../funcs/accountReconnect.js";
import { accountUpdateImages } from "../funcs/accountUpdateImages.js";
import { accountUpdateSettings } from "../funcs/accountUpdateSettings.js";
import { accountUploadImages } from "../funcs/accountUploadImages.js";
import { accountVerifyConnection } from "../funcs/accountVerifyConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Connection } from "./connection.js";
import { DeveloperApps } from "./developerapps.js";
import { Roles } from "./roles.js";
import { Session } from "./session.js";

export class Account extends ClientSDK {
  private _developerApps?: DeveloperApps;
  get developerApps(): DeveloperApps {
    return (this._developerApps ??= new DeveloperApps(this._options));
  }

  private _session?: Session;
  get session(): Session {
    return (this._session ??= new Session(this._options));
  }

  private _connection?: Connection;
  get connection(): Connection {
    return (this._connection ??= new Connection(this._options));
  }

  private _roles?: Roles;
  get roles(): Roles {
    return (this._roles ??= new Roles(this._options));
  }

  async bookmarkBadge(
    request: components.V1AccountBadgeBookmarkRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1BookmarkBadgeResponse> {
    return unwrapAsync(accountBookmarkBadge(
      this,
      request,
      options,
    ));
  }

  async connect(
    request: components.V1ConnectRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionConnectResponse> {
    return unwrapAsync(accountConnect(
      this,
      request,
      options,
    ));
  }

  async createDeveloperApp(
    request: components.V1DeveloperAppCreateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsDeveloperAppCreateResponse> {
    return unwrapAsync(accountCreateDeveloperApp(
      this,
      request,
      options,
    ));
  }

  async createSession(
    request: operations.AccountV1SessionCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SessionCreateResponse> {
    return unwrapAsync(accountCreateSession(
      this,
      request,
      options,
    ));
  }

  async deleteConnection(
    request: components.V1DeleteConnectionRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionDeleteConnectionResponse> {
    return unwrapAsync(accountDeleteConnection(
      this,
      request,
      options,
    ));
  }

  async deleteImages(
    request: components.V1DeleteImagesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesDeleteResponse> {
    return unwrapAsync(accountDeleteImages(
      this,
      request,
      options,
    ));
  }

  async emailSendVerification(
    request: operations.AccountV1SettingsEmailSendVerificationRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsEmailSendVerificationResponse> {
    return unwrapAsync(accountEmailSendVerification(
      this,
      request,
      options,
    ));
  }

  async emailSubscription(
    request: operations.AccountV1SettingsEmailSubscribeRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsEmailSubscribeResponse> {
    return unwrapAsync(accountEmailSubscription(
      this,
      request,
      options,
    ));
  }

  async emailVerify(
    request: components.V1VerifyEmailRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsEmailVerifyResponse> {
    return unwrapAsync(accountEmailVerify(
      this,
      request,
      options,
    ));
  }

  async getApps(
    request: components.V1AccountsAppsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetAppsResponse> {
    return unwrapAsync(accountGetApps(
      this,
      request,
      options,
    ));
  }

  async getBadgeBookmarks(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetBadgeBookmarksResponse> {
    return unwrapAsync(accountGetBadgeBookmarks(
      this,
      options,
    ));
  }

  async getBadges(
    request: components.V1BadgesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetBadgesResponse> {
    return unwrapAsync(accountGetBadges(
      this,
      request,
      options,
    ));
  }

  async getDataPoints(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetDataPointsResponse> {
    return unwrapAsync(accountGetDataPoints(
      this,
      request,
      options,
    ));
  }

  async getFriends(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetFriendsResponse> {
    return unwrapAsync(accountGetFriends(
      this,
      request,
      options,
    ));
  }

  async getImages(
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesGetResponse> {
    return unwrapAsync(accountGetImages(
      this,
      options,
    ));
  }

  async getInfo(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetInfoResponse> {
    return unwrapAsync(accountGetInfo(
      this,
      request,
      options,
    ));
  }

  async getLeaderboardHistory(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetLeaderboardHistoryResponse> {
    return unwrapAsync(accountGetLeaderboardHistory(
      this,
      request,
      options,
    ));
  }

  async getMeta(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetMetaResponse> {
    return unwrapAsync(accountGetMeta(
      this,
      request,
      options,
    ));
  }

  async getOwnedBadges(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetOwnedBadgesResponse> {
    return unwrapAsync(accountGetOwnedBadges(
      this,
      options,
    ));
  }

  async getSession(
    options?: RequestOptions,
  ): Promise<operations.AccountV1SessionGetResponse> {
    return unwrapAsync(accountGetSession(
      this,
      options,
    ));
  }

  async getSettings(
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsGetResponse> {
    return unwrapAsync(accountGetSettings(
      this,
      options,
    ));
  }

  async getStaff(
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetStaffResponse> {
    return unwrapAsync(accountGetStaff(
      this,
      options,
    ));
  }

  async login(
    request: operations.AccountV1SessionLoginRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SessionLoginResponse> {
    return unwrapAsync(accountLogin(
      this,
      request,
      options,
    ));
  }

  async queue(
    request: components.V1AccountQueueRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1QueueResponse> {
    return unwrapAsync(accountQueue(
      this,
      request,
      options,
    ));
  }

  async reconnect(
    request: components.V1ReconnectRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionReconnectResponse> {
    return unwrapAsync(accountReconnect(
      this,
      request,
      options,
    ));
  }

  async updateImages(
    request: components.V1UpdateImageRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesUpdateResponse> {
    return unwrapAsync(accountUpdateImages(
      this,
      request,
      options,
    ));
  }

  async updateSettings(
    request: operations.AccountV1SettingsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountV1SettingsUpdateResponse> {
    return unwrapAsync(accountUpdateSettings(
      this,
      request,
      options,
    ));
  }

  async uploadImages(
    request: components.V1UploadImagesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ImagesUploadResponse> {
    return unwrapAsync(accountUploadImages(
      this,
      request,
      options,
    ));
  }

  async verifyConnection(
    request: components.V1VerifyConnectionRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionVerifyConnectionResponse> {
    return unwrapAsync(accountVerifyConnection(
      this,
      request,
      options,
    ));
  }
}
