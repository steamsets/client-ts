/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataGetApps } from "../funcs/dataGetApps.js";
import { dataGetBadges } from "../funcs/dataGetBadges.js";
import { dataGetDataPoints } from "../funcs/dataGetDataPoints.js";
import { dataGetFriends } from "../funcs/dataGetFriends.js";
import { dataGetInfo } from "../funcs/dataGetInfo.js";
import { dataGetLeaderboardHistory } from "../funcs/dataGetLeaderboardHistory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Data extends ClientSDK {
  async getApps(
    request: components.V1AccountsAppsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetAppsResponse> {
    return unwrapAsync(dataGetApps(
      this,
      request,
      options,
    ));
  }

  async getBadges(
    request: components.V1BadgesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetBadgesResponse> {
    return unwrapAsync(dataGetBadges(
      this,
      request,
      options,
    ));
  }

  async getDataPoints(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetDataPointsResponse> {
    return unwrapAsync(dataGetDataPoints(
      this,
      request,
      options,
    ));
  }

  async getFriends(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetFriendsResponse> {
    return unwrapAsync(dataGetFriends(
      this,
      request,
      options,
    ));
  }

  async getInfo(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetInfoResponse> {
    return unwrapAsync(dataGetInfo(
      this,
      request,
      options,
    ));
  }

  async getLeaderboardHistory(
    request: components.AccountSearch,
    options?: RequestOptions,
  ): Promise<operations.AccountV1GetLeaderboardHistoryResponse> {
    return unwrapAsync(dataGetLeaderboardHistory(
      this,
      request,
      options,
    ));
  }
}
