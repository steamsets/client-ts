/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectionAccountV1ConnectionConnect } from "../funcs/connectionAccountV1ConnectionConnect.js";
import { connectionAccountV1ConnectionDeleteConnection } from "../funcs/connectionAccountV1ConnectionDeleteConnection.js";
import { connectionAccountV1ConnectionUpdateConnection } from "../funcs/connectionAccountV1ConnectionUpdateConnection.js";
import { connectionAccountV1ConnectionVerifyConnection } from "../funcs/connectionAccountV1ConnectionVerifyConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Connection extends ClientSDK {
  /**
   * Connect a new Social Provider
   */
  async accountV1ConnectionConnect(
    request: components.V1ConnectRequestBody,
    security: operations.AccountV1ConnectionConnectSecurity,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionConnectResponse> {
    return unwrapAsync(connectionAccountV1ConnectionConnect(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Remove a connection
   */
  async accountV1ConnectionDeleteConnection(
    request: components.V1DeleteConnectionRequestBody,
    security: operations.AccountV1ConnectionDeleteConnectionSecurity,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionDeleteConnectionResponse> {
    return unwrapAsync(connectionAccountV1ConnectionDeleteConnection(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Make a connection visible/invisible
   */
  async accountV1ConnectionUpdateConnection(
    request: components.V1UpdateConnectionRequestBody,
    security: operations.AccountV1ConnectionUpdateConnectionSecurity,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionUpdateConnectionResponse> {
    return unwrapAsync(connectionAccountV1ConnectionUpdateConnection(
      this,
      request,
      security,
      options,
    ));
  }

  /**
   * Verify a domain connection only atm
   */
  async accountV1ConnectionVerifyConnection(
    request: components.V1VerifyConnectionRequestBody,
    security: operations.AccountV1ConnectionVerifyConnectionSecurity,
    options?: RequestOptions,
  ): Promise<operations.AccountV1ConnectionVerifyConnectionResponse> {
    return unwrapAsync(connectionAccountV1ConnectionVerifyConnection(
      this,
      request,
      security,
      options,
    ));
  }
}
