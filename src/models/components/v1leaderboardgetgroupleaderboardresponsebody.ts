/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1GroupLeaderboardGroup,
  V1GroupLeaderboardGroup$inboundSchema,
  V1GroupLeaderboardGroup$Outbound,
  V1GroupLeaderboardGroup$outboundSchema,
} from "./v1groupleaderboardgroup.js";

export type V1LeaderboardGetGroupLeaderboardResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  groups: Array<V1GroupLeaderboardGroup> | null;
  /**
   * The number of accounts that are ranked in the leaderboard
   */
  rankedOutOf?: number | undefined;
  steamSetsGroup: V1GroupLeaderboardGroup;
};

/** @internal */
export const V1LeaderboardGetGroupLeaderboardResponseBody$inboundSchema:
  z.ZodType<
    V1LeaderboardGetGroupLeaderboardResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    $schema: z.string().optional(),
    groups: z.nullable(z.array(V1GroupLeaderboardGroup$inboundSchema)),
    rankedOutOf: z.number().int().default(0),
    steamSetsGroup: V1GroupLeaderboardGroup$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "$schema": "dollarSchema",
    });
  });

/** @internal */
export type V1LeaderboardGetGroupLeaderboardResponseBody$Outbound = {
  $schema?: string | undefined;
  groups: Array<V1GroupLeaderboardGroup$Outbound> | null;
  rankedOutOf: number;
  steamSetsGroup: V1GroupLeaderboardGroup$Outbound;
};

/** @internal */
export const V1LeaderboardGetGroupLeaderboardResponseBody$outboundSchema:
  z.ZodType<
    V1LeaderboardGetGroupLeaderboardResponseBody$Outbound,
    z.ZodTypeDef,
    V1LeaderboardGetGroupLeaderboardResponseBody
  > = z.object({
    dollarSchema: z.string().optional(),
    groups: z.nullable(z.array(V1GroupLeaderboardGroup$outboundSchema)),
    rankedOutOf: z.number().int().default(0),
    steamSetsGroup: V1GroupLeaderboardGroup$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      dollarSchema: "$schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetGroupLeaderboardResponseBody$ {
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetGroupLeaderboardResponseBody$inboundSchema;
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetGroupLeaderboardResponseBody$outboundSchema;
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardResponseBody$Outbound` instead. */
  export type Outbound = V1LeaderboardGetGroupLeaderboardResponseBody$Outbound;
}

export function v1LeaderboardGetGroupLeaderboardResponseBodyToJSON(
  v1LeaderboardGetGroupLeaderboardResponseBody:
    V1LeaderboardGetGroupLeaderboardResponseBody,
): string {
  return JSON.stringify(
    V1LeaderboardGetGroupLeaderboardResponseBody$outboundSchema.parse(
      v1LeaderboardGetGroupLeaderboardResponseBody,
    ),
  );
}

export function v1LeaderboardGetGroupLeaderboardResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  V1LeaderboardGetGroupLeaderboardResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1LeaderboardGetGroupLeaderboardResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1LeaderboardGetGroupLeaderboardResponseBody' from JSON`,
  );
}
