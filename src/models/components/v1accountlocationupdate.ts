/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HistoryValue,
  HistoryValue$inboundSchema,
  HistoryValue$Outbound,
  HistoryValue$outboundSchema,
} from "./historyvalue.js";

export type V1AccountLocationUpdate = {
  city: HistoryValue;
  countryCode: HistoryValue;
  countryName: HistoryValue;
  region: HistoryValue;
  state: HistoryValue;
  /**
   * The time the location was updated
   */
  updatedAt: Date;
};

/** @internal */
export const V1AccountLocationUpdate$inboundSchema: z.ZodType<
  V1AccountLocationUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: HistoryValue$inboundSchema,
  countryCode: HistoryValue$inboundSchema,
  countryName: HistoryValue$inboundSchema,
  region: HistoryValue$inboundSchema,
  state: HistoryValue$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type V1AccountLocationUpdate$Outbound = {
  city: HistoryValue$Outbound;
  countryCode: HistoryValue$Outbound;
  countryName: HistoryValue$Outbound;
  region: HistoryValue$Outbound;
  state: HistoryValue$Outbound;
  updatedAt: string;
};

/** @internal */
export const V1AccountLocationUpdate$outboundSchema: z.ZodType<
  V1AccountLocationUpdate$Outbound,
  z.ZodTypeDef,
  V1AccountLocationUpdate
> = z.object({
  city: HistoryValue$outboundSchema,
  countryCode: HistoryValue$outboundSchema,
  countryName: HistoryValue$outboundSchema,
  region: HistoryValue$outboundSchema,
  state: HistoryValue$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountLocationUpdate$ {
  /** @deprecated use `V1AccountLocationUpdate$inboundSchema` instead. */
  export const inboundSchema = V1AccountLocationUpdate$inboundSchema;
  /** @deprecated use `V1AccountLocationUpdate$outboundSchema` instead. */
  export const outboundSchema = V1AccountLocationUpdate$outboundSchema;
  /** @deprecated use `V1AccountLocationUpdate$Outbound` instead. */
  export type Outbound = V1AccountLocationUpdate$Outbound;
}

export function v1AccountLocationUpdateToJSON(
  v1AccountLocationUpdate: V1AccountLocationUpdate,
): string {
  return JSON.stringify(
    V1AccountLocationUpdate$outboundSchema.parse(v1AccountLocationUpdate),
  );
}

export function v1AccountLocationUpdateFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountLocationUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountLocationUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountLocationUpdate' from JSON`,
  );
}
