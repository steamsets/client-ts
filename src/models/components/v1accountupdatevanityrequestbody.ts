/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountUpdateVanityRequestBody = {
  /**
   * The vanity the account should have null to remove
   */
  vanity?: string | null | undefined;
};

/** @internal */
export const V1AccountUpdateVanityRequestBody$inboundSchema: z.ZodType<
  V1AccountUpdateVanityRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  vanity: z.nullable(z.string()).optional(),
});

/** @internal */
export type V1AccountUpdateVanityRequestBody$Outbound = {
  vanity?: string | null | undefined;
};

/** @internal */
export const V1AccountUpdateVanityRequestBody$outboundSchema: z.ZodType<
  V1AccountUpdateVanityRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountUpdateVanityRequestBody
> = z.object({
  vanity: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountUpdateVanityRequestBody$ {
  /** @deprecated use `V1AccountUpdateVanityRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountUpdateVanityRequestBody$inboundSchema;
  /** @deprecated use `V1AccountUpdateVanityRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountUpdateVanityRequestBody$outboundSchema;
  /** @deprecated use `V1AccountUpdateVanityRequestBody$Outbound` instead. */
  export type Outbound = V1AccountUpdateVanityRequestBody$Outbound;
}

export function v1AccountUpdateVanityRequestBodyToJSON(
  v1AccountUpdateVanityRequestBody: V1AccountUpdateVanityRequestBody,
): string {
  return JSON.stringify(
    V1AccountUpdateVanityRequestBody$outboundSchema.parse(
      v1AccountUpdateVanityRequestBody,
    ),
  );
}

export function v1AccountUpdateVanityRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountUpdateVanityRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountUpdateVanityRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountUpdateVanityRequestBody' from JSON`,
  );
}
