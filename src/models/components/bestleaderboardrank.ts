/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The leaderboard of the best leaderboard
 */
export const Leaderboard = {
  Apps: "apps",
  AppPlaytime: "app_playtime",
  AppValidPlaytime: "app_valid_playtime",
  AwardsGiven: "awards_given",
  AwardsReceived: "awards_received",
  Bans: "bans",
  GameBans: "game_bans",
  VacBans: "vac_bans",
  Donations: "donations",
  FoilBadges: "foil_badges",
  NormalBadges: "normal_badges",
  Badges: "badges",
  Playtime: "playtime",
  ValidPlaytime: "valid_playtime",
  PointsGiven: "points_given",
  PointsReceived: "points_received",
  SteamSets: "steam_sets",
  Xp: "xp",
} as const;
/**
 * The leaderboard of the best leaderboard
 */
export type Leaderboard = ClosedEnum<typeof Leaderboard>;

export type BestLeaderboardRank = {
  /**
   * The leaderboard of the best leaderboard
   */
  leaderboard: Leaderboard;
  /**
   * The ranks in the leaderboard in csv global,regional,country,state,city
   */
  ranks: string;
};

/** @internal */
export const Leaderboard$inboundSchema: z.ZodNativeEnum<typeof Leaderboard> = z
  .nativeEnum(Leaderboard);

/** @internal */
export const Leaderboard$outboundSchema: z.ZodNativeEnum<typeof Leaderboard> =
  Leaderboard$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Leaderboard$ {
  /** @deprecated use `Leaderboard$inboundSchema` instead. */
  export const inboundSchema = Leaderboard$inboundSchema;
  /** @deprecated use `Leaderboard$outboundSchema` instead. */
  export const outboundSchema = Leaderboard$outboundSchema;
}

/** @internal */
export const BestLeaderboardRank$inboundSchema: z.ZodType<
  BestLeaderboardRank,
  z.ZodTypeDef,
  unknown
> = z.object({
  leaderboard: Leaderboard$inboundSchema,
  ranks: z.string(),
});

/** @internal */
export type BestLeaderboardRank$Outbound = {
  leaderboard: string;
  ranks: string;
};

/** @internal */
export const BestLeaderboardRank$outboundSchema: z.ZodType<
  BestLeaderboardRank$Outbound,
  z.ZodTypeDef,
  BestLeaderboardRank
> = z.object({
  leaderboard: Leaderboard$outboundSchema,
  ranks: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BestLeaderboardRank$ {
  /** @deprecated use `BestLeaderboardRank$inboundSchema` instead. */
  export const inboundSchema = BestLeaderboardRank$inboundSchema;
  /** @deprecated use `BestLeaderboardRank$outboundSchema` instead. */
  export const outboundSchema = BestLeaderboardRank$outboundSchema;
  /** @deprecated use `BestLeaderboardRank$Outbound` instead. */
  export type Outbound = BestLeaderboardRank$Outbound;
}

export function bestLeaderboardRankToJSON(
  bestLeaderboardRank: BestLeaderboardRank,
): string {
  return JSON.stringify(
    BestLeaderboardRank$outboundSchema.parse(bestLeaderboardRank),
  );
}

export function bestLeaderboardRankFromJSON(
  jsonString: string,
): SafeParseResult<BestLeaderboardRank, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BestLeaderboardRank$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BestLeaderboardRank' from JSON`,
  );
}
