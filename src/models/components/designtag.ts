/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type DesignTag = {
  id: number;
  name: string;
};

/** @internal */
export const DesignTag$inboundSchema: z.ZodType<
  DesignTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  ID: z.number().int(),
  Name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ID": "id",
    "Name": "name",
  });
});

/** @internal */
export type DesignTag$Outbound = {
  ID: number;
  Name: string;
};

/** @internal */
export const DesignTag$outboundSchema: z.ZodType<
  DesignTag$Outbound,
  z.ZodTypeDef,
  DesignTag
> = z.object({
  id: z.number().int(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "ID",
    name: "Name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DesignTag$ {
  /** @deprecated use `DesignTag$inboundSchema` instead. */
  export const inboundSchema = DesignTag$inboundSchema;
  /** @deprecated use `DesignTag$outboundSchema` instead. */
  export const outboundSchema = DesignTag$outboundSchema;
  /** @deprecated use `DesignTag$Outbound` instead. */
  export type Outbound = DesignTag$Outbound;
}
