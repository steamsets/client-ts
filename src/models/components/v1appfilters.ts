/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Range,
  Range$inboundSchema,
  Range$Outbound,
  Range$outboundSchema,
} from "./range.js";

export type V1AppFilters = {
  /**
   * Filter by app type (e.g., 'game', 'dlc')
   */
  appType?: string | null | undefined;
  /**
   * Exclude event apps
   */
  excludeEvents?: boolean | null | undefined;
  /**
   * Exclude sale/promotional apps
   */
  excludeSales?: boolean | null | undefined;
  playtime?: Range | undefined;
};

/** @internal */
export const V1AppFilters$inboundSchema: z.ZodType<
  V1AppFilters,
  z.ZodTypeDef,
  unknown
> = z.object({
  appType: z.nullable(z.string()).optional(),
  excludeEvents: z.nullable(z.boolean()).optional(),
  excludeSales: z.nullable(z.boolean()).optional(),
  playtime: Range$inboundSchema.optional(),
});

/** @internal */
export type V1AppFilters$Outbound = {
  appType?: string | null | undefined;
  excludeEvents?: boolean | null | undefined;
  excludeSales?: boolean | null | undefined;
  playtime?: Range$Outbound | undefined;
};

/** @internal */
export const V1AppFilters$outboundSchema: z.ZodType<
  V1AppFilters$Outbound,
  z.ZodTypeDef,
  V1AppFilters
> = z.object({
  appType: z.nullable(z.string()).optional(),
  excludeEvents: z.nullable(z.boolean()).optional(),
  excludeSales: z.nullable(z.boolean()).optional(),
  playtime: Range$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AppFilters$ {
  /** @deprecated use `V1AppFilters$inboundSchema` instead. */
  export const inboundSchema = V1AppFilters$inboundSchema;
  /** @deprecated use `V1AppFilters$outboundSchema` instead. */
  export const outboundSchema = V1AppFilters$outboundSchema;
  /** @deprecated use `V1AppFilters$Outbound` instead. */
  export type Outbound = V1AppFilters$Outbound;
}

export function v1AppFiltersToJSON(v1AppFilters: V1AppFilters): string {
  return JSON.stringify(V1AppFilters$outboundSchema.parse(v1AppFilters));
}

export function v1AppFiltersFromJSON(
  jsonString: string,
): SafeParseResult<V1AppFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AppFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AppFilters' from JSON`,
  );
}
