/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AppEventMapping = {
  /**
   * The app id
   */
  appId?: number | null | undefined;
  /**
   * The steam id
   */
  steamId?: number | null | undefined;
};

/** @internal */
export const V1AppEventMapping$inboundSchema: z.ZodType<
  V1AppEventMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.nullable(z.number().int()).optional(),
  steamId: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type V1AppEventMapping$Outbound = {
  appId?: number | null | undefined;
  steamId?: number | null | undefined;
};

/** @internal */
export const V1AppEventMapping$outboundSchema: z.ZodType<
  V1AppEventMapping$Outbound,
  z.ZodTypeDef,
  V1AppEventMapping
> = z.object({
  appId: z.nullable(z.number().int()).optional(),
  steamId: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AppEventMapping$ {
  /** @deprecated use `V1AppEventMapping$inboundSchema` instead. */
  export const inboundSchema = V1AppEventMapping$inboundSchema;
  /** @deprecated use `V1AppEventMapping$outboundSchema` instead. */
  export const outboundSchema = V1AppEventMapping$outboundSchema;
  /** @deprecated use `V1AppEventMapping$Outbound` instead. */
  export type Outbound = V1AppEventMapping$Outbound;
}

export function v1AppEventMappingToJSON(
  v1AppEventMapping: V1AppEventMapping,
): string {
  return JSON.stringify(
    V1AppEventMapping$outboundSchema.parse(v1AppEventMapping),
  );
}

export function v1AppEventMappingFromJSON(
  jsonString: string,
): SafeParseResult<V1AppEventMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AppEventMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AppEventMapping' from JSON`,
  );
}
