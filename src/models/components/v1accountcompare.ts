/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Mode = {
  All: "all",
  Missing: "missing",
  Owned: "owned",
  ReverseOwned: "reverse_owned",
  BothMissing: "both_missing",
  BothOwned: "both_owned",
} as const;
export type Mode = ClosedEnum<typeof Mode>;

export type V1AccountCompare = {
  /**
   * The SteamID to compare against
   */
  against: string;
  mode?: Mode | undefined;
};

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const V1AccountCompare$inboundSchema: z.ZodType<
  V1AccountCompare,
  z.ZodTypeDef,
  unknown
> = z.object({
  against: z.string(),
  mode: Mode$inboundSchema.default("missing"),
});

/** @internal */
export type V1AccountCompare$Outbound = {
  against: string;
  mode: string;
};

/** @internal */
export const V1AccountCompare$outboundSchema: z.ZodType<
  V1AccountCompare$Outbound,
  z.ZodTypeDef,
  V1AccountCompare
> = z.object({
  against: z.string(),
  mode: Mode$outboundSchema.default("missing"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountCompare$ {
  /** @deprecated use `V1AccountCompare$inboundSchema` instead. */
  export const inboundSchema = V1AccountCompare$inboundSchema;
  /** @deprecated use `V1AccountCompare$outboundSchema` instead. */
  export const outboundSchema = V1AccountCompare$outboundSchema;
  /** @deprecated use `V1AccountCompare$Outbound` instead. */
  export type Outbound = V1AccountCompare$Outbound;
}

export function v1AccountCompareToJSON(
  v1AccountCompare: V1AccountCompare,
): string {
  return JSON.stringify(
    V1AccountCompare$outboundSchema.parse(v1AccountCompare),
  );
}

export function v1AccountCompareFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountCompare, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountCompare$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountCompare' from JSON`,
  );
}
