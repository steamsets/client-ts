/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountSearchIDStruct,
  AccountSearchIDStruct$inboundSchema,
  AccountSearchIDStruct$Outbound,
  AccountSearchIDStruct$outboundSchema,
} from "./accountsearchidstruct.js";
import {
  AccountSearchVanityStruct,
  AccountSearchVanityStruct$inboundSchema,
  AccountSearchVanityStruct$Outbound,
  AccountSearchVanityStruct$outboundSchema,
} from "./accountsearchvanitystruct.js";

export type AccountSearch = {
  id?: AccountSearchIDStruct | undefined;
  vanity?: AccountSearchVanityStruct | undefined;
};

/** @internal */
export const AccountSearch$inboundSchema: z.ZodType<
  AccountSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: AccountSearchIDStruct$inboundSchema.optional(),
  vanity: AccountSearchVanityStruct$inboundSchema.optional(),
});

/** @internal */
export type AccountSearch$Outbound = {
  id?: AccountSearchIDStruct$Outbound | undefined;
  vanity?: AccountSearchVanityStruct$Outbound | undefined;
};

/** @internal */
export const AccountSearch$outboundSchema: z.ZodType<
  AccountSearch$Outbound,
  z.ZodTypeDef,
  AccountSearch
> = z.object({
  id: AccountSearchIDStruct$outboundSchema.optional(),
  vanity: AccountSearchVanityStruct$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountSearch$ {
  /** @deprecated use `AccountSearch$inboundSchema` instead. */
  export const inboundSchema = AccountSearch$inboundSchema;
  /** @deprecated use `AccountSearch$outboundSchema` instead. */
  export const outboundSchema = AccountSearch$outboundSchema;
  /** @deprecated use `AccountSearch$Outbound` instead. */
  export type Outbound = AccountSearch$Outbound;
}

export function accountSearchToJSON(accountSearch: AccountSearch): string {
  return JSON.stringify(AccountSearch$outboundSchema.parse(accountSearch));
}

export function accountSearchFromJSON(
  jsonString: string,
): SafeParseResult<AccountSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountSearch' from JSON`,
  );
}
