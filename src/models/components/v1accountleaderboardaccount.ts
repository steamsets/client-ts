/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  LeaderboardBadgeInfo,
  LeaderboardBadgeInfo$inboundSchema,
  LeaderboardBadgeInfo$Outbound,
  LeaderboardBadgeInfo$outboundSchema,
} from "./leaderboardbadgeinfo.js";
import {
  Location,
  Location$inboundSchema,
  Location$Outbound,
  Location$outboundSchema,
} from "./location.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

export type V1AccountLeaderboardAccount = {
  /**
   * The cost of an app
   */
  appCost: number;
  /**
   * The playtime of the account, incase of an app leaderboard
   */
  appPlaytime?: number | null | undefined;
  /**
   * The number of apps the account has
   */
  apps: number;
  /**
   * The avatar hash of the account
   */
  avatar: string;
  /**
   * The average playtime of the account
   */
  averagePlaytime: number;
  /**
   * The number of awards the account has
   */
  awardsGiven: number;
  /**
   * The number of awards the account has
   */
  awardsReceived: number;
  badgeInfo?: LeaderboardBadgeInfo | undefined;
  /**
   * The number of badges the account has
   */
  badges: number;
  /**
   * The number of bans
   */
  bans: number;
  city?: Location | undefined;
  country?: Location | undefined;
  /**
   * The time the account was created
   */
  createdAt: Date;
  /**
   * The economy ban of the account
   */
  economyBan: string;
  /**
   * The cost of a foil badge
   */
  foilBadgeCost: number;
  /**
   * The number of foil badges the account has
   */
  foilBadges: number;
  /**
   * The number of friends the account has
   */
  friends: number;
  /**
   * The number of game bans
   */
  gameBans: number;
  /**
   * Whether the account is hidden in the leaderboards
   */
  hidden: boolean;
  /**
   * The level of the account
   */
  level: number;
  /**
   * The number of limited apps the account has
   */
  limitedApps: number;
  /**
   * The name of the account
   */
  name: string;
  /**
   * The cost of a normal badge
   */
  normalBadgeCost: number;
  /**
   * The number of normal badges the account has
   */
  normalBadges: number;
  /**
   * The playtime of the account
   */
  playtime: number;
  /**
   * The number of points the account has
   */
  pointsGiven: number;
  /**
   * The number of points the account has
   */
  pointsReceived: number;
  /**
   * The privacy of the account
   */
  privacy: string;
  /**
   * The rank of the account
   */
  rank: number;
  region?: Location | undefined;
  /**
   * The roles of the account
   */
  roles: Array<Role> | null;
  state?: Location | undefined;
  /**
   * The steam id
   */
  steamId: string;
  /**
   * The steam sets score
   */
  steamSetsScore: number;
  /**
   * The vanity of the account
   */
  steamSetsVanity: string;
  /**
   * The vanity of the account
   */
  steamVanity: string;
  /**
   * The number of vac bans
   */
  vacBans: number;
  /**
   * The number of xp the account has
   */
  xp: number;
};

/** @internal */
export const V1AccountLeaderboardAccount$inboundSchema: z.ZodType<
  V1AccountLeaderboardAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  appCost: z.number().int(),
  appPlaytime: z.nullable(z.number().int()).optional(),
  apps: z.number().int(),
  avatar: z.string(),
  averagePlaytime: z.number().int(),
  awardsGiven: z.number().int(),
  awardsReceived: z.number().int(),
  badgeInfo: LeaderboardBadgeInfo$inboundSchema.optional(),
  badges: z.number().int(),
  bans: z.number().int(),
  city: Location$inboundSchema.optional(),
  country: Location$inboundSchema.optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  economyBan: z.string(),
  foilBadgeCost: z.number().int(),
  foilBadges: z.number().int(),
  friends: z.number().int(),
  gameBans: z.number().int(),
  hidden: z.boolean(),
  level: z.number().int(),
  limitedApps: z.number().int(),
  name: z.string(),
  normalBadgeCost: z.number().int(),
  normalBadges: z.number().int(),
  playtime: z.number().int(),
  pointsGiven: z.number().int(),
  pointsReceived: z.number().int(),
  privacy: z.string(),
  rank: z.number().int(),
  region: Location$inboundSchema.optional(),
  roles: z.nullable(z.array(Role$inboundSchema)),
  state: Location$inboundSchema.optional(),
  steamId: z.string(),
  steamSetsScore: z.number().int(),
  steamSetsVanity: z.string(),
  steamVanity: z.string(),
  vacBans: z.number().int(),
  xp: z.number().int(),
});

/** @internal */
export type V1AccountLeaderboardAccount$Outbound = {
  appCost: number;
  appPlaytime?: number | null | undefined;
  apps: number;
  avatar: string;
  averagePlaytime: number;
  awardsGiven: number;
  awardsReceived: number;
  badgeInfo?: LeaderboardBadgeInfo$Outbound | undefined;
  badges: number;
  bans: number;
  city?: Location$Outbound | undefined;
  country?: Location$Outbound | undefined;
  createdAt: string;
  economyBan: string;
  foilBadgeCost: number;
  foilBadges: number;
  friends: number;
  gameBans: number;
  hidden: boolean;
  level: number;
  limitedApps: number;
  name: string;
  normalBadgeCost: number;
  normalBadges: number;
  playtime: number;
  pointsGiven: number;
  pointsReceived: number;
  privacy: string;
  rank: number;
  region?: Location$Outbound | undefined;
  roles: Array<Role$Outbound> | null;
  state?: Location$Outbound | undefined;
  steamId: string;
  steamSetsScore: number;
  steamSetsVanity: string;
  steamVanity: string;
  vacBans: number;
  xp: number;
};

/** @internal */
export const V1AccountLeaderboardAccount$outboundSchema: z.ZodType<
  V1AccountLeaderboardAccount$Outbound,
  z.ZodTypeDef,
  V1AccountLeaderboardAccount
> = z.object({
  appCost: z.number().int(),
  appPlaytime: z.nullable(z.number().int()).optional(),
  apps: z.number().int(),
  avatar: z.string(),
  averagePlaytime: z.number().int(),
  awardsGiven: z.number().int(),
  awardsReceived: z.number().int(),
  badgeInfo: LeaderboardBadgeInfo$outboundSchema.optional(),
  badges: z.number().int(),
  bans: z.number().int(),
  city: Location$outboundSchema.optional(),
  country: Location$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  economyBan: z.string(),
  foilBadgeCost: z.number().int(),
  foilBadges: z.number().int(),
  friends: z.number().int(),
  gameBans: z.number().int(),
  hidden: z.boolean(),
  level: z.number().int(),
  limitedApps: z.number().int(),
  name: z.string(),
  normalBadgeCost: z.number().int(),
  normalBadges: z.number().int(),
  playtime: z.number().int(),
  pointsGiven: z.number().int(),
  pointsReceived: z.number().int(),
  privacy: z.string(),
  rank: z.number().int(),
  region: Location$outboundSchema.optional(),
  roles: z.nullable(z.array(Role$outboundSchema)),
  state: Location$outboundSchema.optional(),
  steamId: z.string(),
  steamSetsScore: z.number().int(),
  steamSetsVanity: z.string(),
  steamVanity: z.string(),
  vacBans: z.number().int(),
  xp: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountLeaderboardAccount$ {
  /** @deprecated use `V1AccountLeaderboardAccount$inboundSchema` instead. */
  export const inboundSchema = V1AccountLeaderboardAccount$inboundSchema;
  /** @deprecated use `V1AccountLeaderboardAccount$outboundSchema` instead. */
  export const outboundSchema = V1AccountLeaderboardAccount$outboundSchema;
  /** @deprecated use `V1AccountLeaderboardAccount$Outbound` instead. */
  export type Outbound = V1AccountLeaderboardAccount$Outbound;
}
