/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeaderboardCity = {
  /**
   * The name of the city
   */
  name: string;
};

/** @internal */
export const LeaderboardCity$inboundSchema: z.ZodType<
  LeaderboardCity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type LeaderboardCity$Outbound = {
  name: string;
};

/** @internal */
export const LeaderboardCity$outboundSchema: z.ZodType<
  LeaderboardCity$Outbound,
  z.ZodTypeDef,
  LeaderboardCity
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeaderboardCity$ {
  /** @deprecated use `LeaderboardCity$inboundSchema` instead. */
  export const inboundSchema = LeaderboardCity$inboundSchema;
  /** @deprecated use `LeaderboardCity$outboundSchema` instead. */
  export const outboundSchema = LeaderboardCity$outboundSchema;
  /** @deprecated use `LeaderboardCity$Outbound` instead. */
  export type Outbound = LeaderboardCity$Outbound;
}

export function leaderboardCityToJSON(
  leaderboardCity: LeaderboardCity,
): string {
  return JSON.stringify(LeaderboardCity$outboundSchema.parse(leaderboardCity));
}

export function leaderboardCityFromJSON(
  jsonString: string,
): SafeParseResult<LeaderboardCity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeaderboardCity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeaderboardCity' from JSON`,
  );
}
