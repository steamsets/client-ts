/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const By = {
  Xp: "xp",
  Level: "level",
  Scarcity: "scarcity",
  Name: "name",
} as const;
export type By = ClosedEnum<typeof By>;

export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type V1AccountCompareBadgeOrder = {
  by?: By | undefined;
  direction?: Direction | undefined;
};

/** @internal */
export const By$inboundSchema: z.ZodNativeEnum<typeof By> = z.nativeEnum(By);

/** @internal */
export const By$outboundSchema: z.ZodNativeEnum<typeof By> = By$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace By$ {
  /** @deprecated use `By$inboundSchema` instead. */
  export const inboundSchema = By$inboundSchema;
  /** @deprecated use `By$outboundSchema` instead. */
  export const outboundSchema = By$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const V1AccountCompareBadgeOrder$inboundSchema: z.ZodType<
  V1AccountCompareBadgeOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: By$inboundSchema.default("xp"),
  direction: Direction$inboundSchema.default("desc"),
});

/** @internal */
export type V1AccountCompareBadgeOrder$Outbound = {
  by: string;
  direction: string;
};

/** @internal */
export const V1AccountCompareBadgeOrder$outboundSchema: z.ZodType<
  V1AccountCompareBadgeOrder$Outbound,
  z.ZodTypeDef,
  V1AccountCompareBadgeOrder
> = z.object({
  by: By$outboundSchema.default("xp"),
  direction: Direction$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountCompareBadgeOrder$ {
  /** @deprecated use `V1AccountCompareBadgeOrder$inboundSchema` instead. */
  export const inboundSchema = V1AccountCompareBadgeOrder$inboundSchema;
  /** @deprecated use `V1AccountCompareBadgeOrder$outboundSchema` instead. */
  export const outboundSchema = V1AccountCompareBadgeOrder$outboundSchema;
  /** @deprecated use `V1AccountCompareBadgeOrder$Outbound` instead. */
  export type Outbound = V1AccountCompareBadgeOrder$Outbound;
}

export function v1AccountCompareBadgeOrderToJSON(
  v1AccountCompareBadgeOrder: V1AccountCompareBadgeOrder,
): string {
  return JSON.stringify(
    V1AccountCompareBadgeOrder$outboundSchema.parse(v1AccountCompareBadgeOrder),
  );
}

export function v1AccountCompareBadgeOrderFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountCompareBadgeOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountCompareBadgeOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountCompareBadgeOrder' from JSON`,
  );
}
