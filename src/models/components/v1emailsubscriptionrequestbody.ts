/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1EmailSubscriptionRequestBody = {
  /**
   * The email address to subscribe to the newsletter (only for the landing page)
   */
  email: string | null;
  /**
   * Whether the user wants to be subscribed to the newsletter
   */
  subscribed: boolean;
};

/** @internal */
export const V1EmailSubscriptionRequestBody$inboundSchema: z.ZodType<
  V1EmailSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()),
  subscribed: z.boolean(),
});

/** @internal */
export type V1EmailSubscriptionRequestBody$Outbound = {
  email: string | null;
  subscribed: boolean;
};

/** @internal */
export const V1EmailSubscriptionRequestBody$outboundSchema: z.ZodType<
  V1EmailSubscriptionRequestBody$Outbound,
  z.ZodTypeDef,
  V1EmailSubscriptionRequestBody
> = z.object({
  email: z.nullable(z.string()),
  subscribed: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1EmailSubscriptionRequestBody$ {
  /** @deprecated use `V1EmailSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1EmailSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `V1EmailSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1EmailSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `V1EmailSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = V1EmailSubscriptionRequestBody$Outbound;
}

export function v1EmailSubscriptionRequestBodyToJSON(
  v1EmailSubscriptionRequestBody: V1EmailSubscriptionRequestBody,
): string {
  return JSON.stringify(
    V1EmailSubscriptionRequestBody$outboundSchema.parse(
      v1EmailSubscriptionRequestBody,
    ),
  );
}

export function v1EmailSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1EmailSubscriptionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1EmailSubscriptionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1EmailSubscriptionRequestBody' from JSON`,
  );
}
