/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountLeaderboardAppSearch = {
  /**
   * For a given app leaderboard, the app id
   */
  appId?: number | undefined;
};

/** @internal */
export const V1AccountLeaderboardAppSearch$inboundSchema: z.ZodType<
  V1AccountLeaderboardAppSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.number().int().optional(),
});

/** @internal */
export type V1AccountLeaderboardAppSearch$Outbound = {
  appId?: number | undefined;
};

/** @internal */
export const V1AccountLeaderboardAppSearch$outboundSchema: z.ZodType<
  V1AccountLeaderboardAppSearch$Outbound,
  z.ZodTypeDef,
  V1AccountLeaderboardAppSearch
> = z.object({
  appId: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountLeaderboardAppSearch$ {
  /** @deprecated use `V1AccountLeaderboardAppSearch$inboundSchema` instead. */
  export const inboundSchema = V1AccountLeaderboardAppSearch$inboundSchema;
  /** @deprecated use `V1AccountLeaderboardAppSearch$outboundSchema` instead. */
  export const outboundSchema = V1AccountLeaderboardAppSearch$outboundSchema;
  /** @deprecated use `V1AccountLeaderboardAppSearch$Outbound` instead. */
  export type Outbound = V1AccountLeaderboardAppSearch$Outbound;
}

export function v1AccountLeaderboardAppSearchToJSON(
  v1AccountLeaderboardAppSearch: V1AccountLeaderboardAppSearch,
): string {
  return JSON.stringify(
    V1AccountLeaderboardAppSearch$outboundSchema.parse(
      v1AccountLeaderboardAppSearch,
    ),
  );
}

export function v1AccountLeaderboardAppSearchFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountLeaderboardAppSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountLeaderboardAppSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountLeaderboardAppSearch' from JSON`,
  );
}
