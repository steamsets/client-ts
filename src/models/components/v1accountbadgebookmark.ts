/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountBadgeBookmark = {
  /**
   * The badge id
   */
  badgeId: string;
  /**
   * The time the badge was bookmarked
   */
  bookmarkedAt: Date;
};

/** @internal */
export const V1AccountBadgeBookmark$inboundSchema: z.ZodType<
  V1AccountBadgeBookmark,
  z.ZodTypeDef,
  unknown
> = z.object({
  badgeId: z.string(),
  bookmarkedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
});

/** @internal */
export type V1AccountBadgeBookmark$Outbound = {
  badgeId: string;
  bookmarkedAt: string;
};

/** @internal */
export const V1AccountBadgeBookmark$outboundSchema: z.ZodType<
  V1AccountBadgeBookmark$Outbound,
  z.ZodTypeDef,
  V1AccountBadgeBookmark
> = z.object({
  badgeId: z.string(),
  bookmarkedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountBadgeBookmark$ {
  /** @deprecated use `V1AccountBadgeBookmark$inboundSchema` instead. */
  export const inboundSchema = V1AccountBadgeBookmark$inboundSchema;
  /** @deprecated use `V1AccountBadgeBookmark$outboundSchema` instead. */
  export const outboundSchema = V1AccountBadgeBookmark$outboundSchema;
  /** @deprecated use `V1AccountBadgeBookmark$Outbound` instead. */
  export type Outbound = V1AccountBadgeBookmark$Outbound;
}

export function v1AccountBadgeBookmarkToJSON(
  v1AccountBadgeBookmark: V1AccountBadgeBookmark,
): string {
  return JSON.stringify(
    V1AccountBadgeBookmark$outboundSchema.parse(v1AccountBadgeBookmark),
  );
}

export function v1AccountBadgeBookmarkFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountBadgeBookmark, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountBadgeBookmark$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountBadgeBookmark' from JSON`,
  );
}
