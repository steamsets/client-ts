/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Session = {
  /**
   * The time the session was created
   */
  createdAt: Date;
  /**
   * The time the session expires
   */
  expiresAt: Date;
  /**
   * The ip of the session
   */
  ip: string;
  /**
   * The time the session was last seen
   */
  lastSeen: Date;
  /**
   * The level of the logged in account on steam
   */
  level: number;
  /**
   * The session id
   */
  sessionId: string;
  /**
   * The user agent of the session
   */
  userAgent: string;
};

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    expiresAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    ip: z.string(),
    lastSeen: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    level: z.number().int(),
    sessionId: z.string(),
    userAgent: z.string(),
  });

/** @internal */
export type Session$Outbound = {
  createdAt: string;
  expiresAt: string;
  ip: string;
  lastSeen: string;
  level: number;
  sessionId: string;
  userAgent: string;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  expiresAt: z.date().transform(v => v.toISOString()),
  ip: z.string(),
  lastSeen: z.date().transform(v => v.toISOString()),
  level: z.number().int(),
  sessionId: z.string(),
  userAgent: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}
