/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  State,
  State$inboundSchema,
  State$Outbound,
  State$outboundSchema,
} from "./state.js";

export type Country = {
  /**
   * The code of the country
   */
  code: string;
  /**
   * The name of the country
   */
  name: string;
  /**
   * The states of the country
   */
  states: { [k: string]: State };
};

/** @internal */
export const Country$inboundSchema: z.ZodType<Country, z.ZodTypeDef, unknown> =
  z.object({
    code: z.string(),
    name: z.string(),
    states: z.record(State$inboundSchema),
  });

/** @internal */
export type Country$Outbound = {
  code: string;
  name: string;
  states: { [k: string]: State$Outbound };
};

/** @internal */
export const Country$outboundSchema: z.ZodType<
  Country$Outbound,
  z.ZodTypeDef,
  Country
> = z.object({
  code: z.string(),
  name: z.string(),
  states: z.record(State$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Country$ {
  /** @deprecated use `Country$inboundSchema` instead. */
  export const inboundSchema = Country$inboundSchema;
  /** @deprecated use `Country$outboundSchema` instead. */
  export const outboundSchema = Country$outboundSchema;
  /** @deprecated use `Country$Outbound` instead. */
  export type Outbound = Country$Outbound;
}
