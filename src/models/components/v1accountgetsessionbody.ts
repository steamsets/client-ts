/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Resource,
  Resource$inboundSchema,
  Resource$Outbound,
  Resource$outboundSchema,
} from "./resource.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";
import {
  Session,
  Session$inboundSchema,
  Session$Outbound,
  Session$outboundSchema,
} from "./session.js";

export type V1AccountGetSessionBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  /**
   * The account id
   */
  accountId: number;
  /**
   * The avatar of the account
   */
  avatar: string;
  /**
   * The email of the account
   */
  email?: string | null | undefined;
  /**
   * Whether the account is new
   */
  isNew: boolean;
  /**
   * The XP of the account
   */
  level: number;
  /**
   * The name of the account
   */
  name: string;
  /**
   * The resources the account has (permissions)
   */
  resources: Array<Resource> | null;
  /**
   * The roles the account has
   */
  roles: Array<Role> | null;
  sessionData: Session;
  /**
   * The steam id
   */
  steamId: string;
};

/** @internal */
export const V1AccountGetSessionBody$inboundSchema: z.ZodType<
  V1AccountGetSessionBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  accountId: z.number().int(),
  avatar: z.string(),
  email: z.nullable(z.string()).optional(),
  isNew: z.boolean(),
  level: z.number().int(),
  name: z.string(),
  resources: z.nullable(z.array(Resource$inboundSchema)),
  roles: z.nullable(z.array(Role$inboundSchema)),
  sessionData: Session$inboundSchema,
  steamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountGetSessionBody$Outbound = {
  $schema?: string | undefined;
  accountId: number;
  avatar: string;
  email?: string | null | undefined;
  isNew: boolean;
  level: number;
  name: string;
  resources: Array<Resource$Outbound> | null;
  roles: Array<Role$Outbound> | null;
  sessionData: Session$Outbound;
  steamId: string;
};

/** @internal */
export const V1AccountGetSessionBody$outboundSchema: z.ZodType<
  V1AccountGetSessionBody$Outbound,
  z.ZodTypeDef,
  V1AccountGetSessionBody
> = z.object({
  dollarSchema: z.string().optional(),
  accountId: z.number().int(),
  avatar: z.string(),
  email: z.nullable(z.string()).optional(),
  isNew: z.boolean(),
  level: z.number().int(),
  name: z.string(),
  resources: z.nullable(z.array(Resource$outboundSchema)),
  roles: z.nullable(z.array(Role$outboundSchema)),
  sessionData: Session$outboundSchema,
  steamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountGetSessionBody$ {
  /** @deprecated use `V1AccountGetSessionBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountGetSessionBody$inboundSchema;
  /** @deprecated use `V1AccountGetSessionBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountGetSessionBody$outboundSchema;
  /** @deprecated use `V1AccountGetSessionBody$Outbound` instead. */
  export type Outbound = V1AccountGetSessionBody$Outbound;
}

export function v1AccountGetSessionBodyToJSON(
  v1AccountGetSessionBody: V1AccountGetSessionBody,
): string {
  return JSON.stringify(
    V1AccountGetSessionBody$outboundSchema.parse(v1AccountGetSessionBody),
  );
}

export function v1AccountGetSessionBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountGetSessionBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountGetSessionBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountGetSessionBody' from JSON`,
  );
}
