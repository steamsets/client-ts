/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountSearch,
  AccountSearch$inboundSchema,
  AccountSearch$Outbound,
  AccountSearch$outboundSchema,
} from "./accountsearch.js";

export type V1AccountCompareBadgesRequestBody = {
  comparing: Array<AccountSearch> | null;
};

/** @internal */
export const V1AccountCompareBadgesRequestBody$inboundSchema: z.ZodType<
  V1AccountCompareBadgesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  Comparing: z.nullable(z.array(AccountSearch$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "Comparing": "comparing",
  });
});

/** @internal */
export type V1AccountCompareBadgesRequestBody$Outbound = {
  Comparing: Array<AccountSearch$Outbound> | null;
};

/** @internal */
export const V1AccountCompareBadgesRequestBody$outboundSchema: z.ZodType<
  V1AccountCompareBadgesRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountCompareBadgesRequestBody
> = z.object({
  comparing: z.nullable(z.array(AccountSearch$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    comparing: "Comparing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountCompareBadgesRequestBody$ {
  /** @deprecated use `V1AccountCompareBadgesRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountCompareBadgesRequestBody$inboundSchema;
  /** @deprecated use `V1AccountCompareBadgesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountCompareBadgesRequestBody$outboundSchema;
  /** @deprecated use `V1AccountCompareBadgesRequestBody$Outbound` instead. */
  export type Outbound = V1AccountCompareBadgesRequestBody$Outbound;
}

export function v1AccountCompareBadgesRequestBodyToJSON(
  v1AccountCompareBadgesRequestBody: V1AccountCompareBadgesRequestBody,
): string {
  return JSON.stringify(
    V1AccountCompareBadgesRequestBody$outboundSchema.parse(
      v1AccountCompareBadgesRequestBody,
    ),
  );
}

export function v1AccountCompareBadgesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountCompareBadgesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountCompareBadgesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountCompareBadgesRequestBody' from JSON`,
  );
}
