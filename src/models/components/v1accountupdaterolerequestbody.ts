/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The role the account should have between one of the 6 donation roles
 */
export const V1AccountUpdateRoleRequestBodyRole = {
  Amber: "amber",
  Amethyst: "amethyst",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
} as const;
/**
 * The role the account should have between one of the 6 donation roles
 */
export type V1AccountUpdateRoleRequestBodyRole = ClosedEnum<
  typeof V1AccountUpdateRoleRequestBodyRole
>;

export type V1AccountUpdateRoleRequestBody = {
  /**
   * The role the account should have between one of the 6 donation roles
   */
  role?: V1AccountUpdateRoleRequestBodyRole | undefined;
};

/** @internal */
export const V1AccountUpdateRoleRequestBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof V1AccountUpdateRoleRequestBodyRole
> = z.nativeEnum(V1AccountUpdateRoleRequestBodyRole);

/** @internal */
export const V1AccountUpdateRoleRequestBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof V1AccountUpdateRoleRequestBodyRole
> = V1AccountUpdateRoleRequestBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountUpdateRoleRequestBodyRole$ {
  /** @deprecated use `V1AccountUpdateRoleRequestBodyRole$inboundSchema` instead. */
  export const inboundSchema = V1AccountUpdateRoleRequestBodyRole$inboundSchema;
  /** @deprecated use `V1AccountUpdateRoleRequestBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountUpdateRoleRequestBodyRole$outboundSchema;
}

/** @internal */
export const V1AccountUpdateRoleRequestBody$inboundSchema: z.ZodType<
  V1AccountUpdateRoleRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: V1AccountUpdateRoleRequestBodyRole$inboundSchema.optional(),
});

/** @internal */
export type V1AccountUpdateRoleRequestBody$Outbound = {
  role?: string | undefined;
};

/** @internal */
export const V1AccountUpdateRoleRequestBody$outboundSchema: z.ZodType<
  V1AccountUpdateRoleRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountUpdateRoleRequestBody
> = z.object({
  role: V1AccountUpdateRoleRequestBodyRole$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountUpdateRoleRequestBody$ {
  /** @deprecated use `V1AccountUpdateRoleRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountUpdateRoleRequestBody$inboundSchema;
  /** @deprecated use `V1AccountUpdateRoleRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountUpdateRoleRequestBody$outboundSchema;
  /** @deprecated use `V1AccountUpdateRoleRequestBody$Outbound` instead. */
  export type Outbound = V1AccountUpdateRoleRequestBody$Outbound;
}

export function v1AccountUpdateRoleRequestBodyToJSON(
  v1AccountUpdateRoleRequestBody: V1AccountUpdateRoleRequestBody,
): string {
  return JSON.stringify(
    V1AccountUpdateRoleRequestBody$outboundSchema.parse(
      v1AccountUpdateRoleRequestBody,
    ),
  );
}

export function v1AccountUpdateRoleRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountUpdateRoleRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountUpdateRoleRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountUpdateRoleRequestBody' from JSON`,
  );
}
