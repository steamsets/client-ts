/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LeaderboardCity,
  LeaderboardCity$inboundSchema,
  LeaderboardCity$Outbound,
  LeaderboardCity$outboundSchema,
} from "./leaderboardcity.js";
import {
  LeaderboardCountry,
  LeaderboardCountry$inboundSchema,
  LeaderboardCountry$Outbound,
  LeaderboardCountry$outboundSchema,
} from "./leaderboardcountry.js";
import {
  LeaderboardRegion,
  LeaderboardRegion$inboundSchema,
  LeaderboardRegion$Outbound,
  LeaderboardRegion$outboundSchema,
} from "./leaderboardregion.js";
import {
  LeaderboardState,
  LeaderboardState$inboundSchema,
  LeaderboardState$Outbound,
  LeaderboardState$outboundSchema,
} from "./leaderboardstate.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

/**
 * The privacy of the account
 */
export const V1AccountFriendPrivacy = {
  Public: "public",
  Private: "private",
  FriendsOnly: "friends_only",
} as const;
/**
 * The privacy of the account
 */
export type V1AccountFriendPrivacy = ClosedEnum<typeof V1AccountFriendPrivacy>;

export type V1AccountFriend = {
  /**
   * The cost of an app
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  appCost: number;
  /**
   * The number of apps the account has
   */
  apps: number;
  /**
   * The avatar hash of the account
   */
  avatar: string;
  /**
   * The number of awards the account has
   */
  awardsGiven: number;
  /**
   * The number of awards the account has
   */
  awardsReceived: number;
  /**
   * The number of badges the account has
   */
  badges: number;
  /**
   * The number of bans
   */
  bans: number;
  city?: LeaderboardCity | null | undefined;
  country?: LeaderboardCountry | null | undefined;
  /**
   * The time the account was created
   */
  createdAt: Date;
  /**
   * The total of donations the account has
   */
  donated: number;
  /**
   * The economy ban of the account
   */
  economyBan: string;
  /**
   * The cost of a foil badge
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  foilBadgeCost: number;
  /**
   * The number of foil badges the account has
   */
  foilBadges: number;
  /**
   * The number of friends the account has
   */
  friends: number;
  friendsSince: Date | null;
  /**
   * The number of game bans
   */
  gameBans: number;
  /**
   * The level of the account
   */
  level: number;
  /**
   * The name of the account
   */
  name: string;
  /**
   * The cost of a normal badge
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  normalBadgeCost: number;
  /**
   * The number of normal badges the account has
   */
  normalBadges: number;
  /**
   * The playtime of the account
   */
  playtime: number;
  /**
   * The number of points the account has
   */
  pointsGiven: number;
  /**
   * The number of points the account has
   */
  pointsReceived: number;
  /**
   * The privacy of the account
   */
  privacy: V1AccountFriendPrivacy;
  region?: LeaderboardRegion | null | undefined;
  /**
   * The roles of the account
   */
  roles: Array<Role> | null;
  state?: LeaderboardState | null | undefined;
  /**
   * The steam id
   */
  steamId: string;
  /**
   * The steam sets score
   */
  steamSetsScore: number;
  /**
   * The vanity of the account
   */
  steamSetsVanity: string;
  /**
   * The vanity of the account
   */
  steamVanity: string;
  /**
   * The number of vac bans
   */
  vacBans: number;
  /**
   * The number of xp the account has
   */
  xp: number;
};

/** @internal */
export const V1AccountFriendPrivacy$inboundSchema: z.ZodNativeEnum<
  typeof V1AccountFriendPrivacy
> = z.nativeEnum(V1AccountFriendPrivacy);

/** @internal */
export const V1AccountFriendPrivacy$outboundSchema: z.ZodNativeEnum<
  typeof V1AccountFriendPrivacy
> = V1AccountFriendPrivacy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountFriendPrivacy$ {
  /** @deprecated use `V1AccountFriendPrivacy$inboundSchema` instead. */
  export const inboundSchema = V1AccountFriendPrivacy$inboundSchema;
  /** @deprecated use `V1AccountFriendPrivacy$outboundSchema` instead. */
  export const outboundSchema = V1AccountFriendPrivacy$outboundSchema;
}

/** @internal */
export const V1AccountFriend$inboundSchema: z.ZodType<
  V1AccountFriend,
  z.ZodTypeDef,
  unknown
> = z.object({
  appCost: z.number().int(),
  apps: z.number().int(),
  avatar: z.string(),
  awardsGiven: z.number().int(),
  awardsReceived: z.number().int(),
  badges: z.number().int(),
  bans: z.number().int(),
  city: z.nullable(LeaderboardCity$inboundSchema).optional(),
  country: z.nullable(LeaderboardCountry$inboundSchema).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  donated: z.number().int(),
  economyBan: z.string(),
  foilBadgeCost: z.number().int(),
  foilBadges: z.number().int(),
  friends: z.number().int(),
  friendsSince: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  gameBans: z.number().int(),
  level: z.number().int(),
  name: z.string(),
  normalBadgeCost: z.number().int(),
  normalBadges: z.number().int(),
  playtime: z.number().int(),
  pointsGiven: z.number().int(),
  pointsReceived: z.number().int(),
  privacy: V1AccountFriendPrivacy$inboundSchema,
  region: z.nullable(LeaderboardRegion$inboundSchema).optional(),
  roles: z.nullable(z.array(Role$inboundSchema)),
  state: z.nullable(LeaderboardState$inboundSchema).optional(),
  steamId: z.string(),
  steamSetsScore: z.number().int(),
  steamSetsVanity: z.string(),
  steamVanity: z.string(),
  vacBans: z.number().int(),
  xp: z.number().int(),
});

/** @internal */
export type V1AccountFriend$Outbound = {
  appCost: number;
  apps: number;
  avatar: string;
  awardsGiven: number;
  awardsReceived: number;
  badges: number;
  bans: number;
  city?: LeaderboardCity$Outbound | null | undefined;
  country?: LeaderboardCountry$Outbound | null | undefined;
  createdAt: string;
  donated: number;
  economyBan: string;
  foilBadgeCost: number;
  foilBadges: number;
  friends: number;
  friendsSince: string | null;
  gameBans: number;
  level: number;
  name: string;
  normalBadgeCost: number;
  normalBadges: number;
  playtime: number;
  pointsGiven: number;
  pointsReceived: number;
  privacy: string;
  region?: LeaderboardRegion$Outbound | null | undefined;
  roles: Array<Role$Outbound> | null;
  state?: LeaderboardState$Outbound | null | undefined;
  steamId: string;
  steamSetsScore: number;
  steamSetsVanity: string;
  steamVanity: string;
  vacBans: number;
  xp: number;
};

/** @internal */
export const V1AccountFriend$outboundSchema: z.ZodType<
  V1AccountFriend$Outbound,
  z.ZodTypeDef,
  V1AccountFriend
> = z.object({
  appCost: z.number().int(),
  apps: z.number().int(),
  avatar: z.string(),
  awardsGiven: z.number().int(),
  awardsReceived: z.number().int(),
  badges: z.number().int(),
  bans: z.number().int(),
  city: z.nullable(LeaderboardCity$outboundSchema).optional(),
  country: z.nullable(LeaderboardCountry$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  donated: z.number().int(),
  economyBan: z.string(),
  foilBadgeCost: z.number().int(),
  foilBadges: z.number().int(),
  friends: z.number().int(),
  friendsSince: z.nullable(z.date().transform(v => v.toISOString())),
  gameBans: z.number().int(),
  level: z.number().int(),
  name: z.string(),
  normalBadgeCost: z.number().int(),
  normalBadges: z.number().int(),
  playtime: z.number().int(),
  pointsGiven: z.number().int(),
  pointsReceived: z.number().int(),
  privacy: V1AccountFriendPrivacy$outboundSchema,
  region: z.nullable(LeaderboardRegion$outboundSchema).optional(),
  roles: z.nullable(z.array(Role$outboundSchema)),
  state: z.nullable(LeaderboardState$outboundSchema).optional(),
  steamId: z.string(),
  steamSetsScore: z.number().int(),
  steamSetsVanity: z.string(),
  steamVanity: z.string(),
  vacBans: z.number().int(),
  xp: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountFriend$ {
  /** @deprecated use `V1AccountFriend$inboundSchema` instead. */
  export const inboundSchema = V1AccountFriend$inboundSchema;
  /** @deprecated use `V1AccountFriend$outboundSchema` instead. */
  export const outboundSchema = V1AccountFriend$outboundSchema;
  /** @deprecated use `V1AccountFriend$Outbound` instead. */
  export type Outbound = V1AccountFriend$Outbound;
}

export function v1AccountFriendToJSON(
  v1AccountFriend: V1AccountFriend,
): string {
  return JSON.stringify(V1AccountFriend$outboundSchema.parse(v1AccountFriend));
}

export function v1AccountFriendFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountFriend, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountFriend$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountFriend' from JSON`,
  );
}
