/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Range = {
  /**
   * Maximum value (inclusive)
   */
  max?: number | undefined;
  /**
   * Minimum value (inclusive)
   */
  min?: number | undefined;
};

/** @internal */
export const Range$inboundSchema: z.ZodType<Range, z.ZodTypeDef, unknown> = z
  .object({
    max: z.number().int().optional(),
    min: z.number().int().optional(),
  });

/** @internal */
export type Range$Outbound = {
  max?: number | undefined;
  min?: number | undefined;
};

/** @internal */
export const Range$outboundSchema: z.ZodType<
  Range$Outbound,
  z.ZodTypeDef,
  Range
> = z.object({
  max: z.number().int().optional(),
  min: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Range$ {
  /** @deprecated use `Range$inboundSchema` instead. */
  export const inboundSchema = Range$inboundSchema;
  /** @deprecated use `Range$outboundSchema` instead. */
  export const outboundSchema = Range$outboundSchema;
  /** @deprecated use `Range$Outbound` instead. */
  export type Outbound = Range$Outbound;
}

export function rangeToJSON(range: Range): string {
  return JSON.stringify(Range$outboundSchema.parse(range));
}

export function rangeFromJSON(
  jsonString: string,
): SafeParseResult<Range, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Range$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Range' from JSON`,
  );
}
