/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The provider to connect with
 */
export const Provider = {
  Discord: "discord",
  Patreon: "patreon",
  Kick: "kick",
  Reddit: "reddit",
  Twitch: "twitch",
  Youtube: "youtube",
  X: "x",
  Domain: "domain",
} as const;
/**
 * The provider to connect with
 */
export type Provider = ClosedEnum<typeof Provider>;

export type V1AccountCreateConnectionRequestBody = {
  /**
   * The code from the oauth2 provider to verify
   */
  code: string;
  /**
   * The provider to connect with
   */
  provider: Provider;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const V1AccountCreateConnectionRequestBody$inboundSchema: z.ZodType<
  V1AccountCreateConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  provider: Provider$inboundSchema,
});

/** @internal */
export type V1AccountCreateConnectionRequestBody$Outbound = {
  code: string;
  provider: string;
};

/** @internal */
export const V1AccountCreateConnectionRequestBody$outboundSchema: z.ZodType<
  V1AccountCreateConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountCreateConnectionRequestBody
> = z.object({
  code: z.string(),
  provider: Provider$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountCreateConnectionRequestBody$ {
  /** @deprecated use `V1AccountCreateConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1AccountCreateConnectionRequestBody$inboundSchema;
  /** @deprecated use `V1AccountCreateConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountCreateConnectionRequestBody$outboundSchema;
  /** @deprecated use `V1AccountCreateConnectionRequestBody$Outbound` instead. */
  export type Outbound = V1AccountCreateConnectionRequestBody$Outbound;
}

export function v1AccountCreateConnectionRequestBodyToJSON(
  v1AccountCreateConnectionRequestBody: V1AccountCreateConnectionRequestBody,
): string {
  return JSON.stringify(
    V1AccountCreateConnectionRequestBody$outboundSchema.parse(
      v1AccountCreateConnectionRequestBody,
    ),
  );
}

export function v1AccountCreateConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountCreateConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountCreateConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountCreateConnectionRequestBody' from JSON`,
  );
}
