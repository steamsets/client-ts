/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1LeaderboardBadgeEvent = {
  /**
   * The body image of the event
   */
  bodyImage: string;
  /**
   * The number of downvotes the event has
   */
  downvotes: number;
  /**
   * The time the event ends
   */
  endsAt: Date;
  /**
   * The gid of the event
   */
  gid: string;
  /**
   * The header image of the event
   */
  headerImage: string;
  /**
   * The name of the event
   */
  name: string;
  /**
   * The time the event was posted
   */
  postedAt: Date;
  /**
   * The time the event starts
   */
  startsAt: Date;
  /**
   * The title of the event
   */
  title: string;
  /**
   * The number of upvotes the event has
   */
  upvotes: number;
};

/** @internal */
export const V1LeaderboardBadgeEvent$inboundSchema: z.ZodType<
  V1LeaderboardBadgeEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  bodyImage: z.string(),
  downvotes: z.number().int(),
  endsAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  gid: z.string(),
  headerImage: z.string(),
  name: z.string(),
  postedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  startsAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  title: z.string(),
  upvotes: z.number().int(),
});

/** @internal */
export type V1LeaderboardBadgeEvent$Outbound = {
  bodyImage: string;
  downvotes: number;
  endsAt: string;
  gid: string;
  headerImage: string;
  name: string;
  postedAt: string;
  startsAt: string;
  title: string;
  upvotes: number;
};

/** @internal */
export const V1LeaderboardBadgeEvent$outboundSchema: z.ZodType<
  V1LeaderboardBadgeEvent$Outbound,
  z.ZodTypeDef,
  V1LeaderboardBadgeEvent
> = z.object({
  bodyImage: z.string(),
  downvotes: z.number().int(),
  endsAt: z.date().transform(v => v.toISOString()),
  gid: z.string(),
  headerImage: z.string(),
  name: z.string(),
  postedAt: z.date().transform(v => v.toISOString()),
  startsAt: z.date().transform(v => v.toISOString()),
  title: z.string(),
  upvotes: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardBadgeEvent$ {
  /** @deprecated use `V1LeaderboardBadgeEvent$inboundSchema` instead. */
  export const inboundSchema = V1LeaderboardBadgeEvent$inboundSchema;
  /** @deprecated use `V1LeaderboardBadgeEvent$outboundSchema` instead. */
  export const outboundSchema = V1LeaderboardBadgeEvent$outboundSchema;
  /** @deprecated use `V1LeaderboardBadgeEvent$Outbound` instead. */
  export type Outbound = V1LeaderboardBadgeEvent$Outbound;
}

export function v1LeaderboardBadgeEventToJSON(
  v1LeaderboardBadgeEvent: V1LeaderboardBadgeEvent,
): string {
  return JSON.stringify(
    V1LeaderboardBadgeEvent$outboundSchema.parse(v1LeaderboardBadgeEvent),
  );
}

export function v1LeaderboardBadgeEventFromJSON(
  jsonString: string,
): SafeParseResult<V1LeaderboardBadgeEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1LeaderboardBadgeEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1LeaderboardBadgeEvent' from JSON`,
  );
}
