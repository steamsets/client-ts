/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AccountLeaderboardAppSearch,
  V1AccountLeaderboardAppSearch$inboundSchema,
  V1AccountLeaderboardAppSearch$Outbound,
  V1AccountLeaderboardAppSearch$outboundSchema,
} from "./v1accountleaderboardappsearch.js";
import {
  V1AccountLeaderboardBadgeSearch,
  V1AccountLeaderboardBadgeSearch$inboundSchema,
  V1AccountLeaderboardBadgeSearch$Outbound,
  V1AccountLeaderboardBadgeSearch$outboundSchema,
} from "./v1accountleaderboardbadgesearch.js";
import {
  V1LeaderboardLocation,
  V1LeaderboardLocation$inboundSchema,
  V1LeaderboardLocation$Outbound,
  V1LeaderboardLocation$outboundSchema,
} from "./v1leaderboardlocation.js";

/**
 * The leaderboard to get
 */
export const V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard = {
  Apps: "apps",
  AppPlaytime: "app_playtime",
  AppValidPlaytime: "app_valid_playtime",
  AwardsGiven: "awards_given",
  AwardsReceived: "awards_received",
  Bans: "bans",
  GameBans: "game_bans",
  VacBans: "vac_bans",
  Donations: "donations",
  FoilBadges: "foil_badges",
  NormalBadges: "normal_badges",
  Badges: "badges",
  Playtime: "playtime",
  ValidPlaytime: "valid_playtime",
  PointsGiven: "points_given",
  PointsReceived: "points_received",
  SteamSets: "steam_sets",
  Xp: "xp",
  BadgeCompletionTime: "badge_completion_time",
  BadgeHighestLevel: "badge_highest_level",
} as const;
/**
 * The leaderboard to get
 */
export type V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard =
  ClosedEnum<typeof V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard>;

export type V1LeaderboardGetAccountLeaderboardRequestBody = {
  app?: V1AccountLeaderboardAppSearch | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch | null | undefined;
  /**
   * The end index
   */
  end?: number | null | undefined;
  /**
   * The rank to go to
   */
  goToLeaderboardRank?: number | null | undefined;
  /**
   * The leaderboard to get
   */
  leaderboard: V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard;
  /**
   * The location(s)to get the leaderboard for, otherwise global
   */
  location?: Array<V1LeaderboardLocation | null> | null | undefined;
  /**
   * The start index
   */
  start?: number | null | undefined;
};

/** @internal */
export const V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$inboundSchema:
  z.ZodNativeEnum<
    typeof V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard
  > = z.nativeEnum(V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard);

/** @internal */
export const V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$outboundSchema:
  z.ZodNativeEnum<
    typeof V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard
  > = V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$ {
  /** @deprecated use `V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$inboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$outboundSchema;
}

/** @internal */
export const V1LeaderboardGetAccountLeaderboardRequestBody$inboundSchema:
  z.ZodType<
    V1LeaderboardGetAccountLeaderboardRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    app: z.nullable(V1AccountLeaderboardAppSearch$inboundSchema).optional(),
    badge: z.nullable(V1AccountLeaderboardBadgeSearch$inboundSchema).optional(),
    end: z.nullable(z.number().int()).optional(),
    goToLeaderboardRank: z.nullable(z.number().int()).optional(),
    leaderboard:
      V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$inboundSchema,
    location: z.nullable(
      z.array(z.nullable(V1LeaderboardLocation$inboundSchema)),
    ).optional(),
    start: z.nullable(z.number().int()).optional(),
  });

/** @internal */
export type V1LeaderboardGetAccountLeaderboardRequestBody$Outbound = {
  app?: V1AccountLeaderboardAppSearch$Outbound | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch$Outbound | null | undefined;
  end?: number | null | undefined;
  goToLeaderboardRank?: number | null | undefined;
  leaderboard: string;
  location?: Array<V1LeaderboardLocation$Outbound | null> | null | undefined;
  start?: number | null | undefined;
};

/** @internal */
export const V1LeaderboardGetAccountLeaderboardRequestBody$outboundSchema:
  z.ZodType<
    V1LeaderboardGetAccountLeaderboardRequestBody$Outbound,
    z.ZodTypeDef,
    V1LeaderboardGetAccountLeaderboardRequestBody
  > = z.object({
    app: z.nullable(V1AccountLeaderboardAppSearch$outboundSchema).optional(),
    badge: z.nullable(V1AccountLeaderboardBadgeSearch$outboundSchema)
      .optional(),
    end: z.nullable(z.number().int()).optional(),
    goToLeaderboardRank: z.nullable(z.number().int()).optional(),
    leaderboard:
      V1LeaderboardGetAccountLeaderboardRequestBodyLeaderboard$outboundSchema,
    location: z.nullable(
      z.array(z.nullable(V1LeaderboardLocation$outboundSchema)),
    ).optional(),
    start: z.nullable(z.number().int()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetAccountLeaderboardRequestBody$ {
  /** @deprecated use `V1LeaderboardGetAccountLeaderboardRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetAccountLeaderboardRequestBody$inboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountLeaderboardRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetAccountLeaderboardRequestBody$outboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountLeaderboardRequestBody$Outbound` instead. */
  export type Outbound = V1LeaderboardGetAccountLeaderboardRequestBody$Outbound;
}

export function v1LeaderboardGetAccountLeaderboardRequestBodyToJSON(
  v1LeaderboardGetAccountLeaderboardRequestBody:
    V1LeaderboardGetAccountLeaderboardRequestBody,
): string {
  return JSON.stringify(
    V1LeaderboardGetAccountLeaderboardRequestBody$outboundSchema.parse(
      v1LeaderboardGetAccountLeaderboardRequestBody,
    ),
  );
}

export function v1LeaderboardGetAccountLeaderboardRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  V1LeaderboardGetAccountLeaderboardRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1LeaderboardGetAccountLeaderboardRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1LeaderboardGetAccountLeaderboardRequestBody' from JSON`,
  );
}
