/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ColorTag = {
  gradient: string | null;
  group: string;
  groupOwner: boolean;
  hex: string | null;
  hsl: string;
  id: number;
  name: string;
};

/** @internal */
export const ColorTag$inboundSchema: z.ZodType<
  ColorTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  Gradient: z.nullable(z.string()),
  Group: z.string(),
  GroupOwner: z.boolean(),
  Hex: z.nullable(z.string()),
  Hsl: z.string(),
  ID: z.number().int(),
  Name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Gradient": "gradient",
    "Group": "group",
    "GroupOwner": "groupOwner",
    "Hex": "hex",
    "Hsl": "hsl",
    "ID": "id",
    "Name": "name",
  });
});

/** @internal */
export type ColorTag$Outbound = {
  Gradient: string | null;
  Group: string;
  GroupOwner: boolean;
  Hex: string | null;
  Hsl: string;
  ID: number;
  Name: string;
};

/** @internal */
export const ColorTag$outboundSchema: z.ZodType<
  ColorTag$Outbound,
  z.ZodTypeDef,
  ColorTag
> = z.object({
  gradient: z.nullable(z.string()),
  group: z.string(),
  groupOwner: z.boolean(),
  hex: z.nullable(z.string()),
  hsl: z.string(),
  id: z.number().int(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    gradient: "Gradient",
    group: "Group",
    groupOwner: "GroupOwner",
    hex: "Hex",
    hsl: "Hsl",
    id: "ID",
    name: "Name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColorTag$ {
  /** @deprecated use `ColorTag$inboundSchema` instead. */
  export const inboundSchema = ColorTag$inboundSchema;
  /** @deprecated use `ColorTag$outboundSchema` instead. */
  export const outboundSchema = ColorTag$outboundSchema;
  /** @deprecated use `ColorTag$Outbound` instead. */
  export type Outbound = ColorTag$Outbound;
}
