/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The role the account should have between one of the 6 donation roles
 */
export const V1UpdateSettingsRequestBodyRole = {
  Amber: "amber",
  Amethyst: "amethyst",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
} as const;
/**
 * The role the account should have between one of the 6 donation roles
 */
export type V1UpdateSettingsRequestBodyRole = ClosedEnum<
  typeof V1UpdateSettingsRequestBodyRole
>;

export type V1UpdateSettingsRequestBody = {
  /**
   * The email the account should use, only if the account is private
   */
  email: string | null;
  /**
   * Whether the account should be hidden in the leaderboards, only possible if the account is private
   */
  hidden: boolean;
  /**
   * The language the account should use, only if the account is private
   */
  language: string;
  /**
   * The role the account should have between one of the 6 donation roles
   */
  role?: V1UpdateSettingsRequestBodyRole | null | undefined;
  /**
   * The vanity the account should use
   */
  vanity: string | null;
};

/** @internal */
export const V1UpdateSettingsRequestBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof V1UpdateSettingsRequestBodyRole
> = z.nativeEnum(V1UpdateSettingsRequestBodyRole);

/** @internal */
export const V1UpdateSettingsRequestBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof V1UpdateSettingsRequestBodyRole
> = V1UpdateSettingsRequestBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateSettingsRequestBodyRole$ {
  /** @deprecated use `V1UpdateSettingsRequestBodyRole$inboundSchema` instead. */
  export const inboundSchema = V1UpdateSettingsRequestBodyRole$inboundSchema;
  /** @deprecated use `V1UpdateSettingsRequestBodyRole$outboundSchema` instead. */
  export const outboundSchema = V1UpdateSettingsRequestBodyRole$outboundSchema;
}

/** @internal */
export const V1UpdateSettingsRequestBody$inboundSchema: z.ZodType<
  V1UpdateSettingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()),
  hidden: z.boolean(),
  language: z.string(),
  role: z.nullable(V1UpdateSettingsRequestBodyRole$inboundSchema).optional(),
  vanity: z.nullable(z.string()),
});

/** @internal */
export type V1UpdateSettingsRequestBody$Outbound = {
  email: string | null;
  hidden: boolean;
  language: string;
  role?: string | null | undefined;
  vanity: string | null;
};

/** @internal */
export const V1UpdateSettingsRequestBody$outboundSchema: z.ZodType<
  V1UpdateSettingsRequestBody$Outbound,
  z.ZodTypeDef,
  V1UpdateSettingsRequestBody
> = z.object({
  email: z.nullable(z.string()),
  hidden: z.boolean(),
  language: z.string(),
  role: z.nullable(V1UpdateSettingsRequestBodyRole$outboundSchema).optional(),
  vanity: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateSettingsRequestBody$ {
  /** @deprecated use `V1UpdateSettingsRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1UpdateSettingsRequestBody$inboundSchema;
  /** @deprecated use `V1UpdateSettingsRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1UpdateSettingsRequestBody$outboundSchema;
  /** @deprecated use `V1UpdateSettingsRequestBody$Outbound` instead. */
  export type Outbound = V1UpdateSettingsRequestBody$Outbound;
}

export function v1UpdateSettingsRequestBodyToJSON(
  v1UpdateSettingsRequestBody: V1UpdateSettingsRequestBody,
): string {
  return JSON.stringify(
    V1UpdateSettingsRequestBody$outboundSchema.parse(
      v1UpdateSettingsRequestBody,
    ),
  );
}

export function v1UpdateSettingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateSettingsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateSettingsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateSettingsRequestBody' from JSON`,
  );
}
