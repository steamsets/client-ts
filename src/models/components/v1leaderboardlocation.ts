/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1LeaderboardLocation = {
  /**
   * The city to get the leaderboard for, otherwise global
   */
  city?: string | null | undefined;
  /**
   * The country to get the leaderboard for, otherwise global
   */
  country?: string | null | undefined;
  /**
   * The region to get the leaderboard for, otherwise global
   */
  region?: string | null | undefined;
  /**
   * The state to get the leaderboard for, otherwise global
   */
  state?: string | null | undefined;
};

/** @internal */
export const V1LeaderboardLocation$inboundSchema: z.ZodType<
  V1LeaderboardLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
});

/** @internal */
export type V1LeaderboardLocation$Outbound = {
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  state?: string | null | undefined;
};

/** @internal */
export const V1LeaderboardLocation$outboundSchema: z.ZodType<
  V1LeaderboardLocation$Outbound,
  z.ZodTypeDef,
  V1LeaderboardLocation
> = z.object({
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardLocation$ {
  /** @deprecated use `V1LeaderboardLocation$inboundSchema` instead. */
  export const inboundSchema = V1LeaderboardLocation$inboundSchema;
  /** @deprecated use `V1LeaderboardLocation$outboundSchema` instead. */
  export const outboundSchema = V1LeaderboardLocation$outboundSchema;
  /** @deprecated use `V1LeaderboardLocation$Outbound` instead. */
  export type Outbound = V1LeaderboardLocation$Outbound;
}

export function v1LeaderboardLocationToJSON(
  v1LeaderboardLocation: V1LeaderboardLocation,
): string {
  return JSON.stringify(
    V1LeaderboardLocation$outboundSchema.parse(v1LeaderboardLocation),
  );
}

export function v1LeaderboardLocationFromJSON(
  jsonString: string,
): SafeParseResult<V1LeaderboardLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1LeaderboardLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1LeaderboardLocation' from JSON`,
  );
}
