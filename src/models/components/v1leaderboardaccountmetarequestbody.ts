/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AccountLeaderboardAppSearch,
  V1AccountLeaderboardAppSearch$inboundSchema,
  V1AccountLeaderboardAppSearch$Outbound,
  V1AccountLeaderboardAppSearch$outboundSchema,
} from "./v1accountleaderboardappsearch.js";
import {
  V1AccountLeaderboardBadgeSearch,
  V1AccountLeaderboardBadgeSearch$inboundSchema,
  V1AccountLeaderboardBadgeSearch$Outbound,
  V1AccountLeaderboardBadgeSearch$outboundSchema,
} from "./v1accountleaderboardbadgesearch.js";
import {
  V1LeaderboardLocation,
  V1LeaderboardLocation$inboundSchema,
  V1LeaderboardLocation$Outbound,
  V1LeaderboardLocation$outboundSchema,
} from "./v1leaderboardlocation.js";

/**
 * The leaderboard to get
 */
export const V1LeaderboardAccountMetaRequestBodyLeaderboard = {
  Apps: "apps",
  AppPlaytime: "app_playtime",
  AwardsGiven: "awards_given",
  AwardsReceived: "awards_received",
  Bans: "bans",
  GameBans: "game_bans",
  VacBans: "vac_bans",
  Donations: "donations",
  FoilBadges: "foil_badges",
  NormalBadges: "normal_badges",
  Badges: "badges",
  Playtime: "playtime",
  PointsGiven: "points_given",
  PointsReceived: "points_received",
  SteamSets: "steam_sets",
  Xp: "xp",
  BadgeCompletionTime: "badge_completion_time",
  BadgeHighestLevel: "badge_highest_level",
} as const;
/**
 * The leaderboard to get
 */
export type V1LeaderboardAccountMetaRequestBodyLeaderboard = ClosedEnum<
  typeof V1LeaderboardAccountMetaRequestBodyLeaderboard
>;

export type V1LeaderboardAccountMetaRequestBody = {
  app?: V1AccountLeaderboardAppSearch | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch | null | undefined;
  /**
   * The leaderboard to get
   */
  leaderboard: V1LeaderboardAccountMetaRequestBodyLeaderboard;
  /**
   * The location(s)to get the leaderboard for, otherwise global
   */
  location?: Array<V1LeaderboardLocation | null> | null | undefined;
};

/** @internal */
export const V1LeaderboardAccountMetaRequestBodyLeaderboard$inboundSchema:
  z.ZodNativeEnum<typeof V1LeaderboardAccountMetaRequestBodyLeaderboard> = z
    .nativeEnum(V1LeaderboardAccountMetaRequestBodyLeaderboard);

/** @internal */
export const V1LeaderboardAccountMetaRequestBodyLeaderboard$outboundSchema:
  z.ZodNativeEnum<typeof V1LeaderboardAccountMetaRequestBodyLeaderboard> =
    V1LeaderboardAccountMetaRequestBodyLeaderboard$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardAccountMetaRequestBodyLeaderboard$ {
  /** @deprecated use `V1LeaderboardAccountMetaRequestBodyLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardAccountMetaRequestBodyLeaderboard$inboundSchema;
  /** @deprecated use `V1LeaderboardAccountMetaRequestBodyLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardAccountMetaRequestBodyLeaderboard$outboundSchema;
}

/** @internal */
export const V1LeaderboardAccountMetaRequestBody$inboundSchema: z.ZodType<
  V1LeaderboardAccountMetaRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  app: z.nullable(V1AccountLeaderboardAppSearch$inboundSchema).optional(),
  badge: z.nullable(V1AccountLeaderboardBadgeSearch$inboundSchema).optional(),
  leaderboard: V1LeaderboardAccountMetaRequestBodyLeaderboard$inboundSchema,
  location: z.nullable(z.array(z.nullable(V1LeaderboardLocation$inboundSchema)))
    .optional(),
});

/** @internal */
export type V1LeaderboardAccountMetaRequestBody$Outbound = {
  app?: V1AccountLeaderboardAppSearch$Outbound | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch$Outbound | null | undefined;
  leaderboard: string;
  location?: Array<V1LeaderboardLocation$Outbound | null> | null | undefined;
};

/** @internal */
export const V1LeaderboardAccountMetaRequestBody$outboundSchema: z.ZodType<
  V1LeaderboardAccountMetaRequestBody$Outbound,
  z.ZodTypeDef,
  V1LeaderboardAccountMetaRequestBody
> = z.object({
  app: z.nullable(V1AccountLeaderboardAppSearch$outboundSchema).optional(),
  badge: z.nullable(V1AccountLeaderboardBadgeSearch$outboundSchema).optional(),
  leaderboard: V1LeaderboardAccountMetaRequestBodyLeaderboard$outboundSchema,
  location: z.nullable(
    z.array(z.nullable(V1LeaderboardLocation$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardAccountMetaRequestBody$ {
  /** @deprecated use `V1LeaderboardAccountMetaRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardAccountMetaRequestBody$inboundSchema;
  /** @deprecated use `V1LeaderboardAccountMetaRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardAccountMetaRequestBody$outboundSchema;
  /** @deprecated use `V1LeaderboardAccountMetaRequestBody$Outbound` instead. */
  export type Outbound = V1LeaderboardAccountMetaRequestBody$Outbound;
}

export function v1LeaderboardAccountMetaRequestBodyToJSON(
  v1LeaderboardAccountMetaRequestBody: V1LeaderboardAccountMetaRequestBody,
): string {
  return JSON.stringify(
    V1LeaderboardAccountMetaRequestBody$outboundSchema.parse(
      v1LeaderboardAccountMetaRequestBody,
    ),
  );
}

export function v1LeaderboardAccountMetaRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1LeaderboardAccountMetaRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1LeaderboardAccountMetaRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1LeaderboardAccountMetaRequestBody' from JSON`,
  );
}
