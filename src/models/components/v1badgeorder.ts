/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1BadgeOrderBy = {
  Xp: "xp",
  Level: "level",
  Scarcity: "scarcity",
  Name: "name",
  CompletionTime: "completion_time",
} as const;
export type V1BadgeOrderBy = ClosedEnum<typeof V1BadgeOrderBy>;

export const V1BadgeOrderDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type V1BadgeOrderDirection = ClosedEnum<typeof V1BadgeOrderDirection>;

export type V1BadgeOrder = {
  by?: V1BadgeOrderBy | undefined;
  direction?: V1BadgeOrderDirection | undefined;
};

/** @internal */
export const V1BadgeOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof V1BadgeOrderBy
> = z.nativeEnum(V1BadgeOrderBy);

/** @internal */
export const V1BadgeOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof V1BadgeOrderBy
> = V1BadgeOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeOrderBy$ {
  /** @deprecated use `V1BadgeOrderBy$inboundSchema` instead. */
  export const inboundSchema = V1BadgeOrderBy$inboundSchema;
  /** @deprecated use `V1BadgeOrderBy$outboundSchema` instead. */
  export const outboundSchema = V1BadgeOrderBy$outboundSchema;
}

/** @internal */
export const V1BadgeOrderDirection$inboundSchema: z.ZodNativeEnum<
  typeof V1BadgeOrderDirection
> = z.nativeEnum(V1BadgeOrderDirection);

/** @internal */
export const V1BadgeOrderDirection$outboundSchema: z.ZodNativeEnum<
  typeof V1BadgeOrderDirection
> = V1BadgeOrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeOrderDirection$ {
  /** @deprecated use `V1BadgeOrderDirection$inboundSchema` instead. */
  export const inboundSchema = V1BadgeOrderDirection$inboundSchema;
  /** @deprecated use `V1BadgeOrderDirection$outboundSchema` instead. */
  export const outboundSchema = V1BadgeOrderDirection$outboundSchema;
}

/** @internal */
export const V1BadgeOrder$inboundSchema: z.ZodType<
  V1BadgeOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: V1BadgeOrderBy$inboundSchema.default("xp"),
  direction: V1BadgeOrderDirection$inboundSchema.default("desc"),
});

/** @internal */
export type V1BadgeOrder$Outbound = {
  by: string;
  direction: string;
};

/** @internal */
export const V1BadgeOrder$outboundSchema: z.ZodType<
  V1BadgeOrder$Outbound,
  z.ZodTypeDef,
  V1BadgeOrder
> = z.object({
  by: V1BadgeOrderBy$outboundSchema.default("xp"),
  direction: V1BadgeOrderDirection$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeOrder$ {
  /** @deprecated use `V1BadgeOrder$inboundSchema` instead. */
  export const inboundSchema = V1BadgeOrder$inboundSchema;
  /** @deprecated use `V1BadgeOrder$outboundSchema` instead. */
  export const outboundSchema = V1BadgeOrder$outboundSchema;
  /** @deprecated use `V1BadgeOrder$Outbound` instead. */
  export type Outbound = V1BadgeOrder$Outbound;
}

export function v1BadgeOrderToJSON(v1BadgeOrder: V1BadgeOrder): string {
  return JSON.stringify(V1BadgeOrder$outboundSchema.parse(v1BadgeOrder));
}

export function v1BadgeOrderFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeOrder' from JSON`,
  );
}
