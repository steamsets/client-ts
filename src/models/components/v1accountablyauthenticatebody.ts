/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountAblyAuthenticateBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  capability?: string | undefined;
  clientId?: string | undefined;
  keyName?: string | undefined;
  mac?: string | undefined;
  nonce?: string | undefined;
  timestamp?: number | undefined;
  ttl?: number | undefined;
};

/** @internal */
export const V1AccountAblyAuthenticateBody$inboundSchema: z.ZodType<
  V1AccountAblyAuthenticateBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  capability: z.string().optional(),
  clientId: z.string().optional(),
  keyName: z.string().optional(),
  mac: z.string().optional(),
  nonce: z.string().optional(),
  timestamp: z.number().int().optional(),
  ttl: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountAblyAuthenticateBody$Outbound = {
  $schema?: string | undefined;
  capability?: string | undefined;
  clientId?: string | undefined;
  keyName?: string | undefined;
  mac?: string | undefined;
  nonce?: string | undefined;
  timestamp?: number | undefined;
  ttl?: number | undefined;
};

/** @internal */
export const V1AccountAblyAuthenticateBody$outboundSchema: z.ZodType<
  V1AccountAblyAuthenticateBody$Outbound,
  z.ZodTypeDef,
  V1AccountAblyAuthenticateBody
> = z.object({
  dollarSchema: z.string().optional(),
  capability: z.string().optional(),
  clientId: z.string().optional(),
  keyName: z.string().optional(),
  mac: z.string().optional(),
  nonce: z.string().optional(),
  timestamp: z.number().int().optional(),
  ttl: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountAblyAuthenticateBody$ {
  /** @deprecated use `V1AccountAblyAuthenticateBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountAblyAuthenticateBody$inboundSchema;
  /** @deprecated use `V1AccountAblyAuthenticateBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountAblyAuthenticateBody$outboundSchema;
  /** @deprecated use `V1AccountAblyAuthenticateBody$Outbound` instead. */
  export type Outbound = V1AccountAblyAuthenticateBody$Outbound;
}

export function v1AccountAblyAuthenticateBodyToJSON(
  v1AccountAblyAuthenticateBody: V1AccountAblyAuthenticateBody,
): string {
  return JSON.stringify(
    V1AccountAblyAuthenticateBody$outboundSchema.parse(
      v1AccountAblyAuthenticateBody,
    ),
  );
}

export function v1AccountAblyAuthenticateBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountAblyAuthenticateBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountAblyAuthenticateBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountAblyAuthenticateBody' from JSON`,
  );
}
