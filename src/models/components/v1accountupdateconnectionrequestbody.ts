/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountUpdateConnectionRequestBody = {
  /**
   * The connection id to update
   */
  connectionId: string;
  /**
   * Whether the connection should be hidden or not
   */
  hidden: boolean;
};

/** @internal */
export const V1AccountUpdateConnectionRequestBody$inboundSchema: z.ZodType<
  V1AccountUpdateConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectionId: z.string(),
  hidden: z.boolean(),
});

/** @internal */
export type V1AccountUpdateConnectionRequestBody$Outbound = {
  connectionId: string;
  hidden: boolean;
};

/** @internal */
export const V1AccountUpdateConnectionRequestBody$outboundSchema: z.ZodType<
  V1AccountUpdateConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountUpdateConnectionRequestBody
> = z.object({
  connectionId: z.string(),
  hidden: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountUpdateConnectionRequestBody$ {
  /** @deprecated use `V1AccountUpdateConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1AccountUpdateConnectionRequestBody$inboundSchema;
  /** @deprecated use `V1AccountUpdateConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountUpdateConnectionRequestBody$outboundSchema;
  /** @deprecated use `V1AccountUpdateConnectionRequestBody$Outbound` instead. */
  export type Outbound = V1AccountUpdateConnectionRequestBody$Outbound;
}

export function v1AccountUpdateConnectionRequestBodyToJSON(
  v1AccountUpdateConnectionRequestBody: V1AccountUpdateConnectionRequestBody,
): string {
  return JSON.stringify(
    V1AccountUpdateConnectionRequestBody$outboundSchema.parse(
      v1AccountUpdateConnectionRequestBody,
    ),
  );
}

export function v1AccountUpdateConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountUpdateConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountUpdateConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountUpdateConnectionRequestBody' from JSON`,
  );
}
