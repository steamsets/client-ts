/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SetRemoveColorTag,
  SetRemoveColorTag$inboundSchema,
  SetRemoveColorTag$Outbound,
  SetRemoveColorTag$outboundSchema,
} from "./setremovecolortag.js";
import {
  SetRemoveDesignTag,
  SetRemoveDesignTag$inboundSchema,
  SetRemoveDesignTag$Outbound,
  SetRemoveDesignTag$outboundSchema,
} from "./setremovedesigntag.js";

export type V1BadgeTagBadgeRequestBody = {
  /**
   * The badge id
   */
  badgeId: string;
  /**
   * All the colors of the badge
   */
  colors: Array<SetRemoveColorTag> | null;
  /**
   * All the designs of the badge
   */
  designs: Array<SetRemoveDesignTag> | null;
};

/** @internal */
export const V1BadgeTagBadgeRequestBody$inboundSchema: z.ZodType<
  V1BadgeTagBadgeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  badgeId: z.string(),
  colors: z.nullable(z.array(SetRemoveColorTag$inboundSchema)),
  designs: z.nullable(z.array(SetRemoveDesignTag$inboundSchema)),
});

/** @internal */
export type V1BadgeTagBadgeRequestBody$Outbound = {
  badgeId: string;
  colors: Array<SetRemoveColorTag$Outbound> | null;
  designs: Array<SetRemoveDesignTag$Outbound> | null;
};

/** @internal */
export const V1BadgeTagBadgeRequestBody$outboundSchema: z.ZodType<
  V1BadgeTagBadgeRequestBody$Outbound,
  z.ZodTypeDef,
  V1BadgeTagBadgeRequestBody
> = z.object({
  badgeId: z.string(),
  colors: z.nullable(z.array(SetRemoveColorTag$outboundSchema)),
  designs: z.nullable(z.array(SetRemoveDesignTag$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeTagBadgeRequestBody$ {
  /** @deprecated use `V1BadgeTagBadgeRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1BadgeTagBadgeRequestBody$inboundSchema;
  /** @deprecated use `V1BadgeTagBadgeRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1BadgeTagBadgeRequestBody$outboundSchema;
  /** @deprecated use `V1BadgeTagBadgeRequestBody$Outbound` instead. */
  export type Outbound = V1BadgeTagBadgeRequestBody$Outbound;
}

export function v1BadgeTagBadgeRequestBodyToJSON(
  v1BadgeTagBadgeRequestBody: V1BadgeTagBadgeRequestBody,
): string {
  return JSON.stringify(
    V1BadgeTagBadgeRequestBody$outboundSchema.parse(v1BadgeTagBadgeRequestBody),
  );
}

export function v1BadgeTagBadgeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeTagBadgeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeTagBadgeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeTagBadgeRequestBody' from JSON`,
  );
}
