/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IDStruct,
  IDStruct$inboundSchema,
  IDStruct$Outbound,
  IDStruct$outboundSchema,
} from "./idstruct.js";
import {
  VanityStruct,
  VanityStruct$inboundSchema,
  VanityStruct$Outbound,
  VanityStruct$outboundSchema,
} from "./vanitystruct.js";

export const DeletedRoles = {
  User: "user",
  Donator: "donator",
  Staff: "staff",
  Developer: "developer",
  Partner: "partner",
  Owner: "owner",
  Amethyst: "amethyst",
  Amber: "amber",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
  Contributor: "contributor",
  EarlySupporter: "early_supporter",
  Beta: "beta",
  Translator: "translator",
  Top100: "top_100",
  BadgeScout: "badge_scout",
} as const;
export type DeletedRoles = ClosedEnum<typeof DeletedRoles>;

export const NewRoles = {
  User: "user",
  Donator: "donator",
  Staff: "staff",
  Developer: "developer",
  Partner: "partner",
  Owner: "owner",
  Amethyst: "amethyst",
  Amber: "amber",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
  Contributor: "contributor",
  EarlySupporter: "early_supporter",
  Beta: "beta",
  Translator: "translator",
  Top100: "top_100",
  BadgeScout: "badge_scout",
} as const;
export type NewRoles = ClosedEnum<typeof NewRoles>;

export type V1AdminUpdateRolessRequestBody = {
  deletedRoles: Array<DeletedRoles> | null;
  id?: IDStruct | undefined;
  newRoles: Array<NewRoles> | null;
  vanity?: VanityStruct | undefined;
};

/** @internal */
export const DeletedRoles$inboundSchema: z.ZodNativeEnum<typeof DeletedRoles> =
  z.nativeEnum(DeletedRoles);

/** @internal */
export const DeletedRoles$outboundSchema: z.ZodNativeEnum<typeof DeletedRoles> =
  DeletedRoles$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletedRoles$ {
  /** @deprecated use `DeletedRoles$inboundSchema` instead. */
  export const inboundSchema = DeletedRoles$inboundSchema;
  /** @deprecated use `DeletedRoles$outboundSchema` instead. */
  export const outboundSchema = DeletedRoles$outboundSchema;
}

/** @internal */
export const NewRoles$inboundSchema: z.ZodNativeEnum<typeof NewRoles> = z
  .nativeEnum(NewRoles);

/** @internal */
export const NewRoles$outboundSchema: z.ZodNativeEnum<typeof NewRoles> =
  NewRoles$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewRoles$ {
  /** @deprecated use `NewRoles$inboundSchema` instead. */
  export const inboundSchema = NewRoles$inboundSchema;
  /** @deprecated use `NewRoles$outboundSchema` instead. */
  export const outboundSchema = NewRoles$outboundSchema;
}

/** @internal */
export const V1AdminUpdateRolessRequestBody$inboundSchema: z.ZodType<
  V1AdminUpdateRolessRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deletedRoles: z.nullable(z.array(DeletedRoles$inboundSchema)),
  id: IDStruct$inboundSchema.optional(),
  newRoles: z.nullable(z.array(NewRoles$inboundSchema)),
  vanity: VanityStruct$inboundSchema.optional(),
});

/** @internal */
export type V1AdminUpdateRolessRequestBody$Outbound = {
  deletedRoles: Array<string> | null;
  id?: IDStruct$Outbound | undefined;
  newRoles: Array<string> | null;
  vanity?: VanityStruct$Outbound | undefined;
};

/** @internal */
export const V1AdminUpdateRolessRequestBody$outboundSchema: z.ZodType<
  V1AdminUpdateRolessRequestBody$Outbound,
  z.ZodTypeDef,
  V1AdminUpdateRolessRequestBody
> = z.object({
  deletedRoles: z.nullable(z.array(DeletedRoles$outboundSchema)),
  id: IDStruct$outboundSchema.optional(),
  newRoles: z.nullable(z.array(NewRoles$outboundSchema)),
  vanity: VanityStruct$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AdminUpdateRolessRequestBody$ {
  /** @deprecated use `V1AdminUpdateRolessRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AdminUpdateRolessRequestBody$inboundSchema;
  /** @deprecated use `V1AdminUpdateRolessRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AdminUpdateRolessRequestBody$outboundSchema;
  /** @deprecated use `V1AdminUpdateRolessRequestBody$Outbound` instead. */
  export type Outbound = V1AdminUpdateRolessRequestBody$Outbound;
}

export function v1AdminUpdateRolessRequestBodyToJSON(
  v1AdminUpdateRolessRequestBody: V1AdminUpdateRolessRequestBody,
): string {
  return JSON.stringify(
    V1AdminUpdateRolessRequestBody$outboundSchema.parse(
      v1AdminUpdateRolessRequestBody,
    ),
  );
}

export function v1AdminUpdateRolessRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AdminUpdateRolessRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AdminUpdateRolessRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AdminUpdateRolessRequestBody' from JSON`,
  );
}
