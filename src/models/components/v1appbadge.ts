/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountBadgeInfo,
  AccountBadgeInfo$inboundSchema,
  AccountBadgeInfo$Outbound,
  AccountBadgeInfo$outboundSchema,
} from "./accountbadgeinfo.js";

export type V1AppBadge = {
  accountInfo?: AccountBadgeInfo | null | undefined;
  appId: number;
  appImage: string;
  appName: string;
  badgeId: string;
  badgeImage: string;
  /**
   * The level this badge starts at
   */
  baseLevel: number;
  /**
   * The XP the badge gives per level
   */
  baseXp: number;
  firstCompletion: Date | null;
  highestLevel: number;
  isEvent: boolean;
  isFoil: boolean;
  isSale: boolean;
  lastCompletion: Date | null;
  name: string;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  price: number;
  scarcity: number;
  steamId: number;
};

/** @internal */
export const V1AppBadge$inboundSchema: z.ZodType<
  V1AppBadge,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountInfo: z.nullable(AccountBadgeInfo$inboundSchema).optional(),
  appId: z.number().int(),
  appImage: z.string(),
  appName: z.string(),
  badgeId: z.string(),
  badgeImage: z.string(),
  baseLevel: z.number().int(),
  baseXp: z.number().int(),
  firstCompletion: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  highestLevel: z.number().int(),
  isEvent: z.boolean(),
  isFoil: z.boolean(),
  isSale: z.boolean(),
  lastCompletion: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  name: z.string(),
  price: z.number().int(),
  scarcity: z.number().int(),
  steamId: z.number().int(),
});

/** @internal */
export type V1AppBadge$Outbound = {
  accountInfo?: AccountBadgeInfo$Outbound | null | undefined;
  appId: number;
  appImage: string;
  appName: string;
  badgeId: string;
  badgeImage: string;
  baseLevel: number;
  baseXp: number;
  firstCompletion: string | null;
  highestLevel: number;
  isEvent: boolean;
  isFoil: boolean;
  isSale: boolean;
  lastCompletion: string | null;
  name: string;
  price: number;
  scarcity: number;
  steamId: number;
};

/** @internal */
export const V1AppBadge$outboundSchema: z.ZodType<
  V1AppBadge$Outbound,
  z.ZodTypeDef,
  V1AppBadge
> = z.object({
  accountInfo: z.nullable(AccountBadgeInfo$outboundSchema).optional(),
  appId: z.number().int(),
  appImage: z.string(),
  appName: z.string(),
  badgeId: z.string(),
  badgeImage: z.string(),
  baseLevel: z.number().int(),
  baseXp: z.number().int(),
  firstCompletion: z.nullable(z.date().transform(v => v.toISOString())),
  highestLevel: z.number().int(),
  isEvent: z.boolean(),
  isFoil: z.boolean(),
  isSale: z.boolean(),
  lastCompletion: z.nullable(z.date().transform(v => v.toISOString())),
  name: z.string(),
  price: z.number().int(),
  scarcity: z.number().int(),
  steamId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AppBadge$ {
  /** @deprecated use `V1AppBadge$inboundSchema` instead. */
  export const inboundSchema = V1AppBadge$inboundSchema;
  /** @deprecated use `V1AppBadge$outboundSchema` instead. */
  export const outboundSchema = V1AppBadge$outboundSchema;
  /** @deprecated use `V1AppBadge$Outbound` instead. */
  export type Outbound = V1AppBadge$Outbound;
}

export function v1AppBadgeToJSON(v1AppBadge: V1AppBadge): string {
  return JSON.stringify(V1AppBadge$outboundSchema.parse(v1AppBadge));
}

export function v1AppBadgeFromJSON(
  jsonString: string,
): SafeParseResult<V1AppBadge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AppBadge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AppBadge' from JSON`,
  );
}
