/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountPlaytimeDataPoint = {
  /**
   * The app id
   */
  appId: number;
  /**
   * The image of the app
   */
  image: string;
  /**
   * The name of the app
   */
  name: string;
  /**
   * The playtime of the app
   */
  playtime: number;
};

/** @internal */
export const V1AccountPlaytimeDataPoint$inboundSchema: z.ZodType<
  V1AccountPlaytimeDataPoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.number().int(),
  image: z.string(),
  name: z.string(),
  playtime: z.number().int(),
});

/** @internal */
export type V1AccountPlaytimeDataPoint$Outbound = {
  appId: number;
  image: string;
  name: string;
  playtime: number;
};

/** @internal */
export const V1AccountPlaytimeDataPoint$outboundSchema: z.ZodType<
  V1AccountPlaytimeDataPoint$Outbound,
  z.ZodTypeDef,
  V1AccountPlaytimeDataPoint
> = z.object({
  appId: z.number().int(),
  image: z.string(),
  name: z.string(),
  playtime: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountPlaytimeDataPoint$ {
  /** @deprecated use `V1AccountPlaytimeDataPoint$inboundSchema` instead. */
  export const inboundSchema = V1AccountPlaytimeDataPoint$inboundSchema;
  /** @deprecated use `V1AccountPlaytimeDataPoint$outboundSchema` instead. */
  export const outboundSchema = V1AccountPlaytimeDataPoint$outboundSchema;
  /** @deprecated use `V1AccountPlaytimeDataPoint$Outbound` instead. */
  export type Outbound = V1AccountPlaytimeDataPoint$Outbound;
}

export function v1AccountPlaytimeDataPointToJSON(
  v1AccountPlaytimeDataPoint: V1AccountPlaytimeDataPoint,
): string {
  return JSON.stringify(
    V1AccountPlaytimeDataPoint$outboundSchema.parse(v1AccountPlaytimeDataPoint),
  );
}

export function v1AccountPlaytimeDataPointFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountPlaytimeDataPoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountPlaytimeDataPoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountPlaytimeDataPoint' from JSON`,
  );
}
