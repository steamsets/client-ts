/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AppEventMapping,
  V1AppEventMapping$inboundSchema,
  V1AppEventMapping$Outbound,
  V1AppEventMapping$outboundSchema,
} from "./v1appeventmapping.js";

export type V1AdminUpdateEventRequestBody = {
  /**
   * The event id
   */
  eventId: string;
  /**
   * The mappings to add
   */
  mappings: Array<V1AppEventMapping> | null;
};

/** @internal */
export const V1AdminUpdateEventRequestBody$inboundSchema: z.ZodType<
  V1AdminUpdateEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.string(),
  mappings: z.nullable(z.array(V1AppEventMapping$inboundSchema)),
});

/** @internal */
export type V1AdminUpdateEventRequestBody$Outbound = {
  eventId: string;
  mappings: Array<V1AppEventMapping$Outbound> | null;
};

/** @internal */
export const V1AdminUpdateEventRequestBody$outboundSchema: z.ZodType<
  V1AdminUpdateEventRequestBody$Outbound,
  z.ZodTypeDef,
  V1AdminUpdateEventRequestBody
> = z.object({
  eventId: z.string(),
  mappings: z.nullable(z.array(V1AppEventMapping$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AdminUpdateEventRequestBody$ {
  /** @deprecated use `V1AdminUpdateEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AdminUpdateEventRequestBody$inboundSchema;
  /** @deprecated use `V1AdminUpdateEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AdminUpdateEventRequestBody$outboundSchema;
  /** @deprecated use `V1AdminUpdateEventRequestBody$Outbound` instead. */
  export type Outbound = V1AdminUpdateEventRequestBody$Outbound;
}

export function v1AdminUpdateEventRequestBodyToJSON(
  v1AdminUpdateEventRequestBody: V1AdminUpdateEventRequestBody,
): string {
  return JSON.stringify(
    V1AdminUpdateEventRequestBody$outboundSchema.parse(
      v1AdminUpdateEventRequestBody,
    ),
  );
}

export function v1AdminUpdateEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AdminUpdateEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AdminUpdateEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AdminUpdateEventRequestBody' from JSON`,
  );
}
