/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IDSearch = {
  /**
   * Account ID to search for
   */
  accountId?: number | undefined;
  /**
   * SteamID64 to search for
   */
  steamId64?: string | undefined;
};

/** @internal */
export const IDSearch$inboundSchema: z.ZodType<
  IDSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.number().int().optional(),
  steamId64: z.string().optional(),
});

/** @internal */
export type IDSearch$Outbound = {
  accountId?: number | undefined;
  steamId64?: string | undefined;
};

/** @internal */
export const IDSearch$outboundSchema: z.ZodType<
  IDSearch$Outbound,
  z.ZodTypeDef,
  IDSearch
> = z.object({
  accountId: z.number().int().optional(),
  steamId64: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IDSearch$ {
  /** @deprecated use `IDSearch$inboundSchema` instead. */
  export const inboundSchema = IDSearch$inboundSchema;
  /** @deprecated use `IDSearch$outboundSchema` instead. */
  export const outboundSchema = IDSearch$outboundSchema;
  /** @deprecated use `IDSearch$Outbound` instead. */
  export type Outbound = IDSearch$Outbound;
}

export function idSearchToJSON(idSearch: IDSearch): string {
  return JSON.stringify(IDSearch$outboundSchema.parse(idSearch));
}

export function idSearchFromJSON(
  jsonString: string,
): SafeParseResult<IDSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IDSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IDSearch' from JSON`,
  );
}
