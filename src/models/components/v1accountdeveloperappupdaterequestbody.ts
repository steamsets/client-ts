/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountDeveloperAppUpdateRequestBody = {
  /**
   * The new description of the developer app
   */
  description: string | null;
  /**
   * The public id of the developer app
   */
  developerAppId: string;
  /**
   * The new icon of the developer app
   */
  icon: string | null;
  /**
   * The new name of the developer app
   */
  name: string | null;
  /**
   * Whether to re-generate the key
   */
  regenerate: boolean;
};

/** @internal */
export const V1AccountDeveloperAppUpdateRequestBody$inboundSchema: z.ZodType<
  V1AccountDeveloperAppUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()),
  developerAppId: z.string(),
  icon: z.nullable(z.string()),
  name: z.nullable(z.string()),
  regenerate: z.boolean(),
});

/** @internal */
export type V1AccountDeveloperAppUpdateRequestBody$Outbound = {
  description: string | null;
  developerAppId: string;
  icon: string | null;
  name: string | null;
  regenerate: boolean;
};

/** @internal */
export const V1AccountDeveloperAppUpdateRequestBody$outboundSchema: z.ZodType<
  V1AccountDeveloperAppUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountDeveloperAppUpdateRequestBody
> = z.object({
  description: z.nullable(z.string()),
  developerAppId: z.string(),
  icon: z.nullable(z.string()),
  name: z.nullable(z.string()),
  regenerate: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountDeveloperAppUpdateRequestBody$ {
  /** @deprecated use `V1AccountDeveloperAppUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1AccountDeveloperAppUpdateRequestBody$inboundSchema;
  /** @deprecated use `V1AccountDeveloperAppUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountDeveloperAppUpdateRequestBody$outboundSchema;
  /** @deprecated use `V1AccountDeveloperAppUpdateRequestBody$Outbound` instead. */
  export type Outbound = V1AccountDeveloperAppUpdateRequestBody$Outbound;
}

export function v1AccountDeveloperAppUpdateRequestBodyToJSON(
  v1AccountDeveloperAppUpdateRequestBody:
    V1AccountDeveloperAppUpdateRequestBody,
): string {
  return JSON.stringify(
    V1AccountDeveloperAppUpdateRequestBody$outboundSchema.parse(
      v1AccountDeveloperAppUpdateRequestBody,
    ),
  );
}

export function v1AccountDeveloperAppUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountDeveloperAppUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountDeveloperAppUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountDeveloperAppUpdateRequestBody' from JSON`,
  );
}
