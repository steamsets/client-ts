/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChosenRole,
  ChosenRole$inboundSchema,
  ChosenRole$Outbound,
  ChosenRole$outboundSchema,
} from "./chosenrole.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";
import {
  DeveloperApp,
  DeveloperApp$inboundSchema,
  DeveloperApp$Outbound,
  DeveloperApp$outboundSchema,
} from "./developerapp.js";
import {
  Image,
  Image$inboundSchema,
  Image$Outbound,
  Image$outboundSchema,
} from "./image.js";
import {
  Session,
  Session$inboundSchema,
  Session$Outbound,
  Session$outboundSchema,
} from "./session.js";
import {
  V1VanityAnalytics,
  V1VanityAnalytics$inboundSchema,
  V1VanityAnalytics$Outbound,
  V1VanityAnalytics$outboundSchema,
} from "./v1vanityanalytics.js";

/**
 * The privacy of the account
 */
export const V1AccountGetSettingsBodyPrivacy = {
  Public: "public",
  Private: "private",
  FriendsOnly: "friends_only",
} as const;
/**
 * The privacy of the account
 */
export type V1AccountGetSettingsBodyPrivacy = ClosedEnum<
  typeof V1AccountGetSettingsBodyPrivacy
>;

export type V1AccountGetSettingsBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  chosenRole: ChosenRole | null;
  /**
   * The connections the account has
   */
  connections: Array<Connection> | null;
  /**
   * The developer apps the account has
   */
  developerApps: Array<DeveloperApp> | null;
  /**
   * The email the account is using
   */
  email: string;
  /**
   * The time the email was verified
   */
  emailVerifiedAt: Date | null;
  /**
   * Whether the account is hidden in the leaderboards
   */
  hidden: boolean;
  /**
   * The images the account has
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  images: Array<Image> | null;
  /**
   * The language the account is using
   */
  language: string;
  /**
   * The privacy of the account
   */
  privacy: V1AccountGetSettingsBodyPrivacy;
  /**
   * The sessions the account has
   */
  sessions: Array<Session> | null;
  /**
   * Whether the account is subscribed to marketing emails
   */
  subscribed: boolean;
  /**
   * The vanity the account is using
   */
  vanity: string;
  vanityAnalytics: V1VanityAnalytics | null;
};

/** @internal */
export const V1AccountGetSettingsBodyPrivacy$inboundSchema: z.ZodNativeEnum<
  typeof V1AccountGetSettingsBodyPrivacy
> = z.nativeEnum(V1AccountGetSettingsBodyPrivacy);

/** @internal */
export const V1AccountGetSettingsBodyPrivacy$outboundSchema: z.ZodNativeEnum<
  typeof V1AccountGetSettingsBodyPrivacy
> = V1AccountGetSettingsBodyPrivacy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountGetSettingsBodyPrivacy$ {
  /** @deprecated use `V1AccountGetSettingsBodyPrivacy$inboundSchema` instead. */
  export const inboundSchema = V1AccountGetSettingsBodyPrivacy$inboundSchema;
  /** @deprecated use `V1AccountGetSettingsBodyPrivacy$outboundSchema` instead. */
  export const outboundSchema = V1AccountGetSettingsBodyPrivacy$outboundSchema;
}

/** @internal */
export const V1AccountGetSettingsBody$inboundSchema: z.ZodType<
  V1AccountGetSettingsBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  chosenRole: z.nullable(ChosenRole$inboundSchema),
  connections: z.nullable(z.array(Connection$inboundSchema)),
  developerApps: z.nullable(z.array(DeveloperApp$inboundSchema)),
  email: z.string(),
  emailVerifiedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  hidden: z.boolean(),
  images: z.nullable(z.array(Image$inboundSchema)),
  language: z.string(),
  privacy: V1AccountGetSettingsBodyPrivacy$inboundSchema,
  sessions: z.nullable(z.array(Session$inboundSchema)),
  subscribed: z.boolean(),
  vanity: z.string(),
  vanityAnalytics: z.nullable(V1VanityAnalytics$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountGetSettingsBody$Outbound = {
  $schema?: string | undefined;
  chosenRole: ChosenRole$Outbound | null;
  connections: Array<Connection$Outbound> | null;
  developerApps: Array<DeveloperApp$Outbound> | null;
  email: string;
  emailVerifiedAt: string | null;
  hidden: boolean;
  images: Array<Image$Outbound> | null;
  language: string;
  privacy: string;
  sessions: Array<Session$Outbound> | null;
  subscribed: boolean;
  vanity: string;
  vanityAnalytics: V1VanityAnalytics$Outbound | null;
};

/** @internal */
export const V1AccountGetSettingsBody$outboundSchema: z.ZodType<
  V1AccountGetSettingsBody$Outbound,
  z.ZodTypeDef,
  V1AccountGetSettingsBody
> = z.object({
  dollarSchema: z.string().optional(),
  chosenRole: z.nullable(ChosenRole$outboundSchema),
  connections: z.nullable(z.array(Connection$outboundSchema)),
  developerApps: z.nullable(z.array(DeveloperApp$outboundSchema)),
  email: z.string(),
  emailVerifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  hidden: z.boolean(),
  images: z.nullable(z.array(Image$outboundSchema)),
  language: z.string(),
  privacy: V1AccountGetSettingsBodyPrivacy$outboundSchema,
  sessions: z.nullable(z.array(Session$outboundSchema)),
  subscribed: z.boolean(),
  vanity: z.string(),
  vanityAnalytics: z.nullable(V1VanityAnalytics$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountGetSettingsBody$ {
  /** @deprecated use `V1AccountGetSettingsBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountGetSettingsBody$inboundSchema;
  /** @deprecated use `V1AccountGetSettingsBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountGetSettingsBody$outboundSchema;
  /** @deprecated use `V1AccountGetSettingsBody$Outbound` instead. */
  export type Outbound = V1AccountGetSettingsBody$Outbound;
}

export function v1AccountGetSettingsBodyToJSON(
  v1AccountGetSettingsBody: V1AccountGetSettingsBody,
): string {
  return JSON.stringify(
    V1AccountGetSettingsBody$outboundSchema.parse(v1AccountGetSettingsBody),
  );
}

export function v1AccountGetSettingsBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountGetSettingsBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountGetSettingsBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountGetSettingsBody' from JSON`,
  );
}
