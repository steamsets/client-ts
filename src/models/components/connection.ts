/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The provider to connect with
 */
export const Provider = {
  Discord: "discord",
  Patreon: "patreon",
  Kick: "kick",
  Reddit: "reddit",
  Twitch: "twitch",
  Youtube: "youtube",
  X: "x",
  Domain: "domain",
} as const;
/**
 * The provider to connect with
 */
export type Provider = ClosedEnum<typeof Provider>;

export type Connection = {
  /**
   * The avatar of the connected user
   */
  avatar: string;
  /**
   * The public id of the connection
   */
  connectionId: string;
  /**
   * The external id of the connected user
   */
  externalId: string;
  /**
   * Whether the connection has failed to refresh or not
   */
  failed: boolean;
  /**
   * Whether the connection should be hidden or not
   */
  hide: boolean;
  /**
   * The name of the connected user
   */
  name: string;
  /**
   * The provider to connect with
   */
  provider: Provider;
  /**
   * Whether the connection has been verified or not
   */
  verified: boolean;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string(),
  connectionId: z.string(),
  externalId: z.string(),
  failed: z.boolean(),
  hide: z.boolean(),
  name: z.string(),
  provider: Provider$inboundSchema,
  verified: z.boolean(),
});

/** @internal */
export type Connection$Outbound = {
  avatar: string;
  connectionId: string;
  externalId: string;
  failed: boolean;
  hide: boolean;
  name: string;
  provider: string;
  verified: boolean;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  avatar: z.string(),
  connectionId: z.string(),
  externalId: z.string(),
  failed: z.boolean(),
  hide: z.boolean(),
  name: z.string(),
  provider: Provider$outboundSchema,
  verified: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}
