/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AccountComparedAppBadge,
  V1AccountComparedAppBadge$inboundSchema,
  V1AccountComparedAppBadge$Outbound,
  V1AccountComparedAppBadge$outboundSchema,
} from "./v1accountcomparedappbadge.js";

export type V1AccountCompareBadgesResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  appBadges: Array<V1AccountComparedAppBadge> | null;
};

/** @internal */
export const V1AccountCompareBadgesResponseBody$inboundSchema: z.ZodType<
  V1AccountCompareBadgesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  appBadges: z.nullable(z.array(V1AccountComparedAppBadge$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountCompareBadgesResponseBody$Outbound = {
  $schema?: string | undefined;
  appBadges: Array<V1AccountComparedAppBadge$Outbound> | null;
};

/** @internal */
export const V1AccountCompareBadgesResponseBody$outboundSchema: z.ZodType<
  V1AccountCompareBadgesResponseBody$Outbound,
  z.ZodTypeDef,
  V1AccountCompareBadgesResponseBody
> = z.object({
  dollarSchema: z.string().optional(),
  appBadges: z.nullable(z.array(V1AccountComparedAppBadge$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountCompareBadgesResponseBody$ {
  /** @deprecated use `V1AccountCompareBadgesResponseBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountCompareBadgesResponseBody$inboundSchema;
  /** @deprecated use `V1AccountCompareBadgesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountCompareBadgesResponseBody$outboundSchema;
  /** @deprecated use `V1AccountCompareBadgesResponseBody$Outbound` instead. */
  export type Outbound = V1AccountCompareBadgesResponseBody$Outbound;
}

export function v1AccountCompareBadgesResponseBodyToJSON(
  v1AccountCompareBadgesResponseBody: V1AccountCompareBadgesResponseBody,
): string {
  return JSON.stringify(
    V1AccountCompareBadgesResponseBody$outboundSchema.parse(
      v1AccountCompareBadgesResponseBody,
    ),
  );
}

export function v1AccountCompareBadgesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountCompareBadgesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountCompareBadgesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountCompareBadgesResponseBody' from JSON`,
  );
}
