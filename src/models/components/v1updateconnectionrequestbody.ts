/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateConnectionRequestBody = {
  /**
   * The connection id to update
   */
  connectionId: string;
  /**
   * Whether the connection should be hidden or not
   */
  hidden: boolean;
};

/** @internal */
export const V1UpdateConnectionRequestBody$inboundSchema: z.ZodType<
  V1UpdateConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectionId: z.string(),
  hidden: z.boolean(),
});

/** @internal */
export type V1UpdateConnectionRequestBody$Outbound = {
  connectionId: string;
  hidden: boolean;
};

/** @internal */
export const V1UpdateConnectionRequestBody$outboundSchema: z.ZodType<
  V1UpdateConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  V1UpdateConnectionRequestBody
> = z.object({
  connectionId: z.string(),
  hidden: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateConnectionRequestBody$ {
  /** @deprecated use `V1UpdateConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1UpdateConnectionRequestBody$inboundSchema;
  /** @deprecated use `V1UpdateConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1UpdateConnectionRequestBody$outboundSchema;
  /** @deprecated use `V1UpdateConnectionRequestBody$Outbound` instead. */
  export type Outbound = V1UpdateConnectionRequestBody$Outbound;
}

export function v1UpdateConnectionRequestBodyToJSON(
  v1UpdateConnectionRequestBody: V1UpdateConnectionRequestBody,
): string {
  return JSON.stringify(
    V1UpdateConnectionRequestBody$outboundSchema.parse(
      v1UpdateConnectionRequestBody,
    ),
  );
}

export function v1UpdateConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateConnectionRequestBody' from JSON`,
  );
}
