/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1BadgeLevel,
  V1BadgeLevel$inboundSchema,
  V1BadgeLevel$Outbound,
  V1BadgeLevel$outboundSchema,
} from "./v1badgelevel.js";
import {
  V1BadgeSetCount,
  V1BadgeSetCount$inboundSchema,
  V1BadgeSetCount$Outbound,
  V1BadgeSetCount$outboundSchema,
} from "./v1badgesetcount.js";

export type V1BadgeSet = {
  appId: number;
  avgCardPrc: number;
  badges: { [k: string]: V1BadgeLevel };
  canBuy: boolean;
  cards: number;
  currLevel: number;
  isFoil: boolean;
  issues: Array<string> | null;
  link: string;
  maxPrc: number;
  minPrc: number;
  price: number;
  priceDiff: number;
  setCount: V1BadgeSetCount;
};

/** @internal */
export const V1BadgeSet$inboundSchema: z.ZodType<
  V1BadgeSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.number().int(),
  avgCardPrc: z.number().int(),
  badges: z.record(V1BadgeLevel$inboundSchema),
  canBuy: z.boolean(),
  cards: z.number().int(),
  currLevel: z.number().int(),
  isFoil: z.boolean(),
  issues: z.nullable(z.array(z.string())),
  link: z.string(),
  maxPrc: z.number().int(),
  minPrc: z.number().int(),
  price: z.number().int(),
  priceDiff: z.number().int(),
  setCount: V1BadgeSetCount$inboundSchema,
});

/** @internal */
export type V1BadgeSet$Outbound = {
  appId: number;
  avgCardPrc: number;
  badges: { [k: string]: V1BadgeLevel$Outbound };
  canBuy: boolean;
  cards: number;
  currLevel: number;
  isFoil: boolean;
  issues: Array<string> | null;
  link: string;
  maxPrc: number;
  minPrc: number;
  price: number;
  priceDiff: number;
  setCount: V1BadgeSetCount$Outbound;
};

/** @internal */
export const V1BadgeSet$outboundSchema: z.ZodType<
  V1BadgeSet$Outbound,
  z.ZodTypeDef,
  V1BadgeSet
> = z.object({
  appId: z.number().int(),
  avgCardPrc: z.number().int(),
  badges: z.record(V1BadgeLevel$outboundSchema),
  canBuy: z.boolean(),
  cards: z.number().int(),
  currLevel: z.number().int(),
  isFoil: z.boolean(),
  issues: z.nullable(z.array(z.string())),
  link: z.string(),
  maxPrc: z.number().int(),
  minPrc: z.number().int(),
  price: z.number().int(),
  priceDiff: z.number().int(),
  setCount: V1BadgeSetCount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeSet$ {
  /** @deprecated use `V1BadgeSet$inboundSchema` instead. */
  export const inboundSchema = V1BadgeSet$inboundSchema;
  /** @deprecated use `V1BadgeSet$outboundSchema` instead. */
  export const outboundSchema = V1BadgeSet$outboundSchema;
  /** @deprecated use `V1BadgeSet$Outbound` instead. */
  export type Outbound = V1BadgeSet$Outbound;
}

export function v1BadgeSetToJSON(v1BadgeSet: V1BadgeSet): string {
  return JSON.stringify(V1BadgeSet$outboundSchema.parse(v1BadgeSet));
}

export function v1BadgeSetFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeSet' from JSON`,
  );
}
