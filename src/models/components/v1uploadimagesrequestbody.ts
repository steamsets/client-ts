/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1UploadedImage,
  V1UploadedImage$inboundSchema,
  V1UploadedImage$Outbound,
  V1UploadedImage$outboundSchema,
} from "./v1uploadedimage.js";

export type V1UploadImagesRequestBody = {
  /**
   * The images to upload
   */
  images: Array<V1UploadedImage> | null;
};

/** @internal */
export const V1UploadImagesRequestBody$inboundSchema: z.ZodType<
  V1UploadImagesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.nullable(z.array(V1UploadedImage$inboundSchema)),
});

/** @internal */
export type V1UploadImagesRequestBody$Outbound = {
  images: Array<V1UploadedImage$Outbound> | null;
};

/** @internal */
export const V1UploadImagesRequestBody$outboundSchema: z.ZodType<
  V1UploadImagesRequestBody$Outbound,
  z.ZodTypeDef,
  V1UploadImagesRequestBody
> = z.object({
  images: z.nullable(z.array(V1UploadedImage$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UploadImagesRequestBody$ {
  /** @deprecated use `V1UploadImagesRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1UploadImagesRequestBody$inboundSchema;
  /** @deprecated use `V1UploadImagesRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1UploadImagesRequestBody$outboundSchema;
  /** @deprecated use `V1UploadImagesRequestBody$Outbound` instead. */
  export type Outbound = V1UploadImagesRequestBody$Outbound;
}

export function v1UploadImagesRequestBodyToJSON(
  v1UploadImagesRequestBody: V1UploadImagesRequestBody,
): string {
  return JSON.stringify(
    V1UploadImagesRequestBody$outboundSchema.parse(v1UploadImagesRequestBody),
  );
}

export function v1UploadImagesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1UploadImagesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UploadImagesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UploadImagesRequestBody' from JSON`,
  );
}
