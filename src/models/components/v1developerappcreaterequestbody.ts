/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The environment to create the app for
 */
export const Environment = {
  Production: "production",
  Development: "development",
  Staging: "staging",
} as const;
/**
 * The environment to create the app for
 */
export type Environment = ClosedEnum<typeof Environment>;

export type V1DeveloperAppCreateRequestBody = {
  /**
   * The description of the app
   */
  description: string;
  /**
   * The environment to create the app for
   */
  environment: Environment;
  /**
   * Whether to generate a key for the app
   */
  generateKey: boolean;
  /**
   * The icon of the app
   */
  icon: string | null;
  /**
   * The name of the app
   */
  name: string;
};

/** @internal */
export const Environment$inboundSchema: z.ZodNativeEnum<typeof Environment> = z
  .nativeEnum(Environment);

/** @internal */
export const Environment$outboundSchema: z.ZodNativeEnum<typeof Environment> =
  Environment$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environment$ {
  /** @deprecated use `Environment$inboundSchema` instead. */
  export const inboundSchema = Environment$inboundSchema;
  /** @deprecated use `Environment$outboundSchema` instead. */
  export const outboundSchema = Environment$outboundSchema;
}

/** @internal */
export const V1DeveloperAppCreateRequestBody$inboundSchema: z.ZodType<
  V1DeveloperAppCreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  environment: Environment$inboundSchema,
  generateKey: z.boolean(),
  icon: z.nullable(z.string()),
  name: z.string(),
});

/** @internal */
export type V1DeveloperAppCreateRequestBody$Outbound = {
  description: string;
  environment: string;
  generateKey: boolean;
  icon: string | null;
  name: string;
};

/** @internal */
export const V1DeveloperAppCreateRequestBody$outboundSchema: z.ZodType<
  V1DeveloperAppCreateRequestBody$Outbound,
  z.ZodTypeDef,
  V1DeveloperAppCreateRequestBody
> = z.object({
  description: z.string(),
  environment: Environment$outboundSchema,
  generateKey: z.boolean(),
  icon: z.nullable(z.string()),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1DeveloperAppCreateRequestBody$ {
  /** @deprecated use `V1DeveloperAppCreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1DeveloperAppCreateRequestBody$inboundSchema;
  /** @deprecated use `V1DeveloperAppCreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1DeveloperAppCreateRequestBody$outboundSchema;
  /** @deprecated use `V1DeveloperAppCreateRequestBody$Outbound` instead. */
  export type Outbound = V1DeveloperAppCreateRequestBody$Outbound;
}

export function v1DeveloperAppCreateRequestBodyToJSON(
  v1DeveloperAppCreateRequestBody: V1DeveloperAppCreateRequestBody,
): string {
  return JSON.stringify(
    V1DeveloperAppCreateRequestBody$outboundSchema.parse(
      v1DeveloperAppCreateRequestBody,
    ),
  );
}

export function v1DeveloperAppCreateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1DeveloperAppCreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1DeveloperAppCreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1DeveloperAppCreateRequestBody' from JSON`,
  );
}
