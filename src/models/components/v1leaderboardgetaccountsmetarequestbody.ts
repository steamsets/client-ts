/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AccountLeaderboardAppSearch,
  V1AccountLeaderboardAppSearch$inboundSchema,
  V1AccountLeaderboardAppSearch$Outbound,
  V1AccountLeaderboardAppSearch$outboundSchema,
} from "./v1accountleaderboardappsearch.js";
import {
  V1AccountLeaderboardBadgeSearch,
  V1AccountLeaderboardBadgeSearch$inboundSchema,
  V1AccountLeaderboardBadgeSearch$Outbound,
  V1AccountLeaderboardBadgeSearch$outboundSchema,
} from "./v1accountleaderboardbadgesearch.js";
import {
  V1LeaderboardLocation,
  V1LeaderboardLocation$inboundSchema,
  V1LeaderboardLocation$Outbound,
  V1LeaderboardLocation$outboundSchema,
} from "./v1leaderboardlocation.js";

/**
 * The leaderboard to get
 */
export const V1LeaderboardGetAccountsMetaRequestBodyLeaderboard = {
  Apps: "apps",
  AppPlaytime: "app_playtime",
  AppValidPlaytime: "app_valid_playtime",
  AwardsGiven: "awards_given",
  AwardsReceived: "awards_received",
  Bans: "bans",
  GameBans: "game_bans",
  VacBans: "vac_bans",
  Donations: "donations",
  FoilBadges: "foil_badges",
  NormalBadges: "normal_badges",
  Badges: "badges",
  Playtime: "playtime",
  ValidPlaytime: "valid_playtime",
  PointsGiven: "points_given",
  PointsReceived: "points_received",
  SteamSets: "steam_sets",
  Xp: "xp",
  BadgeCompletionTime: "badge_completion_time",
  BadgeHighestLevel: "badge_highest_level",
} as const;
/**
 * The leaderboard to get
 */
export type V1LeaderboardGetAccountsMetaRequestBodyLeaderboard = ClosedEnum<
  typeof V1LeaderboardGetAccountsMetaRequestBodyLeaderboard
>;

export type V1LeaderboardGetAccountsMetaRequestBody = {
  app?: V1AccountLeaderboardAppSearch | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch | null | undefined;
  /**
   * The leaderboard to get
   */
  leaderboard: V1LeaderboardGetAccountsMetaRequestBodyLeaderboard;
  /**
   * The location(s)to get the leaderboard for, otherwise global
   */
  location?: Array<V1LeaderboardLocation | null> | null | undefined;
};

/** @internal */
export const V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$inboundSchema:
  z.ZodNativeEnum<typeof V1LeaderboardGetAccountsMetaRequestBodyLeaderboard> = z
    .nativeEnum(V1LeaderboardGetAccountsMetaRequestBodyLeaderboard);

/** @internal */
export const V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$outboundSchema:
  z.ZodNativeEnum<typeof V1LeaderboardGetAccountsMetaRequestBodyLeaderboard> =
    V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$ {
  /** @deprecated use `V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$inboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$outboundSchema;
}

/** @internal */
export const V1LeaderboardGetAccountsMetaRequestBody$inboundSchema: z.ZodType<
  V1LeaderboardGetAccountsMetaRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  app: z.nullable(V1AccountLeaderboardAppSearch$inboundSchema).optional(),
  badge: z.nullable(V1AccountLeaderboardBadgeSearch$inboundSchema).optional(),
  leaderboard: V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$inboundSchema,
  location: z.nullable(z.array(z.nullable(V1LeaderboardLocation$inboundSchema)))
    .optional(),
});

/** @internal */
export type V1LeaderboardGetAccountsMetaRequestBody$Outbound = {
  app?: V1AccountLeaderboardAppSearch$Outbound | null | undefined;
  badge?: V1AccountLeaderboardBadgeSearch$Outbound | null | undefined;
  leaderboard: string;
  location?: Array<V1LeaderboardLocation$Outbound | null> | null | undefined;
};

/** @internal */
export const V1LeaderboardGetAccountsMetaRequestBody$outboundSchema: z.ZodType<
  V1LeaderboardGetAccountsMetaRequestBody$Outbound,
  z.ZodTypeDef,
  V1LeaderboardGetAccountsMetaRequestBody
> = z.object({
  app: z.nullable(V1AccountLeaderboardAppSearch$outboundSchema).optional(),
  badge: z.nullable(V1AccountLeaderboardBadgeSearch$outboundSchema).optional(),
  leaderboard:
    V1LeaderboardGetAccountsMetaRequestBodyLeaderboard$outboundSchema,
  location: z.nullable(
    z.array(z.nullable(V1LeaderboardLocation$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetAccountsMetaRequestBody$ {
  /** @deprecated use `V1LeaderboardGetAccountsMetaRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetAccountsMetaRequestBody$inboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountsMetaRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetAccountsMetaRequestBody$outboundSchema;
  /** @deprecated use `V1LeaderboardGetAccountsMetaRequestBody$Outbound` instead. */
  export type Outbound = V1LeaderboardGetAccountsMetaRequestBody$Outbound;
}

export function v1LeaderboardGetAccountsMetaRequestBodyToJSON(
  v1LeaderboardGetAccountsMetaRequestBody:
    V1LeaderboardGetAccountsMetaRequestBody,
): string {
  return JSON.stringify(
    V1LeaderboardGetAccountsMetaRequestBody$outboundSchema.parse(
      v1LeaderboardGetAccountsMetaRequestBody,
    ),
  );
}

export function v1LeaderboardGetAccountsMetaRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  V1LeaderboardGetAccountsMetaRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1LeaderboardGetAccountsMetaRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1LeaderboardGetAccountsMetaRequestBody' from JSON`,
  );
}
