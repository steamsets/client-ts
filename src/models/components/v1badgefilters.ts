/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1BadgeFilters = {
  /**
   * Filter by event badges
   */
  isEvent?: boolean | null | undefined;
  /**
   * Filter by foil badges
   */
  isFoil?: boolean | null | undefined;
  /**
   * Filter by sale badges
   */
  isSale?: boolean | null | undefined;
  /**
   * Maximum badge level
   */
  maxLevel?: number | null | undefined;
  /**
   * Maximum scarcity value
   */
  maxScarcity?: number | null | undefined;
  /**
   * Minimum badge level
   */
  minLevel?: number | null | undefined;
  /**
   * Minimum scarcity value
   */
  minScarcity?: number | null | undefined;
};

/** @internal */
export const V1BadgeFilters$inboundSchema: z.ZodType<
  V1BadgeFilters,
  z.ZodTypeDef,
  unknown
> = z.object({
  isEvent: z.nullable(z.boolean()).optional(),
  isFoil: z.nullable(z.boolean()).optional(),
  isSale: z.nullable(z.boolean()).optional(),
  maxLevel: z.nullable(z.number().int()).optional(),
  maxScarcity: z.nullable(z.number().int()).optional(),
  minLevel: z.nullable(z.number().int()).optional(),
  minScarcity: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type V1BadgeFilters$Outbound = {
  isEvent?: boolean | null | undefined;
  isFoil?: boolean | null | undefined;
  isSale?: boolean | null | undefined;
  maxLevel?: number | null | undefined;
  maxScarcity?: number | null | undefined;
  minLevel?: number | null | undefined;
  minScarcity?: number | null | undefined;
};

/** @internal */
export const V1BadgeFilters$outboundSchema: z.ZodType<
  V1BadgeFilters$Outbound,
  z.ZodTypeDef,
  V1BadgeFilters
> = z.object({
  isEvent: z.nullable(z.boolean()).optional(),
  isFoil: z.nullable(z.boolean()).optional(),
  isSale: z.nullable(z.boolean()).optional(),
  maxLevel: z.nullable(z.number().int()).optional(),
  maxScarcity: z.nullable(z.number().int()).optional(),
  minLevel: z.nullable(z.number().int()).optional(),
  minScarcity: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeFilters$ {
  /** @deprecated use `V1BadgeFilters$inboundSchema` instead. */
  export const inboundSchema = V1BadgeFilters$inboundSchema;
  /** @deprecated use `V1BadgeFilters$outboundSchema` instead. */
  export const outboundSchema = V1BadgeFilters$outboundSchema;
  /** @deprecated use `V1BadgeFilters$Outbound` instead. */
  export type Outbound = V1BadgeFilters$Outbound;
}

export function v1BadgeFiltersToJSON(v1BadgeFilters: V1BadgeFilters): string {
  return JSON.stringify(V1BadgeFilters$outboundSchema.parse(v1BadgeFilters));
}

export function v1BadgeFiltersFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeFilters' from JSON`,
  );
}
