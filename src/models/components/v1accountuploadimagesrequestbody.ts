/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1AccountUploadedImage,
  V1AccountUploadedImage$inboundSchema,
  V1AccountUploadedImage$Outbound,
  V1AccountUploadedImage$outboundSchema,
} from "./v1accountuploadedimage.js";

export type V1AccountUploadImagesRequestBody = {
  /**
   * The images to upload
   */
  images: Array<V1AccountUploadedImage> | null;
};

/** @internal */
export const V1AccountUploadImagesRequestBody$inboundSchema: z.ZodType<
  V1AccountUploadImagesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.nullable(z.array(V1AccountUploadedImage$inboundSchema)),
});

/** @internal */
export type V1AccountUploadImagesRequestBody$Outbound = {
  images: Array<V1AccountUploadedImage$Outbound> | null;
};

/** @internal */
export const V1AccountUploadImagesRequestBody$outboundSchema: z.ZodType<
  V1AccountUploadImagesRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountUploadImagesRequestBody
> = z.object({
  images: z.nullable(z.array(V1AccountUploadedImage$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountUploadImagesRequestBody$ {
  /** @deprecated use `V1AccountUploadImagesRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountUploadImagesRequestBody$inboundSchema;
  /** @deprecated use `V1AccountUploadImagesRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountUploadImagesRequestBody$outboundSchema;
  /** @deprecated use `V1AccountUploadImagesRequestBody$Outbound` instead. */
  export type Outbound = V1AccountUploadImagesRequestBody$Outbound;
}

export function v1AccountUploadImagesRequestBodyToJSON(
  v1AccountUploadImagesRequestBody: V1AccountUploadImagesRequestBody,
): string {
  return JSON.stringify(
    V1AccountUploadImagesRequestBody$outboundSchema.parse(
      v1AccountUploadImagesRequestBody,
    ),
  );
}

export function v1AccountUploadImagesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountUploadImagesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountUploadImagesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountUploadImagesRequestBody' from JSON`,
  );
}
