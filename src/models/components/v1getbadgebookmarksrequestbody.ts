/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1GetBadgeBookmarksRequestBody = {};

/** @internal */
export const V1GetBadgeBookmarksRequestBody$inboundSchema: z.ZodType<
  V1GetBadgeBookmarksRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V1GetBadgeBookmarksRequestBody$Outbound = {};

/** @internal */
export const V1GetBadgeBookmarksRequestBody$outboundSchema: z.ZodType<
  V1GetBadgeBookmarksRequestBody$Outbound,
  z.ZodTypeDef,
  V1GetBadgeBookmarksRequestBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GetBadgeBookmarksRequestBody$ {
  /** @deprecated use `V1GetBadgeBookmarksRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1GetBadgeBookmarksRequestBody$inboundSchema;
  /** @deprecated use `V1GetBadgeBookmarksRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1GetBadgeBookmarksRequestBody$outboundSchema;
  /** @deprecated use `V1GetBadgeBookmarksRequestBody$Outbound` instead. */
  export type Outbound = V1GetBadgeBookmarksRequestBody$Outbound;
}

export function v1GetBadgeBookmarksRequestBodyToJSON(
  v1GetBadgeBookmarksRequestBody: V1GetBadgeBookmarksRequestBody,
): string {
  return JSON.stringify(
    V1GetBadgeBookmarksRequestBody$outboundSchema.parse(
      v1GetBadgeBookmarksRequestBody,
    ),
  );
}

export function v1GetBadgeBookmarksRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1GetBadgeBookmarksRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GetBadgeBookmarksRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GetBadgeBookmarksRequestBody' from JSON`,
  );
}
