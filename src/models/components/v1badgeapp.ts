/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1BadgeApp = {
  bgAvg: number;
  boosterPrice: number | null;
  emoteAvg: number;
  image: string;
  name: string;
  owned: boolean;
};

/** @internal */
export const V1BadgeApp$inboundSchema: z.ZodType<
  V1BadgeApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  bgAvg: z.number().int(),
  boosterPrice: z.nullable(z.number().int()),
  emoteAvg: z.number().int(),
  image: z.string(),
  name: z.string(),
  owned: z.boolean(),
});

/** @internal */
export type V1BadgeApp$Outbound = {
  bgAvg: number;
  boosterPrice: number | null;
  emoteAvg: number;
  image: string;
  name: string;
  owned: boolean;
};

/** @internal */
export const V1BadgeApp$outboundSchema: z.ZodType<
  V1BadgeApp$Outbound,
  z.ZodTypeDef,
  V1BadgeApp
> = z.object({
  bgAvg: z.number().int(),
  boosterPrice: z.nullable(z.number().int()),
  emoteAvg: z.number().int(),
  image: z.string(),
  name: z.string(),
  owned: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeApp$ {
  /** @deprecated use `V1BadgeApp$inboundSchema` instead. */
  export const inboundSchema = V1BadgeApp$inboundSchema;
  /** @deprecated use `V1BadgeApp$outboundSchema` instead. */
  export const outboundSchema = V1BadgeApp$outboundSchema;
  /** @deprecated use `V1BadgeApp$Outbound` instead. */
  export type Outbound = V1BadgeApp$Outbound;
}

export function v1BadgeAppToJSON(v1BadgeApp: V1BadgeApp): string {
  return JSON.stringify(V1BadgeApp$outboundSchema.parse(v1BadgeApp));
}

export function v1BadgeAppFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeApp' from JSON`,
  );
}
