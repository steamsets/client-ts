/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ErrorDetail,
  ErrorDetail$inboundSchema,
  ErrorDetail$Outbound,
  ErrorDetail$outboundSchema,
} from "./errordetail.js";

export type ErrorModel = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string | undefined;
  /**
   * Optional list of individual error details
   */
  errors?: Array<ErrorDetail> | null | undefined;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string | undefined;
  /**
   * HTTP status code
   */
  status?: number | undefined;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title?: string | undefined;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type?: string | undefined;
};

/** @internal */
export const ErrorModel$inboundSchema: z.ZodType<
  ErrorModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  detail: z.string().optional(),
  errors: z.nullable(z.array(ErrorDetail$inboundSchema)).optional(),
  instance: z.string().optional(),
  status: z.number().int().optional(),
  title: z.string().optional(),
  type: z.string().default("about:blank"),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type ErrorModel$Outbound = {
  $schema?: string | undefined;
  detail?: string | undefined;
  errors?: Array<ErrorDetail$Outbound> | null | undefined;
  instance?: string | undefined;
  status?: number | undefined;
  title?: string | undefined;
  type: string;
};

/** @internal */
export const ErrorModel$outboundSchema: z.ZodType<
  ErrorModel$Outbound,
  z.ZodTypeDef,
  ErrorModel
> = z.object({
  dollarSchema: z.string().optional(),
  detail: z.string().optional(),
  errors: z.nullable(z.array(ErrorDetail$outboundSchema)).optional(),
  instance: z.string().optional(),
  status: z.number().int().optional(),
  title: z.string().optional(),
  type: z.string().default("about:blank"),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorModel$ {
  /** @deprecated use `ErrorModel$inboundSchema` instead. */
  export const inboundSchema = ErrorModel$inboundSchema;
  /** @deprecated use `ErrorModel$outboundSchema` instead. */
  export const outboundSchema = ErrorModel$outboundSchema;
  /** @deprecated use `ErrorModel$Outbound` instead. */
  export type Outbound = ErrorModel$Outbound;
}

export function errorModelToJSON(errorModel: ErrorModel): string {
  return JSON.stringify(ErrorModel$outboundSchema.parse(errorModel));
}

export function errorModelFromJSON(
  jsonString: string,
): SafeParseResult<ErrorModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorModel' from JSON`,
  );
}
