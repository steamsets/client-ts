/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1BadgeLookup,
  V1BadgeLookup$inboundSchema,
  V1BadgeLookup$Outbound,
  V1BadgeLookup$outboundSchema,
} from "./v1badgelookup.js";

export type V1BadgeListAccountsRequestBody = {
  badgeId?: string | null | undefined;
  lookup?: V1BadgeLookup | null | undefined;
};

/** @internal */
export const V1BadgeListAccountsRequestBody$inboundSchema: z.ZodType<
  V1BadgeListAccountsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  badgeId: z.nullable(z.string()).optional(),
  lookup: z.nullable(V1BadgeLookup$inboundSchema).optional(),
});

/** @internal */
export type V1BadgeListAccountsRequestBody$Outbound = {
  badgeId?: string | null | undefined;
  lookup?: V1BadgeLookup$Outbound | null | undefined;
};

/** @internal */
export const V1BadgeListAccountsRequestBody$outboundSchema: z.ZodType<
  V1BadgeListAccountsRequestBody$Outbound,
  z.ZodTypeDef,
  V1BadgeListAccountsRequestBody
> = z.object({
  badgeId: z.nullable(z.string()).optional(),
  lookup: z.nullable(V1BadgeLookup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeListAccountsRequestBody$ {
  /** @deprecated use `V1BadgeListAccountsRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1BadgeListAccountsRequestBody$inboundSchema;
  /** @deprecated use `V1BadgeListAccountsRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1BadgeListAccountsRequestBody$outboundSchema;
  /** @deprecated use `V1BadgeListAccountsRequestBody$Outbound` instead. */
  export type Outbound = V1BadgeListAccountsRequestBody$Outbound;
}

export function v1BadgeListAccountsRequestBodyToJSON(
  v1BadgeListAccountsRequestBody: V1BadgeListAccountsRequestBody,
): string {
  return JSON.stringify(
    V1BadgeListAccountsRequestBody$outboundSchema.parse(
      v1BadgeListAccountsRequestBody,
    ),
  );
}

export function v1BadgeListAccountsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeListAccountsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeListAccountsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeListAccountsRequestBody' from JSON`,
  );
}
