/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Vectors = {
  image: Array<number> | null;
};

/** @internal */
export const Vectors$inboundSchema: z.ZodType<Vectors, z.ZodTypeDef, unknown> =
  z.object({
    image: z.nullable(z.array(z.number())),
  });

/** @internal */
export type Vectors$Outbound = {
  image: Array<number> | null;
};

/** @internal */
export const Vectors$outboundSchema: z.ZodType<
  Vectors$Outbound,
  z.ZodTypeDef,
  Vectors
> = z.object({
  image: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vectors$ {
  /** @deprecated use `Vectors$inboundSchema` instead. */
  export const inboundSchema = Vectors$inboundSchema;
  /** @deprecated use `Vectors$outboundSchema` instead. */
  export const outboundSchema = Vectors$outboundSchema;
  /** @deprecated use `Vectors$Outbound` instead. */
  export type Outbound = Vectors$Outbound;
}

export function vectorsToJSON(vectors: Vectors): string {
  return JSON.stringify(Vectors$outboundSchema.parse(vectors));
}

export function vectorsFromJSON(
  jsonString: string,
): SafeParseResult<Vectors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Vectors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Vectors' from JSON`,
  );
}
