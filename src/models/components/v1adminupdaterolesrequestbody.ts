/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IDStruct,
  IDStruct$inboundSchema,
  IDStruct$Outbound,
  IDStruct$outboundSchema,
} from "./idstruct.js";
import {
  VanityStruct,
  VanityStruct$inboundSchema,
  VanityStruct$Outbound,
  VanityStruct$outboundSchema,
} from "./vanitystruct.js";

export const Roles = {
  User: "user",
  Donator: "donator",
  Staff: "staff",
  Developer: "developer",
  Partner: "partner",
  Owner: "owner",
  Amethyst: "amethyst",
  Amber: "amber",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
  Contributor: "contributor",
  EarlySupporter: "early_supporter",
  Beta: "beta",
  Translator: "translator",
  Top100: "top_100",
  BadgeScout: "badge_scout",
  NitroBooster: "nitro_booster",
} as const;
export type Roles = ClosedEnum<typeof Roles>;

export type V1AdminUpdateRolesRequestBody = {
  id?: IDStruct | undefined;
  roles: Array<Roles> | null;
  vanity?: VanityStruct | undefined;
};

/** @internal */
export const Roles$inboundSchema: z.ZodNativeEnum<typeof Roles> = z.nativeEnum(
  Roles,
);

/** @internal */
export const Roles$outboundSchema: z.ZodNativeEnum<typeof Roles> =
  Roles$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Roles$ {
  /** @deprecated use `Roles$inboundSchema` instead. */
  export const inboundSchema = Roles$inboundSchema;
  /** @deprecated use `Roles$outboundSchema` instead. */
  export const outboundSchema = Roles$outboundSchema;
}

/** @internal */
export const V1AdminUpdateRolesRequestBody$inboundSchema: z.ZodType<
  V1AdminUpdateRolesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IDStruct$inboundSchema.optional(),
  roles: z.nullable(z.array(Roles$inboundSchema)),
  vanity: VanityStruct$inboundSchema.optional(),
});

/** @internal */
export type V1AdminUpdateRolesRequestBody$Outbound = {
  id?: IDStruct$Outbound | undefined;
  roles: Array<string> | null;
  vanity?: VanityStruct$Outbound | undefined;
};

/** @internal */
export const V1AdminUpdateRolesRequestBody$outboundSchema: z.ZodType<
  V1AdminUpdateRolesRequestBody$Outbound,
  z.ZodTypeDef,
  V1AdminUpdateRolesRequestBody
> = z.object({
  id: IDStruct$outboundSchema.optional(),
  roles: z.nullable(z.array(Roles$outboundSchema)),
  vanity: VanityStruct$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AdminUpdateRolesRequestBody$ {
  /** @deprecated use `V1AdminUpdateRolesRequestBody$inboundSchema` instead. */
  export const inboundSchema = V1AdminUpdateRolesRequestBody$inboundSchema;
  /** @deprecated use `V1AdminUpdateRolesRequestBody$outboundSchema` instead. */
  export const outboundSchema = V1AdminUpdateRolesRequestBody$outboundSchema;
  /** @deprecated use `V1AdminUpdateRolesRequestBody$Outbound` instead. */
  export type Outbound = V1AdminUpdateRolesRequestBody$Outbound;
}

export function v1AdminUpdateRolesRequestBodyToJSON(
  v1AdminUpdateRolesRequestBody: V1AdminUpdateRolesRequestBody,
): string {
  return JSON.stringify(
    V1AdminUpdateRolesRequestBody$outboundSchema.parse(
      v1AdminUpdateRolesRequestBody,
    ),
  );
}

export function v1AdminUpdateRolesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AdminUpdateRolesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AdminUpdateRolesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AdminUpdateRolesRequestBody' from JSON`,
  );
}
