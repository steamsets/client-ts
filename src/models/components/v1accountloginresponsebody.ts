/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountLoginResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  /**
   * The avatar of the account
   */
  avatar: string;
  /**
   * The name of the account
   */
  name: string;
  /**
   * The expiration time of the refresh token
   */
  refreshExpiresAt: Date;
  /**
   * The refresh token
   */
  refreshToken: string;
  /**
   * The expiration time of the session token
   */
  sessionExpiresAt: Date;
  /**
   * The session token
   */
  sessionToken: string;
  /**
   * The steam id
   */
  steamId: string;
};

/** @internal */
export const V1AccountLoginResponseBody$inboundSchema: z.ZodType<
  V1AccountLoginResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  avatar: z.string(),
  name: z.string(),
  refreshExpiresAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  refreshToken: z.string(),
  sessionExpiresAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  sessionToken: z.string(),
  steamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountLoginResponseBody$Outbound = {
  $schema?: string | undefined;
  avatar: string;
  name: string;
  refreshExpiresAt: string;
  refreshToken: string;
  sessionExpiresAt: string;
  sessionToken: string;
  steamId: string;
};

/** @internal */
export const V1AccountLoginResponseBody$outboundSchema: z.ZodType<
  V1AccountLoginResponseBody$Outbound,
  z.ZodTypeDef,
  V1AccountLoginResponseBody
> = z.object({
  dollarSchema: z.string().optional(),
  avatar: z.string(),
  name: z.string(),
  refreshExpiresAt: z.date().transform(v => v.toISOString()),
  refreshToken: z.string(),
  sessionExpiresAt: z.date().transform(v => v.toISOString()),
  sessionToken: z.string(),
  steamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountLoginResponseBody$ {
  /** @deprecated use `V1AccountLoginResponseBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountLoginResponseBody$inboundSchema;
  /** @deprecated use `V1AccountLoginResponseBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountLoginResponseBody$outboundSchema;
  /** @deprecated use `V1AccountLoginResponseBody$Outbound` instead. */
  export type Outbound = V1AccountLoginResponseBody$Outbound;
}

export function v1AccountLoginResponseBodyToJSON(
  v1AccountLoginResponseBody: V1AccountLoginResponseBody,
): string {
  return JSON.stringify(
    V1AccountLoginResponseBody$outboundSchema.parse(v1AccountLoginResponseBody),
  );
}

export function v1AccountLoginResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountLoginResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountLoginResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountLoginResponseBody' from JSON`,
  );
}
