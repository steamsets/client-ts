/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1BadgeLookup = {
  appId: number;
  isFoil: boolean;
  level: number;
};

/** @internal */
export const V1BadgeLookup$inboundSchema: z.ZodType<
  V1BadgeLookup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.number().int(),
  isFoil: z.boolean(),
  level: z.number().int(),
});

/** @internal */
export type V1BadgeLookup$Outbound = {
  appId: number;
  isFoil: boolean;
  level: number;
};

/** @internal */
export const V1BadgeLookup$outboundSchema: z.ZodType<
  V1BadgeLookup$Outbound,
  z.ZodTypeDef,
  V1BadgeLookup
> = z.object({
  appId: z.number().int(),
  isFoil: z.boolean(),
  level: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BadgeLookup$ {
  /** @deprecated use `V1BadgeLookup$inboundSchema` instead. */
  export const inboundSchema = V1BadgeLookup$inboundSchema;
  /** @deprecated use `V1BadgeLookup$outboundSchema` instead. */
  export const outboundSchema = V1BadgeLookup$outboundSchema;
  /** @deprecated use `V1BadgeLookup$Outbound` instead. */
  export type Outbound = V1BadgeLookup$Outbound;
}

export function v1BadgeLookupToJSON(v1BadgeLookup: V1BadgeLookup): string {
  return JSON.stringify(V1BadgeLookup$outboundSchema.parse(v1BadgeLookup));
}

export function v1BadgeLookupFromJSON(
  jsonString: string,
): SafeParseResult<V1BadgeLookup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BadgeLookup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BadgeLookup' from JSON`,
  );
}
