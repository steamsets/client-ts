/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  V1AccountBadgeMostXpDataPoint,
  V1AccountBadgeMostXpDataPoint$inboundSchema,
  V1AccountBadgeMostXpDataPoint$Outbound,
  V1AccountBadgeMostXpDataPoint$outboundSchema,
} from "./v1accountbadgemostxpdatapoint.js";
import {
  V1AccountBadgeScarcityDataPoint,
  V1AccountBadgeScarcityDataPoint$inboundSchema,
  V1AccountBadgeScarcityDataPoint$Outbound,
  V1AccountBadgeScarcityDataPoint$outboundSchema,
} from "./v1accountbadgescarcitydatapoint.js";
import {
  V1AccountPlaytimeDataPoint,
  V1AccountPlaytimeDataPoint$inboundSchema,
  V1AccountPlaytimeDataPoint$Outbound,
  V1AccountPlaytimeDataPoint$outboundSchema,
} from "./v1accountplaytimedatapoint.js";

export type V1AccountDataPointsResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
  mostXp: Array<V1AccountBadgeMostXpDataPoint> | null;
  playtime: Array<V1AccountPlaytimeDataPoint> | null;
  scarcity: Array<V1AccountBadgeScarcityDataPoint> | null;
  xp: { [k: string]: { [k: string]: number } };
};

/** @internal */
export const V1AccountDataPointsResponseBody$inboundSchema: z.ZodType<
  V1AccountDataPointsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
  mostXp: z.nullable(z.array(V1AccountBadgeMostXpDataPoint$inboundSchema)),
  playtime: z.nullable(z.array(V1AccountPlaytimeDataPoint$inboundSchema)),
  scarcity: z.nullable(z.array(V1AccountBadgeScarcityDataPoint$inboundSchema)),
  xp: z.record(z.record(z.number().int())),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountDataPointsResponseBody$Outbound = {
  $schema?: string | undefined;
  mostXp: Array<V1AccountBadgeMostXpDataPoint$Outbound> | null;
  playtime: Array<V1AccountPlaytimeDataPoint$Outbound> | null;
  scarcity: Array<V1AccountBadgeScarcityDataPoint$Outbound> | null;
  xp: { [k: string]: { [k: string]: number } };
};

/** @internal */
export const V1AccountDataPointsResponseBody$outboundSchema: z.ZodType<
  V1AccountDataPointsResponseBody$Outbound,
  z.ZodTypeDef,
  V1AccountDataPointsResponseBody
> = z.object({
  dollarSchema: z.string().optional(),
  mostXp: z.nullable(z.array(V1AccountBadgeMostXpDataPoint$outboundSchema)),
  playtime: z.nullable(z.array(V1AccountPlaytimeDataPoint$outboundSchema)),
  scarcity: z.nullable(z.array(V1AccountBadgeScarcityDataPoint$outboundSchema)),
  xp: z.record(z.record(z.number().int())),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountDataPointsResponseBody$ {
  /** @deprecated use `V1AccountDataPointsResponseBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountDataPointsResponseBody$inboundSchema;
  /** @deprecated use `V1AccountDataPointsResponseBody$outboundSchema` instead. */
  export const outboundSchema = V1AccountDataPointsResponseBody$outboundSchema;
  /** @deprecated use `V1AccountDataPointsResponseBody$Outbound` instead. */
  export type Outbound = V1AccountDataPointsResponseBody$Outbound;
}
