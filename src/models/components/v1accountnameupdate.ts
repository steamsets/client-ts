/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type V1AccountNameUpdate = {
  /**
   * The name of the account
   */
  name: string;
  /**
   * The time the name was updated
   */
  updatedAt: Date;
};

/** @internal */
export const V1AccountNameUpdate$inboundSchema: z.ZodType<
  V1AccountNameUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type V1AccountNameUpdate$Outbound = {
  name: string;
  updatedAt: string;
};

/** @internal */
export const V1AccountNameUpdate$outboundSchema: z.ZodType<
  V1AccountNameUpdate$Outbound,
  z.ZodTypeDef,
  V1AccountNameUpdate
> = z.object({
  name: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountNameUpdate$ {
  /** @deprecated use `V1AccountNameUpdate$inboundSchema` instead. */
  export const inboundSchema = V1AccountNameUpdate$inboundSchema;
  /** @deprecated use `V1AccountNameUpdate$outboundSchema` instead. */
  export const outboundSchema = V1AccountNameUpdate$outboundSchema;
  /** @deprecated use `V1AccountNameUpdate$Outbound` instead. */
  export type Outbound = V1AccountNameUpdate$Outbound;
}
