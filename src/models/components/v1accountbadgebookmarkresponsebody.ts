/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountBadgeBookmarkResponseBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  dollarSchema?: string | undefined;
};

/** @internal */
export const V1AccountBadgeBookmarkResponseBody$inboundSchema: z.ZodType<
  V1AccountBadgeBookmarkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  $schema: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "$schema": "dollarSchema",
  });
});

/** @internal */
export type V1AccountBadgeBookmarkResponseBody$Outbound = {
  $schema?: string | undefined;
};

/** @internal */
export const V1AccountBadgeBookmarkResponseBody$outboundSchema: z.ZodType<
  V1AccountBadgeBookmarkResponseBody$Outbound,
  z.ZodTypeDef,
  V1AccountBadgeBookmarkResponseBody
> = z.object({
  dollarSchema: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dollarSchema: "$schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountBadgeBookmarkResponseBody$ {
  /** @deprecated use `V1AccountBadgeBookmarkResponseBody$inboundSchema` instead. */
  export const inboundSchema = V1AccountBadgeBookmarkResponseBody$inboundSchema;
  /** @deprecated use `V1AccountBadgeBookmarkResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountBadgeBookmarkResponseBody$outboundSchema;
  /** @deprecated use `V1AccountBadgeBookmarkResponseBody$Outbound` instead. */
  export type Outbound = V1AccountBadgeBookmarkResponseBody$Outbound;
}

export function v1AccountBadgeBookmarkResponseBodyToJSON(
  v1AccountBadgeBookmarkResponseBody: V1AccountBadgeBookmarkResponseBody,
): string {
  return JSON.stringify(
    V1AccountBadgeBookmarkResponseBody$outboundSchema.parse(
      v1AccountBadgeBookmarkResponseBody,
    ),
  );
}

export function v1AccountBadgeBookmarkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountBadgeBookmarkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountBadgeBookmarkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountBadgeBookmarkResponseBody' from JSON`,
  );
}
