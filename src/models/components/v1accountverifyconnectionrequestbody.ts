/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1AccountVerifyConnectionRequestBody = {
  /**
   * The connection id to verify
   */
  connectionId: string;
};

/** @internal */
export const V1AccountVerifyConnectionRequestBody$inboundSchema: z.ZodType<
  V1AccountVerifyConnectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectionId: z.string(),
});

/** @internal */
export type V1AccountVerifyConnectionRequestBody$Outbound = {
  connectionId: string;
};

/** @internal */
export const V1AccountVerifyConnectionRequestBody$outboundSchema: z.ZodType<
  V1AccountVerifyConnectionRequestBody$Outbound,
  z.ZodTypeDef,
  V1AccountVerifyConnectionRequestBody
> = z.object({
  connectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountVerifyConnectionRequestBody$ {
  /** @deprecated use `V1AccountVerifyConnectionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1AccountVerifyConnectionRequestBody$inboundSchema;
  /** @deprecated use `V1AccountVerifyConnectionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1AccountVerifyConnectionRequestBody$outboundSchema;
  /** @deprecated use `V1AccountVerifyConnectionRequestBody$Outbound` instead. */
  export type Outbound = V1AccountVerifyConnectionRequestBody$Outbound;
}

export function v1AccountVerifyConnectionRequestBodyToJSON(
  v1AccountVerifyConnectionRequestBody: V1AccountVerifyConnectionRequestBody,
): string {
  return JSON.stringify(
    V1AccountVerifyConnectionRequestBody$outboundSchema.parse(
      v1AccountVerifyConnectionRequestBody,
    ),
  );
}

export function v1AccountVerifyConnectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountVerifyConnectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AccountVerifyConnectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountVerifyConnectionRequestBody' from JSON`,
  );
}
