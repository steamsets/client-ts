/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HistoryValue,
  HistoryValue$inboundSchema,
  HistoryValue$Outbound,
  HistoryValue$outboundSchema,
} from "./historyvalue.js";

export type V1AccountVanityUpdate = {
  /**
   * The time the vanity was updated
   */
  updatedAt: Date;
  vanity: HistoryValue;
};

/** @internal */
export const V1AccountVanityUpdate$inboundSchema: z.ZodType<
  V1AccountVanityUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  vanity: HistoryValue$inboundSchema,
});

/** @internal */
export type V1AccountVanityUpdate$Outbound = {
  updatedAt: string;
  vanity: HistoryValue$Outbound;
};

/** @internal */
export const V1AccountVanityUpdate$outboundSchema: z.ZodType<
  V1AccountVanityUpdate$Outbound,
  z.ZodTypeDef,
  V1AccountVanityUpdate
> = z.object({
  updatedAt: z.date().transform(v => v.toISOString()),
  vanity: HistoryValue$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AccountVanityUpdate$ {
  /** @deprecated use `V1AccountVanityUpdate$inboundSchema` instead. */
  export const inboundSchema = V1AccountVanityUpdate$inboundSchema;
  /** @deprecated use `V1AccountVanityUpdate$outboundSchema` instead. */
  export const outboundSchema = V1AccountVanityUpdate$outboundSchema;
  /** @deprecated use `V1AccountVanityUpdate$Outbound` instead. */
  export type Outbound = V1AccountVanityUpdate$Outbound;
}

export function v1AccountVanityUpdateToJSON(
  v1AccountVanityUpdate: V1AccountVanityUpdate,
): string {
  return JSON.stringify(
    V1AccountVanityUpdate$outboundSchema.parse(v1AccountVanityUpdate),
  );
}

export function v1AccountVanityUpdateFromJSON(
  jsonString: string,
): SafeParseResult<V1AccountVanityUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AccountVanityUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AccountVanityUpdate' from JSON`,
  );
}
