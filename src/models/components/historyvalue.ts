/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HistoryValue = {
  /**
   * The new value of the history entry
   */
  new: string | null;
  /**
   * The old value of the history entry
   */
  old: string | null;
};

/** @internal */
export const HistoryValue$inboundSchema: z.ZodType<
  HistoryValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  new: z.nullable(z.string()),
  old: z.nullable(z.string()),
});

/** @internal */
export type HistoryValue$Outbound = {
  new: string | null;
  old: string | null;
};

/** @internal */
export const HistoryValue$outboundSchema: z.ZodType<
  HistoryValue$Outbound,
  z.ZodTypeDef,
  HistoryValue
> = z.object({
  new: z.nullable(z.string()),
  old: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HistoryValue$ {
  /** @deprecated use `HistoryValue$inboundSchema` instead. */
  export const inboundSchema = HistoryValue$inboundSchema;
  /** @deprecated use `HistoryValue$outboundSchema` instead. */
  export const outboundSchema = HistoryValue$outboundSchema;
  /** @deprecated use `HistoryValue$Outbound` instead. */
  export type Outbound = HistoryValue$Outbound;
}

export function historyValueToJSON(historyValue: HistoryValue): string {
  return JSON.stringify(HistoryValue$outboundSchema.parse(historyValue));
}

export function historyValueFromJSON(
  jsonString: string,
): SafeParseResult<HistoryValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HistoryValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HistoryValue' from JSON`,
  );
}
