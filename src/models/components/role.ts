/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RoleRole = {
  User: "user",
  Donator: "donator",
  Staff: "staff",
  Developer: "developer",
  Partner: "partner",
  Owner: "owner",
  Amethyst: "amethyst",
  Amber: "amber",
  Emerald: "emerald",
  Sapphire: "sapphire",
  Ruby: "ruby",
  Diamond: "diamond",
  Contributor: "contributor",
  EarlySupporter: "early_supporter",
  Beta: "beta",
  Translator: "translator",
  Top100: "top_100",
  BadgeScout: "badge_scout",
  NitroBooster: "nitro_booster",
} as const;
export type RoleRole = ClosedEnum<typeof RoleRole>;

export type Role = {
  /**
   * Extra data associated with the role
   */
  extras: { [k: string]: any } | null;
  /**
   * The higher the more presedence it has
   */
  rating: number;
  role: RoleRole;
};

/** @internal */
export const RoleRole$inboundSchema: z.ZodNativeEnum<typeof RoleRole> = z
  .nativeEnum(RoleRole);

/** @internal */
export const RoleRole$outboundSchema: z.ZodNativeEnum<typeof RoleRole> =
  RoleRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleRole$ {
  /** @deprecated use `RoleRole$inboundSchema` instead. */
  export const inboundSchema = RoleRole$inboundSchema;
  /** @deprecated use `RoleRole$outboundSchema` instead. */
  export const outboundSchema = RoleRole$outboundSchema;
}

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .object({
    extras: z.nullable(z.record(z.any())),
    rating: z.number().int(),
    role: RoleRole$inboundSchema,
  });

/** @internal */
export type Role$Outbound = {
  extras: { [k: string]: any } | null;
  rating: number;
  role: string;
};

/** @internal */
export const Role$outboundSchema: z.ZodType<Role$Outbound, z.ZodTypeDef, Role> =
  z.object({
    extras: z.nullable(z.record(z.any())),
    rating: z.number().int(),
    role: RoleRole$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
  /** @deprecated use `Role$Outbound` instead. */
  export type Outbound = Role$Outbound;
}

export function roleToJSON(role: Role): string {
  return JSON.stringify(Role$outboundSchema.parse(role));
}

export function roleFromJSON(
  jsonString: string,
): SafeParseResult<Role, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Role$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Role' from JSON`,
  );
}
