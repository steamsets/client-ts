/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1LeaderboardAppInfo = {
  /**
   * The id of the app
   */
  id: number;
  /**
   * The image of the app
   */
  image: string;
  /**
   * The name of the app
   */
  name: string;
  /**
   * The type of the app
   */
  type: string;
};

/** @internal */
export const V1LeaderboardAppInfo$inboundSchema: z.ZodType<
  V1LeaderboardAppInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  image: z.string(),
  name: z.string(),
  type: z.string(),
});

/** @internal */
export type V1LeaderboardAppInfo$Outbound = {
  id: number;
  image: string;
  name: string;
  type: string;
};

/** @internal */
export const V1LeaderboardAppInfo$outboundSchema: z.ZodType<
  V1LeaderboardAppInfo$Outbound,
  z.ZodTypeDef,
  V1LeaderboardAppInfo
> = z.object({
  id: z.number().int(),
  image: z.string(),
  name: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardAppInfo$ {
  /** @deprecated use `V1LeaderboardAppInfo$inboundSchema` instead. */
  export const inboundSchema = V1LeaderboardAppInfo$inboundSchema;
  /** @deprecated use `V1LeaderboardAppInfo$outboundSchema` instead. */
  export const outboundSchema = V1LeaderboardAppInfo$outboundSchema;
  /** @deprecated use `V1LeaderboardAppInfo$Outbound` instead. */
  export type Outbound = V1LeaderboardAppInfo$Outbound;
}

export function v1LeaderboardAppInfoToJSON(
  v1LeaderboardAppInfo: V1LeaderboardAppInfo,
): string {
  return JSON.stringify(
    V1LeaderboardAppInfo$outboundSchema.parse(v1LeaderboardAppInfo),
  );
}

export function v1LeaderboardAppInfoFromJSON(
  jsonString: string,
): SafeParseResult<V1LeaderboardAppInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1LeaderboardAppInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1LeaderboardAppInfo' from JSON`,
  );
}
