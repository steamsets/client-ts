/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The leaderboard to get
 */
export const V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard = {
  MostMembers: "most_members",
} as const;
/**
 * The leaderboard to get
 */
export type V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard = ClosedEnum<
  typeof V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard
>;

export type V1LeaderboardGetGroupLeaderboardRequestBody = {
  /**
   * The end index
   */
  end?: number | null | undefined;
  /**
   * The rank to go to
   */
  goToLeaderboardRank?: number | null | undefined;
  /**
   * The leaderboard to get
   */
  leaderboard: V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard;
  /**
   * The start index
   */
  start?: number | null | undefined;
};

/** @internal */
export const V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$inboundSchema:
  z.ZodNativeEnum<
    typeof V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard
  > = z.nativeEnum(V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard);

/** @internal */
export const V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$outboundSchema:
  z.ZodNativeEnum<
    typeof V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard
  > = V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$ {
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$inboundSchema;
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$outboundSchema;
}

/** @internal */
export const V1LeaderboardGetGroupLeaderboardRequestBody$inboundSchema:
  z.ZodType<
    V1LeaderboardGetGroupLeaderboardRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    end: z.nullable(z.number().int()).optional(),
    goToLeaderboardRank: z.nullable(z.number().int()).optional(),
    leaderboard:
      V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$inboundSchema,
    start: z.nullable(z.number().int()).optional(),
  });

/** @internal */
export type V1LeaderboardGetGroupLeaderboardRequestBody$Outbound = {
  end?: number | null | undefined;
  goToLeaderboardRank?: number | null | undefined;
  leaderboard: string;
  start?: number | null | undefined;
};

/** @internal */
export const V1LeaderboardGetGroupLeaderboardRequestBody$outboundSchema:
  z.ZodType<
    V1LeaderboardGetGroupLeaderboardRequestBody$Outbound,
    z.ZodTypeDef,
    V1LeaderboardGetGroupLeaderboardRequestBody
  > = z.object({
    end: z.nullable(z.number().int()).optional(),
    goToLeaderboardRank: z.nullable(z.number().int()).optional(),
    leaderboard:
      V1LeaderboardGetGroupLeaderboardRequestBodyLeaderboard$outboundSchema,
    start: z.nullable(z.number().int()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1LeaderboardGetGroupLeaderboardRequestBody$ {
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    V1LeaderboardGetGroupLeaderboardRequestBody$inboundSchema;
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    V1LeaderboardGetGroupLeaderboardRequestBody$outboundSchema;
  /** @deprecated use `V1LeaderboardGetGroupLeaderboardRequestBody$Outbound` instead. */
  export type Outbound = V1LeaderboardGetGroupLeaderboardRequestBody$Outbound;
}

export function v1LeaderboardGetGroupLeaderboardRequestBodyToJSON(
  v1LeaderboardGetGroupLeaderboardRequestBody:
    V1LeaderboardGetGroupLeaderboardRequestBody,
): string {
  return JSON.stringify(
    V1LeaderboardGetGroupLeaderboardRequestBody$outboundSchema.parse(
      v1LeaderboardGetGroupLeaderboardRequestBody,
    ),
  );
}

export function v1LeaderboardGetGroupLeaderboardRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  V1LeaderboardGetGroupLeaderboardRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1LeaderboardGetGroupLeaderboardRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1LeaderboardGetGroupLeaderboardRequestBody' from JSON`,
  );
}
