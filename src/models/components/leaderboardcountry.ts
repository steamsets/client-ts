/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeaderboardCountry = {
  /**
   * The code of the country
   */
  code?: string | undefined;
  /**
   * The id of the country
   */
  id: number;
  /**
   * The name of the country
   */
  name: string;
};

/** @internal */
export const LeaderboardCountry$inboundSchema: z.ZodType<
  LeaderboardCountry,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  id: z.number().int(),
  name: z.string(),
});

/** @internal */
export type LeaderboardCountry$Outbound = {
  code?: string | undefined;
  id: number;
  name: string;
};

/** @internal */
export const LeaderboardCountry$outboundSchema: z.ZodType<
  LeaderboardCountry$Outbound,
  z.ZodTypeDef,
  LeaderboardCountry
> = z.object({
  code: z.string().optional(),
  id: z.number().int(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeaderboardCountry$ {
  /** @deprecated use `LeaderboardCountry$inboundSchema` instead. */
  export const inboundSchema = LeaderboardCountry$inboundSchema;
  /** @deprecated use `LeaderboardCountry$outboundSchema` instead. */
  export const outboundSchema = LeaderboardCountry$outboundSchema;
  /** @deprecated use `LeaderboardCountry$Outbound` instead. */
  export type Outbound = LeaderboardCountry$Outbound;
}

export function leaderboardCountryToJSON(
  leaderboardCountry: LeaderboardCountry,
): string {
  return JSON.stringify(
    LeaderboardCountry$outboundSchema.parse(leaderboardCountry),
  );
}

export function leaderboardCountryFromJSON(
  jsonString: string,
): SafeParseResult<LeaderboardCountry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeaderboardCountry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeaderboardCountry' from JSON`,
  );
}
