/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BadgeValueFilterType = {
  Level: "level",
  Scarcity: "scarcity",
} as const;
export type BadgeValueFilterType = ClosedEnum<typeof BadgeValueFilterType>;

export type BadgeValueFilter = {
  type: BadgeValueFilterType;
  value: string;
};

/** @internal */
export const BadgeValueFilterType$inboundSchema: z.ZodNativeEnum<
  typeof BadgeValueFilterType
> = z.nativeEnum(BadgeValueFilterType);

/** @internal */
export const BadgeValueFilterType$outboundSchema: z.ZodNativeEnum<
  typeof BadgeValueFilterType
> = BadgeValueFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeValueFilterType$ {
  /** @deprecated use `BadgeValueFilterType$inboundSchema` instead. */
  export const inboundSchema = BadgeValueFilterType$inboundSchema;
  /** @deprecated use `BadgeValueFilterType$outboundSchema` instead. */
  export const outboundSchema = BadgeValueFilterType$outboundSchema;
}

/** @internal */
export const BadgeValueFilter$inboundSchema: z.ZodType<
  BadgeValueFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: BadgeValueFilterType$inboundSchema,
  value: z.string(),
});

/** @internal */
export type BadgeValueFilter$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const BadgeValueFilter$outboundSchema: z.ZodType<
  BadgeValueFilter$Outbound,
  z.ZodTypeDef,
  BadgeValueFilter
> = z.object({
  type: BadgeValueFilterType$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeValueFilter$ {
  /** @deprecated use `BadgeValueFilter$inboundSchema` instead. */
  export const inboundSchema = BadgeValueFilter$inboundSchema;
  /** @deprecated use `BadgeValueFilter$outboundSchema` instead. */
  export const outboundSchema = BadgeValueFilter$outboundSchema;
  /** @deprecated use `BadgeValueFilter$Outbound` instead. */
  export type Outbound = BadgeValueFilter$Outbound;
}

export function badgeValueFilterToJSON(
  badgeValueFilter: BadgeValueFilter,
): string {
  return JSON.stringify(
    BadgeValueFilter$outboundSchema.parse(badgeValueFilter),
  );
}

export function badgeValueFilterFromJSON(
  jsonString: string,
): SafeParseResult<BadgeValueFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadgeValueFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadgeValueFilter' from JSON`,
  );
}
