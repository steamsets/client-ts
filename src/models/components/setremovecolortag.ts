/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetRemoveColorTag = {
  /**
   * The id of the color
   */
  id: string;
  /**
   * Whether to remove the color or not
   */
  remove: boolean;
};

/** @internal */
export const SetRemoveColorTag$inboundSchema: z.ZodType<
  SetRemoveColorTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  remove: z.boolean(),
});

/** @internal */
export type SetRemoveColorTag$Outbound = {
  id: string;
  remove: boolean;
};

/** @internal */
export const SetRemoveColorTag$outboundSchema: z.ZodType<
  SetRemoveColorTag$Outbound,
  z.ZodTypeDef,
  SetRemoveColorTag
> = z.object({
  id: z.string(),
  remove: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetRemoveColorTag$ {
  /** @deprecated use `SetRemoveColorTag$inboundSchema` instead. */
  export const inboundSchema = SetRemoveColorTag$inboundSchema;
  /** @deprecated use `SetRemoveColorTag$outboundSchema` instead. */
  export const outboundSchema = SetRemoveColorTag$outboundSchema;
  /** @deprecated use `SetRemoveColorTag$Outbound` instead. */
  export type Outbound = SetRemoveColorTag$Outbound;
}

export function setRemoveColorTagToJSON(
  setRemoveColorTag: SetRemoveColorTag,
): string {
  return JSON.stringify(
    SetRemoveColorTag$outboundSchema.parse(setRemoveColorTag),
  );
}

export function setRemoveColorTagFromJSON(
  jsonString: string,
): SafeParseResult<SetRemoveColorTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetRemoveColorTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetRemoveColorTag' from JSON`,
  );
}
