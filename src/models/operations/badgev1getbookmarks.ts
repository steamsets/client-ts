/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BadgeV1GetBookmarksResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1GetBadgeBookmarksResponseBody?:
    | components.V1GetBadgeBookmarksResponseBody
    | undefined;
};

/** @internal */
export const BadgeV1GetBookmarksResponse$inboundSchema: z.ZodType<
  BadgeV1GetBookmarksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1GetBadgeBookmarksResponseBody: components
    .V1GetBadgeBookmarksResponseBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1GetBadgeBookmarksResponseBody": "v1GetBadgeBookmarksResponseBody",
  });
});

/** @internal */
export type BadgeV1GetBookmarksResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1GetBadgeBookmarksResponseBody?:
    | components.V1GetBadgeBookmarksResponseBody$Outbound
    | undefined;
};

/** @internal */
export const BadgeV1GetBookmarksResponse$outboundSchema: z.ZodType<
  BadgeV1GetBookmarksResponse$Outbound,
  z.ZodTypeDef,
  BadgeV1GetBookmarksResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1GetBadgeBookmarksResponseBody: components
    .V1GetBadgeBookmarksResponseBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1GetBadgeBookmarksResponseBody: "V1GetBadgeBookmarksResponseBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeV1GetBookmarksResponse$ {
  /** @deprecated use `BadgeV1GetBookmarksResponse$inboundSchema` instead. */
  export const inboundSchema = BadgeV1GetBookmarksResponse$inboundSchema;
  /** @deprecated use `BadgeV1GetBookmarksResponse$outboundSchema` instead. */
  export const outboundSchema = BadgeV1GetBookmarksResponse$outboundSchema;
  /** @deprecated use `BadgeV1GetBookmarksResponse$Outbound` instead. */
  export type Outbound = BadgeV1GetBookmarksResponse$Outbound;
}

export function badgeV1GetBookmarksResponseToJSON(
  badgeV1GetBookmarksResponse: BadgeV1GetBookmarksResponse,
): string {
  return JSON.stringify(
    BadgeV1GetBookmarksResponse$outboundSchema.parse(
      badgeV1GetBookmarksResponse,
    ),
  );
}

export function badgeV1GetBookmarksResponseFromJSON(
  jsonString: string,
): SafeParseResult<BadgeV1GetBookmarksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadgeV1GetBookmarksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadgeV1GetBookmarksResponse' from JSON`,
  );
}
