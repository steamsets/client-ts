/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountV1SessionRefreshRequest = {
  userAgent?: string | undefined;
  xForwardedFor?: string | undefined;
  v1RefreshSessionRequestBody: components.V1RefreshSessionRequestBody;
};

export type AccountV1SessionRefreshResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1RefreshSessionBody?: components.V1RefreshSessionBody | undefined;
};

/** @internal */
export const AccountV1SessionRefreshRequest$inboundSchema: z.ZodType<
  AccountV1SessionRefreshRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string().optional(),
  "X-Forwarded-For": z.string().optional(),
  V1RefreshSessionRequestBody:
    components.V1RefreshSessionRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
    "X-Forwarded-For": "xForwardedFor",
    "V1RefreshSessionRequestBody": "v1RefreshSessionRequestBody",
  });
});

/** @internal */
export type AccountV1SessionRefreshRequest$Outbound = {
  "User-Agent"?: string | undefined;
  "X-Forwarded-For"?: string | undefined;
  V1RefreshSessionRequestBody: components.V1RefreshSessionRequestBody$Outbound;
};

/** @internal */
export const AccountV1SessionRefreshRequest$outboundSchema: z.ZodType<
  AccountV1SessionRefreshRequest$Outbound,
  z.ZodTypeDef,
  AccountV1SessionRefreshRequest
> = z.object({
  userAgent: z.string().optional(),
  xForwardedFor: z.string().optional(),
  v1RefreshSessionRequestBody:
    components.V1RefreshSessionRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
    xForwardedFor: "X-Forwarded-For",
    v1RefreshSessionRequestBody: "V1RefreshSessionRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SessionRefreshRequest$ {
  /** @deprecated use `AccountV1SessionRefreshRequest$inboundSchema` instead. */
  export const inboundSchema = AccountV1SessionRefreshRequest$inboundSchema;
  /** @deprecated use `AccountV1SessionRefreshRequest$outboundSchema` instead. */
  export const outboundSchema = AccountV1SessionRefreshRequest$outboundSchema;
  /** @deprecated use `AccountV1SessionRefreshRequest$Outbound` instead. */
  export type Outbound = AccountV1SessionRefreshRequest$Outbound;
}

export function accountV1SessionRefreshRequestToJSON(
  accountV1SessionRefreshRequest: AccountV1SessionRefreshRequest,
): string {
  return JSON.stringify(
    AccountV1SessionRefreshRequest$outboundSchema.parse(
      accountV1SessionRefreshRequest,
    ),
  );
}

export function accountV1SessionRefreshRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SessionRefreshRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SessionRefreshRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SessionRefreshRequest' from JSON`,
  );
}

/** @internal */
export const AccountV1SessionRefreshResponse$inboundSchema: z.ZodType<
  AccountV1SessionRefreshResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1RefreshSessionBody: components.V1RefreshSessionBody$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1RefreshSessionBody": "v1RefreshSessionBody",
  });
});

/** @internal */
export type AccountV1SessionRefreshResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1RefreshSessionBody?: components.V1RefreshSessionBody$Outbound | undefined;
};

/** @internal */
export const AccountV1SessionRefreshResponse$outboundSchema: z.ZodType<
  AccountV1SessionRefreshResponse$Outbound,
  z.ZodTypeDef,
  AccountV1SessionRefreshResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1RefreshSessionBody: components.V1RefreshSessionBody$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1RefreshSessionBody: "V1RefreshSessionBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SessionRefreshResponse$ {
  /** @deprecated use `AccountV1SessionRefreshResponse$inboundSchema` instead. */
  export const inboundSchema = AccountV1SessionRefreshResponse$inboundSchema;
  /** @deprecated use `AccountV1SessionRefreshResponse$outboundSchema` instead. */
  export const outboundSchema = AccountV1SessionRefreshResponse$outboundSchema;
  /** @deprecated use `AccountV1SessionRefreshResponse$Outbound` instead. */
  export type Outbound = AccountV1SessionRefreshResponse$Outbound;
}

export function accountV1SessionRefreshResponseToJSON(
  accountV1SessionRefreshResponse: AccountV1SessionRefreshResponse,
): string {
  return JSON.stringify(
    AccountV1SessionRefreshResponse$outboundSchema.parse(
      accountV1SessionRefreshResponse,
    ),
  );
}

export function accountV1SessionRefreshResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SessionRefreshResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SessionRefreshResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SessionRefreshResponse' from JSON`,
  );
}
