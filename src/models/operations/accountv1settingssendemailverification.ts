/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountV1SettingsSendEmailVerificationRequest = {
  xForwardedFor?: string | undefined;
};

export type AccountV1SettingsSendEmailVerificationResponse = {
  httpMeta: components.HTTPMetadata;
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const AccountV1SettingsSendEmailVerificationRequest$inboundSchema:
  z.ZodType<
    AccountV1SettingsSendEmailVerificationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "X-Forwarded-For": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "X-Forwarded-For": "xForwardedFor",
    });
  });

/** @internal */
export type AccountV1SettingsSendEmailVerificationRequest$Outbound = {
  "X-Forwarded-For"?: string | undefined;
};

/** @internal */
export const AccountV1SettingsSendEmailVerificationRequest$outboundSchema:
  z.ZodType<
    AccountV1SettingsSendEmailVerificationRequest$Outbound,
    z.ZodTypeDef,
    AccountV1SettingsSendEmailVerificationRequest
  > = z.object({
    xForwardedFor: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      xForwardedFor: "X-Forwarded-For",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsSendEmailVerificationRequest$ {
  /** @deprecated use `AccountV1SettingsSendEmailVerificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountV1SettingsSendEmailVerificationRequest$inboundSchema;
  /** @deprecated use `AccountV1SettingsSendEmailVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountV1SettingsSendEmailVerificationRequest$outboundSchema;
  /** @deprecated use `AccountV1SettingsSendEmailVerificationRequest$Outbound` instead. */
  export type Outbound = AccountV1SettingsSendEmailVerificationRequest$Outbound;
}

export function accountV1SettingsSendEmailVerificationRequestToJSON(
  accountV1SettingsSendEmailVerificationRequest:
    AccountV1SettingsSendEmailVerificationRequest,
): string {
  return JSON.stringify(
    AccountV1SettingsSendEmailVerificationRequest$outboundSchema.parse(
      accountV1SettingsSendEmailVerificationRequest,
    ),
  );
}

export function accountV1SettingsSendEmailVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountV1SettingsSendEmailVerificationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountV1SettingsSendEmailVerificationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountV1SettingsSendEmailVerificationRequest' from JSON`,
  );
}

/** @internal */
export const AccountV1SettingsSendEmailVerificationResponse$inboundSchema:
  z.ZodType<
    AccountV1SettingsSendEmailVerificationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    Headers: z.record(z.array(z.string())),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Headers": "headers",
    });
  });

/** @internal */
export type AccountV1SettingsSendEmailVerificationResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const AccountV1SettingsSendEmailVerificationResponse$outboundSchema:
  z.ZodType<
    AccountV1SettingsSendEmailVerificationResponse$Outbound,
    z.ZodTypeDef,
    AccountV1SettingsSendEmailVerificationResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    headers: z.record(z.array(z.string())),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      headers: "Headers",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsSendEmailVerificationResponse$ {
  /** @deprecated use `AccountV1SettingsSendEmailVerificationResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountV1SettingsSendEmailVerificationResponse$inboundSchema;
  /** @deprecated use `AccountV1SettingsSendEmailVerificationResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountV1SettingsSendEmailVerificationResponse$outboundSchema;
  /** @deprecated use `AccountV1SettingsSendEmailVerificationResponse$Outbound` instead. */
  export type Outbound =
    AccountV1SettingsSendEmailVerificationResponse$Outbound;
}

export function accountV1SettingsSendEmailVerificationResponseToJSON(
  accountV1SettingsSendEmailVerificationResponse:
    AccountV1SettingsSendEmailVerificationResponse,
): string {
  return JSON.stringify(
    AccountV1SettingsSendEmailVerificationResponse$outboundSchema.parse(
      accountV1SettingsSendEmailVerificationResponse,
    ),
  );
}

export function accountV1SettingsSendEmailVerificationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountV1SettingsSendEmailVerificationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountV1SettingsSendEmailVerificationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountV1SettingsSendEmailVerificationResponse' from JSON`,
  );
}
