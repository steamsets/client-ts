/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BadgeListBadgePricesResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1BadgeListBadgePricesResponseBody?:
    | components.V1BadgeListBadgePricesResponseBody
    | undefined;
  /**
   * Error
   */
  errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export const BadgeListBadgePricesResponse$inboundSchema: z.ZodType<
  BadgeListBadgePricesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1BadgeListBadgePricesResponseBody: components
    .V1BadgeListBadgePricesResponseBody$inboundSchema.optional(),
  ErrorModel: components.ErrorModel$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1BadgeListBadgePricesResponseBody": "v1BadgeListBadgePricesResponseBody",
    "ErrorModel": "errorModel",
  });
});

/** @internal */
export type BadgeListBadgePricesResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1BadgeListBadgePricesResponseBody?:
    | components.V1BadgeListBadgePricesResponseBody$Outbound
    | undefined;
  ErrorModel?: components.ErrorModel$Outbound | undefined;
};

/** @internal */
export const BadgeListBadgePricesResponse$outboundSchema: z.ZodType<
  BadgeListBadgePricesResponse$Outbound,
  z.ZodTypeDef,
  BadgeListBadgePricesResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1BadgeListBadgePricesResponseBody: components
    .V1BadgeListBadgePricesResponseBody$outboundSchema.optional(),
  errorModel: components.ErrorModel$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1BadgeListBadgePricesResponseBody: "V1BadgeListBadgePricesResponseBody",
    errorModel: "ErrorModel",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadgeListBadgePricesResponse$ {
  /** @deprecated use `BadgeListBadgePricesResponse$inboundSchema` instead. */
  export const inboundSchema = BadgeListBadgePricesResponse$inboundSchema;
  /** @deprecated use `BadgeListBadgePricesResponse$outboundSchema` instead. */
  export const outboundSchema = BadgeListBadgePricesResponse$outboundSchema;
  /** @deprecated use `BadgeListBadgePricesResponse$Outbound` instead. */
  export type Outbound = BadgeListBadgePricesResponse$Outbound;
}

export function badgeListBadgePricesResponseToJSON(
  badgeListBadgePricesResponse: BadgeListBadgePricesResponse,
): string {
  return JSON.stringify(
    BadgeListBadgePricesResponse$outboundSchema.parse(
      badgeListBadgePricesResponse,
    ),
  );
}

export function badgeListBadgePricesResponseFromJSON(
  jsonString: string,
): SafeParseResult<BadgeListBadgePricesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadgeListBadgePricesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadgeListBadgePricesResponse' from JSON`,
  );
}
