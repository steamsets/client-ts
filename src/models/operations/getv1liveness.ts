/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1LivenessResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1LivenessResponseBody?: components.V1LivenessResponseBody | undefined;
};

/** @internal */
export const GetV1LivenessResponse$inboundSchema: z.ZodType<
  GetV1LivenessResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1LivenessResponseBody: components.V1LivenessResponseBody$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1LivenessResponseBody": "v1LivenessResponseBody",
  });
});

/** @internal */
export type GetV1LivenessResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1LivenessResponseBody?:
    | components.V1LivenessResponseBody$Outbound
    | undefined;
};

/** @internal */
export const GetV1LivenessResponse$outboundSchema: z.ZodType<
  GetV1LivenessResponse$Outbound,
  z.ZodTypeDef,
  GetV1LivenessResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1LivenessResponseBody: components.V1LivenessResponseBody$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1LivenessResponseBody: "V1LivenessResponseBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1LivenessResponse$ {
  /** @deprecated use `GetV1LivenessResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1LivenessResponse$inboundSchema;
  /** @deprecated use `GetV1LivenessResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1LivenessResponse$outboundSchema;
  /** @deprecated use `GetV1LivenessResponse$Outbound` instead. */
  export type Outbound = GetV1LivenessResponse$Outbound;
}

export function getV1LivenessResponseToJSON(
  getV1LivenessResponse: GetV1LivenessResponse,
): string {
  return JSON.stringify(
    GetV1LivenessResponse$outboundSchema.parse(getV1LivenessResponse),
  );
}

export function getV1LivenessResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1LivenessResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1LivenessResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1LivenessResponse' from JSON`,
  );
}
