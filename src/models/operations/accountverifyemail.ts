/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountVerifyEmailResponse = {
  httpMeta: components.HTTPMetadata;
};

/** @internal */
export const AccountVerifyEmailResponse$inboundSchema: z.ZodType<
  AccountVerifyEmailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type AccountVerifyEmailResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const AccountVerifyEmailResponse$outboundSchema: z.ZodType<
  AccountVerifyEmailResponse$Outbound,
  z.ZodTypeDef,
  AccountVerifyEmailResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountVerifyEmailResponse$ {
  /** @deprecated use `AccountVerifyEmailResponse$inboundSchema` instead. */
  export const inboundSchema = AccountVerifyEmailResponse$inboundSchema;
  /** @deprecated use `AccountVerifyEmailResponse$outboundSchema` instead. */
  export const outboundSchema = AccountVerifyEmailResponse$outboundSchema;
  /** @deprecated use `AccountVerifyEmailResponse$Outbound` instead. */
  export type Outbound = AccountVerifyEmailResponse$Outbound;
}

export function accountVerifyEmailResponseToJSON(
  accountVerifyEmailResponse: AccountVerifyEmailResponse,
): string {
  return JSON.stringify(
    AccountVerifyEmailResponse$outboundSchema.parse(accountVerifyEmailResponse),
  );
}

export function accountVerifyEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountVerifyEmailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountVerifyEmailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountVerifyEmailResponse' from JSON`,
  );
}
