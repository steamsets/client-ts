/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type LocationResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    regions?: Array<components.Region> | null | undefined;
};

/** @internal */
export const LocationResponse$inboundSchema: z.ZodType<LocationResponse, z.ZodTypeDef, unknown> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        Regions: z.nullable(z.array(components.Region$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            Regions: "regions",
        });
    });

/** @internal */
export type LocationResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    Regions?: Array<components.Region$Outbound> | null | undefined;
};

/** @internal */
export const LocationResponse$outboundSchema: z.ZodType<
    LocationResponse$Outbound,
    z.ZodTypeDef,
    LocationResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        regions: z.nullable(z.array(components.Region$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            regions: "Regions",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationResponse$ {
    /** @deprecated use `LocationResponse$inboundSchema` instead. */
    export const inboundSchema = LocationResponse$inboundSchema;
    /** @deprecated use `LocationResponse$outboundSchema` instead. */
    export const outboundSchema = LocationResponse$outboundSchema;
    /** @deprecated use `LocationResponse$Outbound` instead. */
    export type Outbound = LocationResponse$Outbound;
}
