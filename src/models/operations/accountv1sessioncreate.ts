/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountV1SessionCreateRequest = {
  userAgent?: string | undefined;
  xForwardedFor?: string | undefined;
  cfConnectingIP?: string | undefined;
  xFingerprint?: string | undefined;
  xSigned?: string | undefined;
};

export type AccountV1SessionCreateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1CreateSessionBody?: components.V1CreateSessionBody | undefined;
};

/** @internal */
export const AccountV1SessionCreateRequest$inboundSchema: z.ZodType<
  AccountV1SessionCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string().optional(),
  "X-Forwarded-For": z.string().optional(),
  "CF-Connecting-IP": z.string().optional(),
  "X-Fingerprint": z.string().optional(),
  "X-Signed": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
    "X-Forwarded-For": "xForwardedFor",
    "CF-Connecting-IP": "cfConnectingIP",
    "X-Fingerprint": "xFingerprint",
    "X-Signed": "xSigned",
  });
});

/** @internal */
export type AccountV1SessionCreateRequest$Outbound = {
  "User-Agent"?: string | undefined;
  "X-Forwarded-For"?: string | undefined;
  "CF-Connecting-IP"?: string | undefined;
  "X-Fingerprint"?: string | undefined;
  "X-Signed"?: string | undefined;
};

/** @internal */
export const AccountV1SessionCreateRequest$outboundSchema: z.ZodType<
  AccountV1SessionCreateRequest$Outbound,
  z.ZodTypeDef,
  AccountV1SessionCreateRequest
> = z.object({
  userAgent: z.string().optional(),
  xForwardedFor: z.string().optional(),
  cfConnectingIP: z.string().optional(),
  xFingerprint: z.string().optional(),
  xSigned: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
    xForwardedFor: "X-Forwarded-For",
    cfConnectingIP: "CF-Connecting-IP",
    xFingerprint: "X-Fingerprint",
    xSigned: "X-Signed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SessionCreateRequest$ {
  /** @deprecated use `AccountV1SessionCreateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountV1SessionCreateRequest$inboundSchema;
  /** @deprecated use `AccountV1SessionCreateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountV1SessionCreateRequest$outboundSchema;
  /** @deprecated use `AccountV1SessionCreateRequest$Outbound` instead. */
  export type Outbound = AccountV1SessionCreateRequest$Outbound;
}

export function accountV1SessionCreateRequestToJSON(
  accountV1SessionCreateRequest: AccountV1SessionCreateRequest,
): string {
  return JSON.stringify(
    AccountV1SessionCreateRequest$outboundSchema.parse(
      accountV1SessionCreateRequest,
    ),
  );
}

export function accountV1SessionCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SessionCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SessionCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SessionCreateRequest' from JSON`,
  );
}

/** @internal */
export const AccountV1SessionCreateResponse$inboundSchema: z.ZodType<
  AccountV1SessionCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1CreateSessionBody: components.V1CreateSessionBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1CreateSessionBody": "v1CreateSessionBody",
  });
});

/** @internal */
export type AccountV1SessionCreateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1CreateSessionBody?: components.V1CreateSessionBody$Outbound | undefined;
};

/** @internal */
export const AccountV1SessionCreateResponse$outboundSchema: z.ZodType<
  AccountV1SessionCreateResponse$Outbound,
  z.ZodTypeDef,
  AccountV1SessionCreateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1CreateSessionBody: components.V1CreateSessionBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1CreateSessionBody: "V1CreateSessionBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SessionCreateResponse$ {
  /** @deprecated use `AccountV1SessionCreateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountV1SessionCreateResponse$inboundSchema;
  /** @deprecated use `AccountV1SessionCreateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountV1SessionCreateResponse$outboundSchema;
  /** @deprecated use `AccountV1SessionCreateResponse$Outbound` instead. */
  export type Outbound = AccountV1SessionCreateResponse$Outbound;
}

export function accountV1SessionCreateResponseToJSON(
  accountV1SessionCreateResponse: AccountV1SessionCreateResponse,
): string {
  return JSON.stringify(
    AccountV1SessionCreateResponse$outboundSchema.parse(
      accountV1SessionCreateResponse,
    ),
  );
}

export function accountV1SessionCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SessionCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SessionCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SessionCreateResponse' from JSON`,
  );
}
