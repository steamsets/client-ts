/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountRefreshSessionRequest = {
  userAgent?: string | undefined;
  xForwardedFor?: string | undefined;
  v1AccountRefreshSessionRequestBody:
    components.V1AccountRefreshSessionRequestBody;
};

export type AccountRefreshSessionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1AccountRefreshSessionBody?:
    | components.V1AccountRefreshSessionBody
    | undefined;
};

/** @internal */
export const AccountRefreshSessionRequest$inboundSchema: z.ZodType<
  AccountRefreshSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string().optional(),
  "X-Forwarded-For": z.string().optional(),
  V1AccountRefreshSessionRequestBody:
    components.V1AccountRefreshSessionRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
    "X-Forwarded-For": "xForwardedFor",
    "V1AccountRefreshSessionRequestBody": "v1AccountRefreshSessionRequestBody",
  });
});

/** @internal */
export type AccountRefreshSessionRequest$Outbound = {
  "User-Agent"?: string | undefined;
  "X-Forwarded-For"?: string | undefined;
  V1AccountRefreshSessionRequestBody:
    components.V1AccountRefreshSessionRequestBody$Outbound;
};

/** @internal */
export const AccountRefreshSessionRequest$outboundSchema: z.ZodType<
  AccountRefreshSessionRequest$Outbound,
  z.ZodTypeDef,
  AccountRefreshSessionRequest
> = z.object({
  userAgent: z.string().optional(),
  xForwardedFor: z.string().optional(),
  v1AccountRefreshSessionRequestBody:
    components.V1AccountRefreshSessionRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
    xForwardedFor: "X-Forwarded-For",
    v1AccountRefreshSessionRequestBody: "V1AccountRefreshSessionRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountRefreshSessionRequest$ {
  /** @deprecated use `AccountRefreshSessionRequest$inboundSchema` instead. */
  export const inboundSchema = AccountRefreshSessionRequest$inboundSchema;
  /** @deprecated use `AccountRefreshSessionRequest$outboundSchema` instead. */
  export const outboundSchema = AccountRefreshSessionRequest$outboundSchema;
  /** @deprecated use `AccountRefreshSessionRequest$Outbound` instead. */
  export type Outbound = AccountRefreshSessionRequest$Outbound;
}

export function accountRefreshSessionRequestToJSON(
  accountRefreshSessionRequest: AccountRefreshSessionRequest,
): string {
  return JSON.stringify(
    AccountRefreshSessionRequest$outboundSchema.parse(
      accountRefreshSessionRequest,
    ),
  );
}

export function accountRefreshSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountRefreshSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountRefreshSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountRefreshSessionRequest' from JSON`,
  );
}

/** @internal */
export const AccountRefreshSessionResponse$inboundSchema: z.ZodType<
  AccountRefreshSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1AccountRefreshSessionBody: components
    .V1AccountRefreshSessionBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1AccountRefreshSessionBody": "v1AccountRefreshSessionBody",
  });
});

/** @internal */
export type AccountRefreshSessionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1AccountRefreshSessionBody?:
    | components.V1AccountRefreshSessionBody$Outbound
    | undefined;
};

/** @internal */
export const AccountRefreshSessionResponse$outboundSchema: z.ZodType<
  AccountRefreshSessionResponse$Outbound,
  z.ZodTypeDef,
  AccountRefreshSessionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1AccountRefreshSessionBody: components
    .V1AccountRefreshSessionBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1AccountRefreshSessionBody: "V1AccountRefreshSessionBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountRefreshSessionResponse$ {
  /** @deprecated use `AccountRefreshSessionResponse$inboundSchema` instead. */
  export const inboundSchema = AccountRefreshSessionResponse$inboundSchema;
  /** @deprecated use `AccountRefreshSessionResponse$outboundSchema` instead. */
  export const outboundSchema = AccountRefreshSessionResponse$outboundSchema;
  /** @deprecated use `AccountRefreshSessionResponse$Outbound` instead. */
  export type Outbound = AccountRefreshSessionResponse$Outbound;
}

export function accountRefreshSessionResponseToJSON(
  accountRefreshSessionResponse: AccountRefreshSessionResponse,
): string {
  return JSON.stringify(
    AccountRefreshSessionResponse$outboundSchema.parse(
      accountRefreshSessionResponse,
    ),
  );
}

export function accountRefreshSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountRefreshSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountRefreshSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountRefreshSessionResponse' from JSON`,
  );
}
