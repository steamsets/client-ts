/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StaffListStaffResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  leaderboardAccounts?:
    | Array<components.LeaderboardAccount | null>
    | null
    | undefined;
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const StaffListStaffResponse$inboundSchema: z.ZodType<
  StaffListStaffResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  LeaderboardAccounts: z.nullable(
    z.array(z.nullable(components.LeaderboardAccount$inboundSchema)),
  ).optional(),
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "LeaderboardAccounts": "leaderboardAccounts",
    "Headers": "headers",
  });
});

/** @internal */
export type StaffListStaffResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  LeaderboardAccounts?:
    | Array<components.LeaderboardAccount$Outbound | null>
    | null
    | undefined;
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const StaffListStaffResponse$outboundSchema: z.ZodType<
  StaffListStaffResponse$Outbound,
  z.ZodTypeDef,
  StaffListStaffResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  leaderboardAccounts: z.nullable(
    z.array(z.nullable(components.LeaderboardAccount$outboundSchema)),
  ).optional(),
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    leaderboardAccounts: "LeaderboardAccounts",
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaffListStaffResponse$ {
  /** @deprecated use `StaffListStaffResponse$inboundSchema` instead. */
  export const inboundSchema = StaffListStaffResponse$inboundSchema;
  /** @deprecated use `StaffListStaffResponse$outboundSchema` instead. */
  export const outboundSchema = StaffListStaffResponse$outboundSchema;
  /** @deprecated use `StaffListStaffResponse$Outbound` instead. */
  export type Outbound = StaffListStaffResponse$Outbound;
}

export function staffListStaffResponseToJSON(
  staffListStaffResponse: StaffListStaffResponse,
): string {
  return JSON.stringify(
    StaffListStaffResponse$outboundSchema.parse(staffListStaffResponse),
  );
}

export function staffListStaffResponseFromJSON(
  jsonString: string,
): SafeParseResult<StaffListStaffResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StaffListStaffResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StaffListStaffResponse' from JSON`,
  );
}
