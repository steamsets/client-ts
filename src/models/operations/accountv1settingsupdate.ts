/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountV1SettingsUpdateRequest = {
  xForwardedFor?: string | undefined;
  v1UpdateSettingsRequestBody: components.V1UpdateSettingsRequestBody;
};

export type AccountV1SettingsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1UpdateSettingsResponseBody?:
    | components.V1UpdateSettingsResponseBody
    | undefined;
};

/** @internal */
export const AccountV1SettingsUpdateRequest$inboundSchema: z.ZodType<
  AccountV1SettingsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Forwarded-For": z.string().optional(),
  V1UpdateSettingsRequestBody:
    components.V1UpdateSettingsRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Forwarded-For": "xForwardedFor",
    "V1UpdateSettingsRequestBody": "v1UpdateSettingsRequestBody",
  });
});

/** @internal */
export type AccountV1SettingsUpdateRequest$Outbound = {
  "X-Forwarded-For"?: string | undefined;
  V1UpdateSettingsRequestBody: components.V1UpdateSettingsRequestBody$Outbound;
};

/** @internal */
export const AccountV1SettingsUpdateRequest$outboundSchema: z.ZodType<
  AccountV1SettingsUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountV1SettingsUpdateRequest
> = z.object({
  xForwardedFor: z.string().optional(),
  v1UpdateSettingsRequestBody:
    components.V1UpdateSettingsRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xForwardedFor: "X-Forwarded-For",
    v1UpdateSettingsRequestBody: "V1UpdateSettingsRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsUpdateRequest$ {
  /** @deprecated use `AccountV1SettingsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountV1SettingsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountV1SettingsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountV1SettingsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountV1SettingsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountV1SettingsUpdateRequest$Outbound;
}

export function accountV1SettingsUpdateRequestToJSON(
  accountV1SettingsUpdateRequest: AccountV1SettingsUpdateRequest,
): string {
  return JSON.stringify(
    AccountV1SettingsUpdateRequest$outboundSchema.parse(
      accountV1SettingsUpdateRequest,
    ),
  );
}

export function accountV1SettingsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SettingsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SettingsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SettingsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AccountV1SettingsUpdateResponse$inboundSchema: z.ZodType<
  AccountV1SettingsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1UpdateSettingsResponseBody: components
    .V1UpdateSettingsResponseBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1UpdateSettingsResponseBody": "v1UpdateSettingsResponseBody",
  });
});

/** @internal */
export type AccountV1SettingsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1UpdateSettingsResponseBody?:
    | components.V1UpdateSettingsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const AccountV1SettingsUpdateResponse$outboundSchema: z.ZodType<
  AccountV1SettingsUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountV1SettingsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1UpdateSettingsResponseBody: components
    .V1UpdateSettingsResponseBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1UpdateSettingsResponseBody: "V1UpdateSettingsResponseBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsUpdateResponse$ {
  /** @deprecated use `AccountV1SettingsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountV1SettingsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountV1SettingsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountV1SettingsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountV1SettingsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountV1SettingsUpdateResponse$Outbound;
}

export function accountV1SettingsUpdateResponseToJSON(
  accountV1SettingsUpdateResponse: AccountV1SettingsUpdateResponse,
): string {
  return JSON.stringify(
    AccountV1SettingsUpdateResponse$outboundSchema.parse(
      accountV1SettingsUpdateResponse,
    ),
  );
}

export function accountV1SettingsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SettingsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountV1SettingsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SettingsUpdateResponse' from JSON`,
  );
}
