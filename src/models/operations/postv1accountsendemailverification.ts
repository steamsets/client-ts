/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1AccountSendEmailVerificationRequest = {
  xForwardedFor?: string | undefined;
};

export type PostV1AccountSendEmailVerificationResponse = {
  httpMeta: components.HTTPMetadata;
};

/** @internal */
export const PostV1AccountSendEmailVerificationRequest$inboundSchema: z.ZodType<
  PostV1AccountSendEmailVerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Forwarded-For": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Forwarded-For": "xForwardedFor",
  });
});

/** @internal */
export type PostV1AccountSendEmailVerificationRequest$Outbound = {
  "X-Forwarded-For"?: string | undefined;
};

/** @internal */
export const PostV1AccountSendEmailVerificationRequest$outboundSchema:
  z.ZodType<
    PostV1AccountSendEmailVerificationRequest$Outbound,
    z.ZodTypeDef,
    PostV1AccountSendEmailVerificationRequest
  > = z.object({
    xForwardedFor: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      xForwardedFor: "X-Forwarded-For",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountSendEmailVerificationRequest$ {
  /** @deprecated use `PostV1AccountSendEmailVerificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1AccountSendEmailVerificationRequest$inboundSchema;
  /** @deprecated use `PostV1AccountSendEmailVerificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1AccountSendEmailVerificationRequest$outboundSchema;
  /** @deprecated use `PostV1AccountSendEmailVerificationRequest$Outbound` instead. */
  export type Outbound = PostV1AccountSendEmailVerificationRequest$Outbound;
}

export function postV1AccountSendEmailVerificationRequestToJSON(
  postV1AccountSendEmailVerificationRequest:
    PostV1AccountSendEmailVerificationRequest,
): string {
  return JSON.stringify(
    PostV1AccountSendEmailVerificationRequest$outboundSchema.parse(
      postV1AccountSendEmailVerificationRequest,
    ),
  );
}

export function postV1AccountSendEmailVerificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1AccountSendEmailVerificationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1AccountSendEmailVerificationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1AccountSendEmailVerificationRequest' from JSON`,
  );
}

/** @internal */
export const PostV1AccountSendEmailVerificationResponse$inboundSchema:
  z.ZodType<PostV1AccountSendEmailVerificationResponse, z.ZodTypeDef, unknown> =
    z.object({
      HttpMeta: components.HTTPMetadata$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "HttpMeta": "httpMeta",
      });
    });

/** @internal */
export type PostV1AccountSendEmailVerificationResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const PostV1AccountSendEmailVerificationResponse$outboundSchema:
  z.ZodType<
    PostV1AccountSendEmailVerificationResponse$Outbound,
    z.ZodTypeDef,
    PostV1AccountSendEmailVerificationResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountSendEmailVerificationResponse$ {
  /** @deprecated use `PostV1AccountSendEmailVerificationResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1AccountSendEmailVerificationResponse$inboundSchema;
  /** @deprecated use `PostV1AccountSendEmailVerificationResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1AccountSendEmailVerificationResponse$outboundSchema;
  /** @deprecated use `PostV1AccountSendEmailVerificationResponse$Outbound` instead. */
  export type Outbound = PostV1AccountSendEmailVerificationResponse$Outbound;
}

export function postV1AccountSendEmailVerificationResponseToJSON(
  postV1AccountSendEmailVerificationResponse:
    PostV1AccountSendEmailVerificationResponse,
): string {
  return JSON.stringify(
    PostV1AccountSendEmailVerificationResponse$outboundSchema.parse(
      postV1AccountSendEmailVerificationResponse,
    ),
  );
}

export function postV1AccountSendEmailVerificationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1AccountSendEmailVerificationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1AccountSendEmailVerificationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1AccountSendEmailVerificationResponse' from JSON`,
  );
}
