/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListV1LocationGetLocationsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  regions?: Array<components.Region> | null | undefined;
};

/** @internal */
export const ListV1LocationGetLocationsResponse$inboundSchema: z.ZodType<
  ListV1LocationGetLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Regions: z.nullable(z.array(components.Region$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Regions": "regions",
  });
});

/** @internal */
export type ListV1LocationGetLocationsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Regions?: Array<components.Region$Outbound> | null | undefined;
};

/** @internal */
export const ListV1LocationGetLocationsResponse$outboundSchema: z.ZodType<
  ListV1LocationGetLocationsResponse$Outbound,
  z.ZodTypeDef,
  ListV1LocationGetLocationsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  regions: z.nullable(z.array(components.Region$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    regions: "Regions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListV1LocationGetLocationsResponse$ {
  /** @deprecated use `ListV1LocationGetLocationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListV1LocationGetLocationsResponse$inboundSchema;
  /** @deprecated use `ListV1LocationGetLocationsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListV1LocationGetLocationsResponse$outboundSchema;
  /** @deprecated use `ListV1LocationGetLocationsResponse$Outbound` instead. */
  export type Outbound = ListV1LocationGetLocationsResponse$Outbound;
}

export function listV1LocationGetLocationsResponseToJSON(
  listV1LocationGetLocationsResponse: ListV1LocationGetLocationsResponse,
): string {
  return JSON.stringify(
    ListV1LocationGetLocationsResponse$outboundSchema.parse(
      listV1LocationGetLocationsResponse,
    ),
  );
}

export function listV1LocationGetLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListV1LocationGetLocationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListV1LocationGetLocationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListV1LocationGetLocationsResponse' from JSON`,
  );
}
