/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1AccountLoginRequest = {
  userAgent?: string | undefined;
  xForwardedFor?: string | undefined;
  loginRequestBody: components.LoginRequestBody;
};

export type PostV1AccountLoginResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1LoginResponseBody?: components.V1LoginResponseBody | undefined;
};

/** @internal */
export const PostV1AccountLoginRequest$inboundSchema: z.ZodType<
  PostV1AccountLoginRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string().optional(),
  "X-Forwarded-For": z.string().optional(),
  LoginRequestBody: components.LoginRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
    "X-Forwarded-For": "xForwardedFor",
    "LoginRequestBody": "loginRequestBody",
  });
});

/** @internal */
export type PostV1AccountLoginRequest$Outbound = {
  "User-Agent"?: string | undefined;
  "X-Forwarded-For"?: string | undefined;
  LoginRequestBody: components.LoginRequestBody$Outbound;
};

/** @internal */
export const PostV1AccountLoginRequest$outboundSchema: z.ZodType<
  PostV1AccountLoginRequest$Outbound,
  z.ZodTypeDef,
  PostV1AccountLoginRequest
> = z.object({
  userAgent: z.string().optional(),
  xForwardedFor: z.string().optional(),
  loginRequestBody: components.LoginRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
    xForwardedFor: "X-Forwarded-For",
    loginRequestBody: "LoginRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountLoginRequest$ {
  /** @deprecated use `PostV1AccountLoginRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1AccountLoginRequest$inboundSchema;
  /** @deprecated use `PostV1AccountLoginRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1AccountLoginRequest$outboundSchema;
  /** @deprecated use `PostV1AccountLoginRequest$Outbound` instead. */
  export type Outbound = PostV1AccountLoginRequest$Outbound;
}

export function postV1AccountLoginRequestToJSON(
  postV1AccountLoginRequest: PostV1AccountLoginRequest,
): string {
  return JSON.stringify(
    PostV1AccountLoginRequest$outboundSchema.parse(postV1AccountLoginRequest),
  );
}

export function postV1AccountLoginRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1AccountLoginRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1AccountLoginRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1AccountLoginRequest' from JSON`,
  );
}

/** @internal */
export const PostV1AccountLoginResponse$inboundSchema: z.ZodType<
  PostV1AccountLoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1LoginResponseBody: components.V1LoginResponseBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1LoginResponseBody": "v1LoginResponseBody",
  });
});

/** @internal */
export type PostV1AccountLoginResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1LoginResponseBody?: components.V1LoginResponseBody$Outbound | undefined;
};

/** @internal */
export const PostV1AccountLoginResponse$outboundSchema: z.ZodType<
  PostV1AccountLoginResponse$Outbound,
  z.ZodTypeDef,
  PostV1AccountLoginResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1LoginResponseBody: components.V1LoginResponseBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1LoginResponseBody: "V1LoginResponseBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountLoginResponse$ {
  /** @deprecated use `PostV1AccountLoginResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1AccountLoginResponse$inboundSchema;
  /** @deprecated use `PostV1AccountLoginResponse$outboundSchema` instead. */
  export const outboundSchema = PostV1AccountLoginResponse$outboundSchema;
  /** @deprecated use `PostV1AccountLoginResponse$Outbound` instead. */
  export type Outbound = PostV1AccountLoginResponse$Outbound;
}

export function postV1AccountLoginResponseToJSON(
  postV1AccountLoginResponse: PostV1AccountLoginResponse,
): string {
  return JSON.stringify(
    PostV1AccountLoginResponse$outboundSchema.parse(postV1AccountLoginResponse),
  );
}

export function postV1AccountLoginResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1AccountLoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1AccountLoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1AccountLoginResponse' from JSON`,
  );
}
