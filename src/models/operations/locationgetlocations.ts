/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LocationGetLocationsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  regions?: Array<components.Region> | null | undefined;
};

/** @internal */
export const LocationGetLocationsResponse$inboundSchema: z.ZodType<
  LocationGetLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Regions: z.nullable(z.array(components.Region$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Regions": "regions",
  });
});

/** @internal */
export type LocationGetLocationsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Regions?: Array<components.Region$Outbound> | null | undefined;
};

/** @internal */
export const LocationGetLocationsResponse$outboundSchema: z.ZodType<
  LocationGetLocationsResponse$Outbound,
  z.ZodTypeDef,
  LocationGetLocationsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  regions: z.nullable(z.array(components.Region$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    regions: "Regions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationGetLocationsResponse$ {
  /** @deprecated use `LocationGetLocationsResponse$inboundSchema` instead. */
  export const inboundSchema = LocationGetLocationsResponse$inboundSchema;
  /** @deprecated use `LocationGetLocationsResponse$outboundSchema` instead. */
  export const outboundSchema = LocationGetLocationsResponse$outboundSchema;
  /** @deprecated use `LocationGetLocationsResponse$Outbound` instead. */
  export type Outbound = LocationGetLocationsResponse$Outbound;
}

export function locationGetLocationsResponseToJSON(
  locationGetLocationsResponse: LocationGetLocationsResponse,
): string {
  return JSON.stringify(
    LocationGetLocationsResponse$outboundSchema.parse(
      locationGetLocationsResponse,
    ),
  );
}

export function locationGetLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<LocationGetLocationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationGetLocationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationGetLocationsResponse' from JSON`,
  );
}
