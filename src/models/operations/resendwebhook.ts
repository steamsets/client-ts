/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResendWebhookRequest = {
  webhookId?: string | undefined;
  webhookTimestamp?: string | undefined;
  webhookSignature?: string | undefined;
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type ResendWebhookResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Error
   */
  errorModel?: components.ErrorModel | undefined;
};

/** @internal */
export const ResendWebhookRequest$inboundSchema: z.ZodType<
  ResendWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "webhook-id": z.string().optional(),
  "webhook-timestamp": z.string().optional(),
  "webhook-signature": z.string().optional(),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "webhook-id": "webhookId",
    "webhook-timestamp": "webhookTimestamp",
    "webhook-signature": "webhookSignature",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ResendWebhookRequest$Outbound = {
  "webhook-id"?: string | undefined;
  "webhook-timestamp"?: string | undefined;
  "webhook-signature"?: string | undefined;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const ResendWebhookRequest$outboundSchema: z.ZodType<
  ResendWebhookRequest$Outbound,
  z.ZodTypeDef,
  ResendWebhookRequest
> = z.object({
  webhookId: z.string().optional(),
  webhookTimestamp: z.string().optional(),
  webhookSignature: z.string().optional(),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook-id",
    webhookTimestamp: "webhook-timestamp",
    webhookSignature: "webhook-signature",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResendWebhookRequest$ {
  /** @deprecated use `ResendWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = ResendWebhookRequest$inboundSchema;
  /** @deprecated use `ResendWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = ResendWebhookRequest$outboundSchema;
  /** @deprecated use `ResendWebhookRequest$Outbound` instead. */
  export type Outbound = ResendWebhookRequest$Outbound;
}

export function resendWebhookRequestToJSON(
  resendWebhookRequest: ResendWebhookRequest,
): string {
  return JSON.stringify(
    ResendWebhookRequest$outboundSchema.parse(resendWebhookRequest),
  );
}

export function resendWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResendWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResendWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResendWebhookRequest' from JSON`,
  );
}

/** @internal */
export const ResendWebhookResponse$inboundSchema: z.ZodType<
  ResendWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ErrorModel: components.ErrorModel$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ErrorModel": "errorModel",
  });
});

/** @internal */
export type ResendWebhookResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ErrorModel?: components.ErrorModel$Outbound | undefined;
};

/** @internal */
export const ResendWebhookResponse$outboundSchema: z.ZodType<
  ResendWebhookResponse$Outbound,
  z.ZodTypeDef,
  ResendWebhookResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  errorModel: components.ErrorModel$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    errorModel: "ErrorModel",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResendWebhookResponse$ {
  /** @deprecated use `ResendWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = ResendWebhookResponse$inboundSchema;
  /** @deprecated use `ResendWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = ResendWebhookResponse$outboundSchema;
  /** @deprecated use `ResendWebhookResponse$Outbound` instead. */
  export type Outbound = ResendWebhookResponse$Outbound;
}

export function resendWebhookResponseToJSON(
  resendWebhookResponse: ResendWebhookResponse,
): string {
  return JSON.stringify(
    ResendWebhookResponse$outboundSchema.parse(resendWebhookResponse),
  );
}

export function resendWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResendWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResendWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResendWebhookResponse' from JSON`,
  );
}
