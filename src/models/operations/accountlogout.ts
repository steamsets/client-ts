/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountLogoutResponse = {
  httpMeta: components.HTTPMetadata;
};

/** @internal */
export const AccountLogoutResponse$inboundSchema: z.ZodType<
  AccountLogoutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type AccountLogoutResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const AccountLogoutResponse$outboundSchema: z.ZodType<
  AccountLogoutResponse$Outbound,
  z.ZodTypeDef,
  AccountLogoutResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountLogoutResponse$ {
  /** @deprecated use `AccountLogoutResponse$inboundSchema` instead. */
  export const inboundSchema = AccountLogoutResponse$inboundSchema;
  /** @deprecated use `AccountLogoutResponse$outboundSchema` instead. */
  export const outboundSchema = AccountLogoutResponse$outboundSchema;
  /** @deprecated use `AccountLogoutResponse$Outbound` instead. */
  export type Outbound = AccountLogoutResponse$Outbound;
}

export function accountLogoutResponseToJSON(
  accountLogoutResponse: AccountLogoutResponse,
): string {
  return JSON.stringify(
    AccountLogoutResponse$outboundSchema.parse(accountLogoutResponse),
  );
}

export function accountLogoutResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountLogoutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountLogoutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountLogoutResponse' from JSON`,
  );
}
