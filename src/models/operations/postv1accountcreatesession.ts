/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1AccountCreateSessionRequest = {
  userAgent?: string | undefined;
  xForwardedFor?: string | undefined;
  cfConnectingIP?: string | undefined;
  xFingerprint?: string | undefined;
  xSigned?: string | undefined;
};

export type PostV1AccountCreateSessionResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * OK
   */
  v1AccountCreateSessionBody?:
    | components.V1AccountCreateSessionBody
    | undefined;
};

/** @internal */
export const PostV1AccountCreateSessionRequest$inboundSchema: z.ZodType<
  PostV1AccountCreateSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string().optional(),
  "X-Forwarded-For": z.string().optional(),
  "CF-Connecting-IP": z.string().optional(),
  "X-Fingerprint": z.string().optional(),
  "X-Signed": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
    "X-Forwarded-For": "xForwardedFor",
    "CF-Connecting-IP": "cfConnectingIP",
    "X-Fingerprint": "xFingerprint",
    "X-Signed": "xSigned",
  });
});

/** @internal */
export type PostV1AccountCreateSessionRequest$Outbound = {
  "User-Agent"?: string | undefined;
  "X-Forwarded-For"?: string | undefined;
  "CF-Connecting-IP"?: string | undefined;
  "X-Fingerprint"?: string | undefined;
  "X-Signed"?: string | undefined;
};

/** @internal */
export const PostV1AccountCreateSessionRequest$outboundSchema: z.ZodType<
  PostV1AccountCreateSessionRequest$Outbound,
  z.ZodTypeDef,
  PostV1AccountCreateSessionRequest
> = z.object({
  userAgent: z.string().optional(),
  xForwardedFor: z.string().optional(),
  cfConnectingIP: z.string().optional(),
  xFingerprint: z.string().optional(),
  xSigned: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
    xForwardedFor: "X-Forwarded-For",
    cfConnectingIP: "CF-Connecting-IP",
    xFingerprint: "X-Fingerprint",
    xSigned: "X-Signed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountCreateSessionRequest$ {
  /** @deprecated use `PostV1AccountCreateSessionRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1AccountCreateSessionRequest$inboundSchema;
  /** @deprecated use `PostV1AccountCreateSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1AccountCreateSessionRequest$outboundSchema;
  /** @deprecated use `PostV1AccountCreateSessionRequest$Outbound` instead. */
  export type Outbound = PostV1AccountCreateSessionRequest$Outbound;
}

export function postV1AccountCreateSessionRequestToJSON(
  postV1AccountCreateSessionRequest: PostV1AccountCreateSessionRequest,
): string {
  return JSON.stringify(
    PostV1AccountCreateSessionRequest$outboundSchema.parse(
      postV1AccountCreateSessionRequest,
    ),
  );
}

export function postV1AccountCreateSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1AccountCreateSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1AccountCreateSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1AccountCreateSessionRequest' from JSON`,
  );
}

/** @internal */
export const PostV1AccountCreateSessionResponse$inboundSchema: z.ZodType<
  PostV1AccountCreateSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V1AccountCreateSessionBody: components
    .V1AccountCreateSessionBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V1AccountCreateSessionBody": "v1AccountCreateSessionBody",
  });
});

/** @internal */
export type PostV1AccountCreateSessionResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V1AccountCreateSessionBody?:
    | components.V1AccountCreateSessionBody$Outbound
    | undefined;
};

/** @internal */
export const PostV1AccountCreateSessionResponse$outboundSchema: z.ZodType<
  PostV1AccountCreateSessionResponse$Outbound,
  z.ZodTypeDef,
  PostV1AccountCreateSessionResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v1AccountCreateSessionBody: components
    .V1AccountCreateSessionBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v1AccountCreateSessionBody: "V1AccountCreateSessionBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1AccountCreateSessionResponse$ {
  /** @deprecated use `PostV1AccountCreateSessionResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1AccountCreateSessionResponse$inboundSchema;
  /** @deprecated use `PostV1AccountCreateSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1AccountCreateSessionResponse$outboundSchema;
  /** @deprecated use `PostV1AccountCreateSessionResponse$Outbound` instead. */
  export type Outbound = PostV1AccountCreateSessionResponse$Outbound;
}

export function postV1AccountCreateSessionResponseToJSON(
  postV1AccountCreateSessionResponse: PostV1AccountCreateSessionResponse,
): string {
  return JSON.stringify(
    PostV1AccountCreateSessionResponse$outboundSchema.parse(
      postV1AccountCreateSessionResponse,
    ),
  );
}

export function postV1AccountCreateSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1AccountCreateSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1AccountCreateSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1AccountCreateSessionResponse' from JSON`,
  );
}
