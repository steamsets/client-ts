/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountV1SettingsEmailSubscribeRequest = {
  xForwardedFor?: string | undefined;
  v1EmailSubscriptionRequestBody: components.V1EmailSubscriptionRequestBody;
};

export type AccountV1SettingsEmailSubscribeResponse = {
  httpMeta: components.HTTPMetadata;
};

/** @internal */
export const AccountV1SettingsEmailSubscribeRequest$inboundSchema: z.ZodType<
  AccountV1SettingsEmailSubscribeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Forwarded-For": z.string().optional(),
  V1EmailSubscriptionRequestBody:
    components.V1EmailSubscriptionRequestBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Forwarded-For": "xForwardedFor",
    "V1EmailSubscriptionRequestBody": "v1EmailSubscriptionRequestBody",
  });
});

/** @internal */
export type AccountV1SettingsEmailSubscribeRequest$Outbound = {
  "X-Forwarded-For"?: string | undefined;
  V1EmailSubscriptionRequestBody:
    components.V1EmailSubscriptionRequestBody$Outbound;
};

/** @internal */
export const AccountV1SettingsEmailSubscribeRequest$outboundSchema: z.ZodType<
  AccountV1SettingsEmailSubscribeRequest$Outbound,
  z.ZodTypeDef,
  AccountV1SettingsEmailSubscribeRequest
> = z.object({
  xForwardedFor: z.string().optional(),
  v1EmailSubscriptionRequestBody:
    components.V1EmailSubscriptionRequestBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xForwardedFor: "X-Forwarded-For",
    v1EmailSubscriptionRequestBody: "V1EmailSubscriptionRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsEmailSubscribeRequest$ {
  /** @deprecated use `AccountV1SettingsEmailSubscribeRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountV1SettingsEmailSubscribeRequest$inboundSchema;
  /** @deprecated use `AccountV1SettingsEmailSubscribeRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountV1SettingsEmailSubscribeRequest$outboundSchema;
  /** @deprecated use `AccountV1SettingsEmailSubscribeRequest$Outbound` instead. */
  export type Outbound = AccountV1SettingsEmailSubscribeRequest$Outbound;
}

export function accountV1SettingsEmailSubscribeRequestToJSON(
  accountV1SettingsEmailSubscribeRequest:
    AccountV1SettingsEmailSubscribeRequest,
): string {
  return JSON.stringify(
    AccountV1SettingsEmailSubscribeRequest$outboundSchema.parse(
      accountV1SettingsEmailSubscribeRequest,
    ),
  );
}

export function accountV1SettingsEmailSubscribeRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountV1SettingsEmailSubscribeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountV1SettingsEmailSubscribeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountV1SettingsEmailSubscribeRequest' from JSON`,
  );
}

/** @internal */
export const AccountV1SettingsEmailSubscribeResponse$inboundSchema: z.ZodType<
  AccountV1SettingsEmailSubscribeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type AccountV1SettingsEmailSubscribeResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const AccountV1SettingsEmailSubscribeResponse$outboundSchema: z.ZodType<
  AccountV1SettingsEmailSubscribeResponse$Outbound,
  z.ZodTypeDef,
  AccountV1SettingsEmailSubscribeResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountV1SettingsEmailSubscribeResponse$ {
  /** @deprecated use `AccountV1SettingsEmailSubscribeResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountV1SettingsEmailSubscribeResponse$inboundSchema;
  /** @deprecated use `AccountV1SettingsEmailSubscribeResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountV1SettingsEmailSubscribeResponse$outboundSchema;
  /** @deprecated use `AccountV1SettingsEmailSubscribeResponse$Outbound` instead. */
  export type Outbound = AccountV1SettingsEmailSubscribeResponse$Outbound;
}

export function accountV1SettingsEmailSubscribeResponseToJSON(
  accountV1SettingsEmailSubscribeResponse:
    AccountV1SettingsEmailSubscribeResponse,
): string {
  return JSON.stringify(
    AccountV1SettingsEmailSubscribeResponse$outboundSchema.parse(
      accountV1SettingsEmailSubscribeResponse,
    ),
  );
}

export function accountV1SettingsEmailSubscribeResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountV1SettingsEmailSubscribeResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountV1SettingsEmailSubscribeResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountV1SettingsEmailSubscribeResponse' from JSON`,
  );
}
