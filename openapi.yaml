components:
  schemas:
    AccountBadgeMostXpDataPoint:
      additionalProperties: false
      properties:
        appId:
          description: The app id
          example: 123456
          format: int32
          minimum: 0
          type: integer
        badgeCompletedAt:
          description: The badge completed at
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        badgeId:
          description: The badge id
          example: "123456"
          type: string
        badgeImage:
          description: The badge image
          example: steamsets
          type: string
        badgeIsFoil:
          description: Whether the badge is foil
          example: true
          type: boolean
        badgeLevel:
          description: The badge level
          example: 123456
          format: int32
          minimum: 0
          type: integer
        badgeName:
          description: The badge name
          example: steamsets
          type: string
        badgeScarcity:
          description: The badge scarcity
          example: 123456
          format: int32
          type: integer
        badgeSteamID:
          description: The badge steam id
          example: 123456
          format: int32
          type: integer
        badgeXP:
          description: The badge xp
          example: 123456
          format: int32
          type: integer
        image:
          description: The image of the app
          example: steamsets
          type: string
        name:
          description: The name of the app
          example: steamsets
          type: string
      required:
        - appId
        - name
        - image
        - badgeScarcity
        - badgeId
        - badgeName
        - badgeImage
        - badgeIsFoil
        - badgeXP
        - badgeLevel
        - badgeSteamID
        - badgeCompletedAt
      type: object
    AccountBadgeScarcityDataPoint:
      additionalProperties: false
      properties:
        appId:
          description: The app id
          example: 730
          format: int32
          minimum: 0
          type: integer
        badgeId:
          description: The badge id
          example: bdg_123
          type: string
        badgeImage:
          description: The badge image
          example: someHash.idk
          type: string
        badgeIsFoil:
          description: Whether the badge is foil
          example: true
          type: boolean
        badgeLevel:
          description: The badge level
          example: 15
          format: int32
          minimum: 0
          type: integer
        badgeName:
          description: The badge name
          example: Sommer Sale 2024 Foil 1+
          type: string
        badgeScarcity:
          description: The badge scarcity
          example: 15
          format: int32
          type: integer
        image:
          description: The image of the app
          example: someHash.idk
          type: string
        name:
          description: The name of the app
          example: CS2
          type: string
      required:
        - appId
        - name
        - image
        - badgeScarcity
        - badgeId
        - badgeName
        - badgeImage
        - badgeIsFoil
        - badgeLevel
      type: object
    AccountInfoBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/AccountInfoBody.json
          format: uri
          readOnly: true
          type: string
        accountId:
          description: The account id
          example: 123456
          format: int32
          minimum: 0
          type: integer
        animatedAvatar:
          description: The animated avatar of the account
          example: steamsets
          type: string
        appCost:
          description: The cost of an app
          example: 123456
          format: int32
          type: integer
        appPrivacy:
          description: The privacy of the account
          enum:
            - private
            - public
            - friends_only
          example: public
          type: string
        apps:
          description: The number of apps the account has
          example: 123456
          format: int32
          type: integer
        appsUpdatedAt:
          description: The time the apps were updated
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        avatar:
          description: The avatar hash of the account
          example: f1a1d2c3d0c9d1e1f2f3f4f5f6f7f8f9
          type: string
        avatarFrame:
          description: The avatar frame of the account
          example: steamsets
          type: string
        averagePlaytime:
          description: The average playtime of the account
          example: 123456
          format: int32
          type: integer
        awardsGiven:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        awardsReceived:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        background:
          description: The background of the account
          example: steamsets
          type: string
        badges:
          description: The number of badges the account has
          example: 123456
          format: int32
          type: integer
        badgesUpdatedAt:
          description: The time the badges were updated
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        bans:
          description: The number of bans
          format: int32
          type: integer
        city:
          $ref: "#/components/schemas/Location"
          description: The city of the account
        connections:
          description: The connections of the account
          items:
            $ref: "#/components/schemas/Connection"
          nullable: true
          type: array
        country:
          $ref: "#/components/schemas/Location"
          description: The country of the account
        createdAt:
          description: The time the account was created
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        currentBestRanks:
          description: The current best ranks
          items:
            $ref: "#/components/schemas/BestLeaderboardRank"
          nullable: true
          type: array
        currentRanks:
          description: The current ranks
          items:
            $ref: "#/components/schemas/BestLeaderboardRank"
          nullable: true
          type: array
        economyBan:
          description: The economy ban of the account
          example: steam
          type: string
        foilBadgeCost:
          description: The cost of a foil badge
          example: 123456
          format: int32
          type: integer
        foilBadges:
          description: The number of foil badges the account has
          example: 123456
          format: int32
          type: integer
        friendPrivacy:
          description: The privacy of the account
          enum:
            - private
            - public
            - friends_only
          example: public
          type: string
        friends:
          description: The number of friends the account has
          example: 123456
          format: int32
          type: integer
        friendsUpdatedAt:
          description: The time the friends were updated
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        gameBans:
          description: The number of game bans
          format: int32
          type: integer
        hidden:
          description: Whether the account is hidden in the leaderboards
          example: true
          type: boolean
        images:
          description: The images of the account
          items:
            $ref: "#/components/schemas/Image"
          nullable: true
          type: array
        level:
          description: The level of the account
          example: 123456
          format: int32
          type: integer
        limitedApps:
          description: The number of limited apps the account has
          example: 123456
          format: int32
          type: integer
        miniBackground:
          description: The mini background of the account
          example: steamsets
          type: string
        name:
          description: The name of the account
          example: steamsets
          type: string
        normalBadgeCost:
          description: The cost of a normal badge
          example: 123456
          format: int32
          type: integer
        normalBadges:
          description: The number of normal badges the account has
          example: 123456
          format: int32
          type: integer
        playtime:
          description: The playtime of the account
          example: 123456
          format: int32
          type: integer
        pointsGiven:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        pointsReceived:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        privacy:
          description: The privacy of the account
          enum:
            - private
            - public
            - friends_only
          example: public
          type: string
        region:
          $ref: "#/components/schemas/Location"
          description: The region of the account
        roles:
          description: The roles of the account
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
          type: array
        state:
          $ref: "#/components/schemas/Location"
          description: The state of the account
        steamId:
          description: The steam id
          example: "76561198842603734"
          type: string
        steamSetsScore:
          description: The steam sets score
          format: int32
          type: integer
        steamSetsVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        steamVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        theme:
          description: The theme of the account
          example: steamsets
          type: string
        updatedAt:
          description: The time the account was updated
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        vacBans:
          description: The number of vac bans
          format: int32
          type: integer
        xp:
          description: The number of xp the account has
          example: 123456
          format: int32
          type: integer
      required:
        - accountId
        - steamId
        - name
        - avatar
        - createdAt
        - steamVanity
        - steamSetsVanity
        - hidden
        - privacy
        - appPrivacy
        - friendPrivacy
        - theme
        - background
        - miniBackground
        - animatedAvatar
        - avatarFrame
        - apps
        - limitedApps
        - playtime
        - averagePlaytime
        - friends
        - badges
        - normalBadges
        - foilBadges
        - awardsGiven
        - awardsReceived
        - pointsGiven
        - pointsReceived
        - xp
        - level
        - steamSetsScore
        - vacBans
        - gameBans
        - bans
        - economyBan
        - foilBadgeCost
        - normalBadgeCost
        - appCost
        - updatedAt
        - appsUpdatedAt
        - friendsUpdatedAt
        - badgesUpdatedAt
        - currentBestRanks
        - currentRanks
        - roles
        - connections
        - images
      type: object
    AccountLeaderboardHistory:
      additionalProperties: false
      properties:
        date:
          format: date-time
          type: string
        leaderboard:
          enum:
            - apps
            - limited_apps
            - awards_given
            - awards_received
            - bans
            - game_bans
            - vac_bans
            - foil_badges
            - normal_badges
            - badges
            - playtime
            - points_given
            - points_received
            - steam_sets
            - xp
          type: string
        rank:
          format: int32
          type: integer
        score:
          format: int32
          type: integer
      required:
        - date
        - rank
        - score
        - leaderboard
      type: object
    AccountPlaytimeDataPoint:
      additionalProperties: false
      properties:
        appId:
          description: The app id
          example: 730
          format: int32
          minimum: 0
          type: integer
        image:
          description: The image of the app
          example: someHash.idk
          type: string
        name:
          description: The name of the app
          example: CS2
          type: string
        playtime:
          description: The playtime of the app
          example: 15
          format: int32
          minimum: 0
          type: integer
      required:
        - appId
        - name
        - image
        - playtime
      type: object
    AccountSearch:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/AccountSearch.json
          format: uri
          readOnly: true
          type: string
        id:
          $ref: "#/components/schemas/AccountSearchIDStruct"
        vanity:
          $ref: "#/components/schemas/AccountSearchVanityStruct"
      type: object
    AccountSearchIDStruct:
      additionalProperties: false
      properties:
        accountId:
          description: Account ID to search for
          format: int32
          minLength: 7
          minimum: 0
          type: integer
        steamId64:
          description: SteamID64 to search for
          maxLength: 17
          minLength: 17
          type: string
      type: object
    AccountSearchVanityStruct:
      additionalProperties: false
      properties:
        type:
          description: Which type of vanity to search for
          enum:
            - steam
            - internal
          type: string
        value:
          description: Vanity to search for
          minLength: 2
          pattern: ^[a-zA-Z0-9]+$
          type: string
      required:
        - value
        - type
      type: object
    AppSearch:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/AppSearch.json
          format: uri
          readOnly: true
          type: string
        id:
          description: The app id to search for
          example: 730
          format: int32
          minimum: 0
          type: integer
      required:
        - id
      type: object
    BestLeaderboardRank:
      additionalProperties: false
      properties:
        leaderboard:
          description: The leaderboard of the best leaderboard
          enum:
            - apps
            - limited_apps
            - app_playtime
            - awards_given
            - awards_received
            - bans
            - game_bans
            - vac_bans
            - donations
            - foil_badges
            - normal_badges
            - badges
            - playtime
            - points_given
            - points_received
            - steam_sets
            - xp
          type: string
        ranks:
          description: The ranks in the leaderboard in csv global,regional,country,state,city
          example: 1,1,1,1,1
          type: string
      required:
        - ranks
        - leaderboard
      type: object
    City:
      additionalProperties: false
      properties:
        name:
          description: The name of the city
          type: string
      required:
        - name
      type: object
    Connection:
      additionalProperties: false
      properties:
        avatar:
          description: The avatar of the connected user
          example: https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/f1/f1a1d2c3d0c9d1e1f2f3f4f5f6f7f8f9.jpg
          type: string
        externalId:
          description: The external id of the connected user
          example: "123456"
          type: string
        hide:
          description: Whether the connection should be hidden or not
          example: true
          type: boolean
        name:
          description: The name of the connected user
          example: steamsets
          type: string
        provider:
          description: The provider to connect with
          enum:
            - discord
            - patreon
            - kick
            - reddit
            - twitch
            - youtube
            - x
            - domain
          example: discord
          type: string
        publicId:
          description: The public id of the connection
          example: "123456"
          type: string
        verified:
          description: Whether the connection has been verified or not
          example: true
          type: boolean
      required:
        - provider
        - name
        - avatar
        - externalId
        - hide
        - publicId
        - verified
      type: object
    Country:
      additionalProperties: false
      properties:
        code:
          description: The code of the country
          type: string
        name:
          description: The name of the country
          type: string
        states:
          additionalProperties:
            $ref: "#/components/schemas/State"
          description: The states of the country
          type: object
      required:
        - name
        - code
        - states
      type: object
    EmailNotification:
      additionalProperties: false
      properties:
        enabled:
          description: Whether the email notifications are enabled or not
          example: true
          type: boolean
        type:
          description: The type of email notifications
          enum:
            - login
          type: string
      required:
        - enabled
        - type
      type: object
    ErrorDetail:
      additionalProperties: false
      properties:
        location:
          description: Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
          type: string
        message:
          description: Error message text
          type: string
        value:
          description: The value at the given location
      type: object
    ErrorModel:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/ErrorModel.json
          format: uri
          readOnly: true
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Property foo is required but is missing.
          type: string
        errors:
          description: Optional list of individual error details
          items:
            $ref: "#/components/schemas/ErrorDetail"
          nullable: true
          type: array
        instance:
          description: A URI reference that identifies the specific occurrence of the problem.
          example: https://example.com/error-log/abc123
          format: uri
          type: string
        status:
          description: HTTP status code
          example: 400
          format: int64
          type: integer
        title:
          description: A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
          example: Bad Request
          type: string
        type:
          default: about:blank
          description: A URI reference to human-readable documentation for the error.
          example: https://example.com/errors/example
          format: uri
          type: string
      type: object
    Image:
      additionalProperties: false
      properties:
        active:
          description: Whether the image is active or not
          example: true
          type: boolean
        fileName:
          description: The name of the file
          example: avatar.png
          type: string
        imageId:
          description: The id of the image
          example: img_wasd123
          type: string
        imageType:
          description: The type of the image
          example: avatar
          type: string
      required:
        - fileName
        - imageId
        - imageType
        - active
      type: object
    LeaderboardAccount:
      additionalProperties: false
      properties:
        appCost:
          description: The cost of an app
          example: 123456
          format: int32
          type: integer
        appPlaytime:
          description: The playtime of the account, incase of an app leaderboard
          format: int32
          minimum: 0
          nullable: true
          type: integer
        apps:
          description: The number of apps the account has
          example: 123456
          format: int32
          type: integer
        avatar:
          description: The avatar hash of the account
          example: f1a1d2c3d0c9d1e1f2f3f4f5f6f7f8f9
          type: string
        averagePlaytime:
          description: The average playtime of the account
          example: 123456
          format: int32
          type: integer
        awardsGiven:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        awardsReceived:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        badgeInfo:
          $ref: "#/components/schemas/LeaderboardBadgeInfo"
          description: The badge info of the account, incase of a badge leaderboard
        badges:
          description: The number of badges the account has
          example: 123456
          format: int32
          type: integer
        bans:
          description: The number of bans
          format: int32
          type: integer
        city:
          $ref: "#/components/schemas/Location"
          description: The city of the account
        country:
          $ref: "#/components/schemas/Location"
          description: The country of the account
        createdAt:
          description: The time the account was created
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        economyBan:
          description: The economy ban of the account
          example: steam
          type: string
        foilBadgeCost:
          description: The cost of a foil badge
          example: 123456
          format: int32
          type: integer
        foilBadges:
          description: The number of foil badges the account has
          example: 123456
          format: int32
          type: integer
        friends:
          description: The number of friends the account has
          example: 123456
          format: int32
          type: integer
        gameBans:
          description: The number of game bans
          format: int32
          type: integer
        hidden:
          description: Whether the account is hidden in the leaderboards
          example: true
          type: boolean
        level:
          description: The level of the account
          example: 123456
          format: int32
          type: integer
        limitedApps:
          description: The number of limited apps the account has
          example: 123456
          format: int32
          type: integer
        name:
          description: The name of the account
          example: steamsets
          type: string
        normalBadgeCost:
          description: The cost of a normal badge
          example: 123456
          format: int32
          type: integer
        normalBadges:
          description: The number of normal badges the account has
          example: 123456
          format: int32
          type: integer
        playtime:
          description: The playtime of the account
          example: 123456
          format: int32
          type: integer
        pointsGiven:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        pointsReceived:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        privacy:
          description: The privacy of the account
          example: public
          type: string
        region:
          $ref: "#/components/schemas/Location"
          description: The region of the account
        roles:
          description: The roles of the account
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
          type: array
        state:
          $ref: "#/components/schemas/Location"
          description: The state of the account
        steamId:
          description: The steam id
          example: "76561198842603734"
          type: string
        steamSetsScore:
          description: The steam sets score
          format: int32
          type: integer
        steamSetsVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        steamVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        vacBans:
          description: The number of vac bans
          format: int32
          type: integer
        xp:
          description: The number of xp the account has
          example: 123456
          format: int32
          type: integer
      required:
        - steamId
        - name
        - avatar
        - privacy
        - createdAt
        - steamVanity
        - steamSetsVanity
        - hidden
        - apps
        - limitedApps
        - playtime
        - averagePlaytime
        - friends
        - badges
        - normalBadges
        - foilBadges
        - awardsGiven
        - awardsReceived
        - pointsGiven
        - pointsReceived
        - xp
        - level
        - steamSetsScore
        - vacBans
        - gameBans
        - bans
        - economyBan
        - foilBadgeCost
        - normalBadgeCost
        - appCost
        - roles
      type: object
    LeaderboardBadgeInfo:
      additionalProperties: false
      properties:
        completionTime:
          description: The time the badge was completed
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        level:
          description: The level of the badge
          example: 123456
          format: int32
          type: integer
      required:
        - completionTime
        - level
      type: object
    Location:
      additionalProperties: false
      properties:
        code:
          description: The code of the location
          example: DE
          nullable: true
          type: string
        id:
          description: The id of the location
          example: 1
          format: int32
          type: integer
        name:
          description: The name of the location
          example: Germany
          type: string
      required:
        - name
        - id
      type: object
    LoginRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/LoginRequestBody.json
          format: uri
          readOnly: true
          type: string
        openid_assoc_handle:
          description: The assoc handle of the login
          example: "123456"
          type: string
        openid_claimed_id:
          description: The claimed id of the login
          example: "76561198842603734"
          type: string
        openid_identity:
          description: The identity of the login
          example: https://steamsets.com/api/v1/openid/login
          type: string
        openid_mode:
          description: The mode of the login
          example: checkid_setup
          type: string
        openid_ns:
          description: The namespace of the login
          example: http://specs.openid.net/auth/2.0
          type: string
        openid_op_endpoint:
          description: The endpoint of the login
          example: https://steamsets.com/api/v1/openid/login
          type: string
        openid_response_nonce:
          description: The response nonce of the login
          example: "123456"
          type: string
        openid_return_to:
          description: The return to of the login
          example: https://steamsets.com/api/v1/openid/login
          type: string
        openid_sig:
          description: The sig of the login
          example: "123456"
          type: string
        openid_signed:
          description: The signed of the login
          example: "123456"
          type: string
      required:
        - openid_ns
        - openid_mode
        - openid_op_endpoint
        - openid_claimed_id
        - openid_identity
        - openid_return_to
        - openid_response_nonce
        - openid_assoc_handle
        - openid_signed
        - openid_sig
      type: object
    Region:
      additionalProperties: false
      properties:
        countries:
          additionalProperties:
            $ref: "#/components/schemas/Country"
          description: The countries of the region
          type: object
        name:
          description: The name of the region
          example: Europe
          type: string
      required:
        - name
        - countries
      type: object
    Resource:
      additionalProperties: false
      properties:
        resource:
          enum:
            - animated_avatar
            - auto_refresh
            - avatar_frame
            - background
            - beta_access
            - custom_vanity
            - go_to_leaderboard_entry
            - max_leaderboard_entries
            - mini_background
            - account_colors
            - account_refresh_rate
            - queue_priority
            - site_color
            - social_links
            - theme
            - vanity_length
            - social_link_amount
          type: string
        value:
          description: The value of the resource, this can be a string, number, boolean or even a cron expression
          example: "1"
          type: string
      required:
        - resource
        - value
      type: object
    Role:
      additionalProperties: false
      properties:
        colorr:
          description: The role color
          example: "#ff0000"
          type: string
        icon:
          description: The role icon
          example: tier_1.svg
          type: string
        name:
          description: The Group name
          example: Tier 1
          type: string
        role:
          enum:
            - user
            - donator
            - staff
            - developer
            - partner
            - owner
            - amethyst
            - amber
            - emerald
            - sapphire
            - ruby
            - diamond
            - contributor
            - early_supporter
            - beta
            - translator
          type: string
      required:
        - role
        - colorr
        - icon
        - name
      type: object
    Session:
      additionalProperties: false
      properties:
        createdAt:
          description: The time the session was created
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        expiresAt:
          description: The time the session expires
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        ip:
          description: The ip of the session
          example: 127.0.0.1
          type: string
        lastSeen:
          description: The time the session was last seen
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        sessionId:
          description: The session id
          example: "123456"
          type: string
        userAgent:
          description: The user agent of the session
          example: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36
          type: string
      required:
        - createdAt
        - expiresAt
        - lastSeen
        - sessionId
        - userAgent
        - ip
      type: object
    State:
      additionalProperties: false
      properties:
        cities:
          additionalProperties:
            $ref: "#/components/schemas/City"
          description: The cities of the state
          type: object
        code:
          description: The code of the state
          type: string
        name:
          description: The name of the state
          type: string
      required:
        - name
        - code
        - cities
      type: object
    V1AccountApp:
      additionalProperties: false
      properties:
        id:
          description: The Steam App ID
          example: 730
          format: int32
          minimum: 0
          type: integer
        image:
          description: The App's image URL
          example: https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/apps/730/a1a2f9f3f4c0c2b1f8d3a4e5f6d7e8f9.jpg
          type: string
        name:
          description: The App's name
          example: "Counter-Strike: Global Offensive"
          type: string
        playtime:
          description: The Account's playtime in the App
          example: 123456
          format: int32
          minimum: 0
          type: integer
        price:
          description: How much the app costs
          example: 1200
          format: int32
          type: integer
        shortName:
          description: The App's short name
          example: csgo
          type: string
      required:
        - id
        - image
        - name
        - playtime
        - price
        - shortName
      type: object
    V1AccountAppBadge:
      additionalProperties: false
      properties:
        appId:
          format: int32
          minimum: 0
          type: integer
        appImage:
          type: string
        appName:
          type: string
        appShortName:
          type: string
        badgeImage:
          type: string
        completedAt:
          format: date-time
          type: string
        isFoil:
          type: boolean
        level:
          format: int32
          minimum: 0
          type: integer
        name:
          type: string
        price:
          format: int32
          type: integer
        publicId:
          type: string
        scarcity:
          format: int32
          type: integer
        steamId:
          format: int32
          minimum: 0
          type: integer
        xp:
          format: int32
          minimum: 0
          type: integer
      required:
        - appId
        - appImage
        - appName
        - appShortName
        - badgeImage
        - completedAt
        - xp
        - isFoil
        - level
        - name
        - scarcity
        - steamId
        - price
        - publicId
      type: object
    V1AccountBadgeCompletion:
      additionalProperties: false
      properties:
        completedAt:
          format: date-time
          type: string
        level:
          format: int32
          minimum: 0
          type: integer
        xp:
          format: int32
          minimum: 0
          type: integer
      required:
        - level
        - xp
        - completedAt
      type: object
    V1AccountDataPointsResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AccountDataPointsResponseBody.json
          format: uri
          readOnly: true
          type: string
        mostXp:
          items:
            $ref: "#/components/schemas/AccountBadgeMostXpDataPoint"
          nullable: true
          type: array
        playtime:
          items:
            $ref: "#/components/schemas/AccountPlaytimeDataPoint"
          nullable: true
          type: array
        scarcity:
          items:
            $ref: "#/components/schemas/AccountBadgeScarcityDataPoint"
          nullable: true
          type: array
        xp:
          additionalProperties:
            additionalProperties:
              format: int32
              minimum: 0
              type: integer
            type: object
          type: object
      required:
        - playtime
        - scarcity
        - xp
        - mostXp
      type: object
    V1AccountFriend:
      additionalProperties: false
      properties:
        appCost:
          description: The cost of an app
          example: 123456
          format: int32
          type: integer
        appPlaytime:
          description: The playtime of the account, incase of an app leaderboard
          format: int32
          minimum: 0
          nullable: true
          type: integer
        apps:
          description: The number of apps the account has
          example: 123456
          format: int32
          type: integer
        avatar:
          description: The avatar hash of the account
          example: f1a1d2c3d0c9d1e1f2f3f4f5f6f7f8f9
          type: string
        averagePlaytime:
          description: The average playtime of the account
          example: 123456
          format: int32
          type: integer
        awardsGiven:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        awardsReceived:
          description: The number of awards the account has
          example: 123456
          format: int32
          type: integer
        badgeInfo:
          $ref: "#/components/schemas/LeaderboardBadgeInfo"
          description: The badge info of the account, incase of a badge leaderboard
        badges:
          description: The number of badges the account has
          example: 123456
          format: int32
          type: integer
        bans:
          description: The number of bans
          format: int32
          type: integer
        city:
          $ref: "#/components/schemas/Location"
          description: The city of the account
        country:
          $ref: "#/components/schemas/Location"
          description: The country of the account
        createdAt:
          description: The time the account was created
          example: "2023-01-01T00:00:00Z"
          format: date-time
          type: string
        economyBan:
          description: The economy ban of the account
          example: steam
          type: string
        foilBadgeCost:
          description: The cost of a foil badge
          example: 123456
          format: int32
          type: integer
        foilBadges:
          description: The number of foil badges the account has
          example: 123456
          format: int32
          type: integer
        friends:
          description: The number of friends the account has
          example: 123456
          format: int32
          type: integer
        friendsSince:
          format: date-time
          nullable: true
          type: string
        gameBans:
          description: The number of game bans
          format: int32
          type: integer
        hidden:
          description: Whether the account is hidden in the leaderboards
          example: true
          type: boolean
        level:
          description: The level of the account
          example: 123456
          format: int32
          type: integer
        limitedApps:
          description: The number of limited apps the account has
          example: 123456
          format: int32
          type: integer
        name:
          description: The name of the account
          example: steamsets
          type: string
        normalBadgeCost:
          description: The cost of a normal badge
          example: 123456
          format: int32
          type: integer
        normalBadges:
          description: The number of normal badges the account has
          example: 123456
          format: int32
          type: integer
        playtime:
          description: The playtime of the account
          example: 123456
          format: int32
          type: integer
        pointsGiven:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        pointsReceived:
          description: The number of points the account has
          example: 123456
          format: int32
          type: integer
        privacy:
          description: The privacy of the account
          example: public
          type: string
        region:
          $ref: "#/components/schemas/Location"
          description: The region of the account
        roles:
          description: The roles of the account
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
          type: array
        state:
          $ref: "#/components/schemas/Location"
          description: The state of the account
        steamId:
          description: The steam id
          example: "76561198842603734"
          type: string
        steamSetsScore:
          description: The steam sets score
          format: int32
          type: integer
        steamSetsVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        steamVanity:
          description: The vanity of the account
          example: steamsets
          type: string
        vacBans:
          description: The number of vac bans
          format: int32
          type: integer
        xp:
          description: The number of xp the account has
          example: 123456
          format: int32
          type: integer
      required:
        - friendsSince
        - steamId
        - name
        - avatar
        - privacy
        - createdAt
        - steamVanity
        - steamSetsVanity
        - hidden
        - apps
        - limitedApps
        - playtime
        - averagePlaytime
        - friends
        - badges
        - normalBadges
        - foilBadges
        - awardsGiven
        - awardsReceived
        - pointsGiven
        - pointsReceived
        - xp
        - level
        - steamSetsScore
        - vacBans
        - gameBans
        - bans
        - economyBan
        - foilBadgeCost
        - normalBadgeCost
        - appCost
        - roles
      type: object
    V1AccountFriendsResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AccountFriendsResponseBody.json
          format: uri
          readOnly: true
          type: string
        friends:
          items:
            $ref: "#/components/schemas/V1AccountFriend"
          nullable: true
          type: array
      required:
        - friends
      type: object
    V1AccountLeaderboardHistoryResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AccountLeaderboardHistoryResponseBody.json
          format: uri
          readOnly: true
          type: string
        histories:
          items:
            $ref: "#/components/schemas/AccountLeaderboardHistory"
          nullable: true
          type: array
      required:
        - histories
      type: object
    V1AccountsAppsResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AccountsAppsResponseBody.json
          format: uri
          readOnly: true
          type: string
        apps:
          items:
            $ref: "#/components/schemas/V1AccountApp"
          nullable: true
          type: array
      required:
        - apps
      type: object
    V1AppBadge:
      additionalProperties: false
      properties:
        accountBadge:
          $ref: "#/components/schemas/V1AccountBadgeCompletion"
        badgeImage:
          type: string
        firstCompletion:
          format: date-time
          nullable: true
          type: string
        highestLevel:
          format: int32
          type: integer
        isFoil:
          type: boolean
        lastCompletion:
          format: date-time
          nullable: true
          type: string
        level:
          format: int32
          minimum: 0
          type: integer
        name:
          type: string
        price:
          format: int32
          type: integer
        publicId:
          type: string
        scarcity:
          format: int32
          type: integer
        steamId:
          format: int32
          minimum: 0
          type: integer
        xp:
          format: int32
          minimum: 0
          type: integer
      required:
        - badgeImage
        - firstCompletion
        - lastCompletion
        - highestLevel
        - xp
        - isFoil
        - level
        - name
        - scarcity
        - steamId
        - price
        - publicId
        - accountBadge
      type: object
    V1AppDetail:
      additionalProperties: false
      properties:
        appId:
          description: The app id
          example: 730
          format: int32
          minimum: 0
          type: integer
        image:
          description: The app image hash
          example: a1a2f9f3f4c0c2b1f8d3a4e5f6d7e8f9.jpg
          type: string
        isEvent:
          description: Whether the app is an event
          example: true
          type: boolean
        isSale:
          description: Whether the app is a sale
          example: true
          type: boolean
        itadId:
          description: The apps id on itad
          type: string
        name:
          description: The app name
          example: CS2
          type: string
        price:
          description: The app price
          example: 1200
          format: int32
          type: integer
        shortName:
          description: The app short name
          example: csgo
          type: string
        type:
          description: The app type
          enum:
            - invalid
            - game
            - application
            - tool
            - demo
            - deprecated
            - dlc
            - guide
            - driver
            - config
            - hardware
            - franchise
            - video
            - plugin
            - music
            - series
            - comic
            - beta
            - shortcut
            - depot_only
          example: game
          type: string
      required:
        - appId
        - image
        - name
        - shortName
        - price
        - itadId
        - isEvent
        - isSale
        - type
      type: object
    V1AppItem:
      additionalProperties: false
      properties:
        cost:
          format: int32
          type: integer
        description:
          type: string
        largeImage:
          type: string
        name:
          type: string
        publicId:
          type: string
        smallImage:
          type: string
        title:
          type: string
        type:
          type: string
      required:
        - type
        - cost
        - description
        - largeImage
        - name
        - smallImage
        - title
        - publicId
      type: object
    V1AppRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AppRequestBody.json
          format: uri
          readOnly: true
          type: string
        appId:
          description: The app id
          example: 123456
          format: int32
          minimum: 0
          type: integer
      required:
        - appId
      type: object
    V1AppResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1AppResponseBody.json
          format: uri
          readOnly: true
          type: string
        badges:
          description: The badges
          items:
            $ref: "#/components/schemas/V1AppBadge"
          nullable: true
          type: array
        detail:
          $ref: "#/components/schemas/V1AppDetail"
          description: The app detail
        items:
          description: The items
          items:
            $ref: "#/components/schemas/V1AppItem"
          nullable: true
          type: array
      required:
        - detail
        - badges
        - items
      type: object
    V1BadgesResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1BadgesResponseBody.json
          format: uri
          readOnly: true
          type: string
        badges:
          items:
            $ref: "#/components/schemas/V1AccountAppBadge"
          nullable: true
          type: array
      required:
        - badges
      type: object
    V1ConnectRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1ConnectRequestBody.json
          format: uri
          readOnly: true
          type: string
        code:
          description: The code from the oauth2 provider to verify
          example: "123456"
          type: string
        provider:
          description: The provider to connect with
          enum:
            - discord
            - patreon
            - kick
            - reddit
            - twitch
            - youtube
            - x
            - domain
          example: discord
          type: string
      required:
        - provider
        - code
      type: object
    V1ConnectResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1ConnectResponseBody.json
          format: uri
          readOnly: true
          type: string
        code:
          description: Code that has to be used to verify domain connections
          example: ABC123
          type: string
      type: object
    V1CreateSessionBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1CreateSessionBody.json
          format: uri
          readOnly: true
          type: string
        sessionId:
          description: The session id
          example: ABC123
          type: string
      required:
        - sessionId
      type: object
    V1DeleteConnectionRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteConnectionRequestBody.json
          format: uri
          readOnly: true
          type: string
        connectionId:
          description: The connection id to delete
          example: "123456"
          type: string
      required:
        - connectionId
      type: object
    V1DeleteConnectionResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteConnectionResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1DeleteImagesRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteImagesRequestBody.json
          format: uri
          readOnly: true
          type: string
        imageIds:
          description: The images ids to delete
          items:
            type: string
          nullable: true
          type: array
      required:
        - imageIds
      type: object
    V1DeleteImagesResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteImagesResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1DeleteSessionRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteSessionRequestBody.json
          format: uri
          readOnly: true
          type: string
        sessionId:
          description: The session id to delete
          example: "123456"
          type: string
      required:
        - sessionId
      type: object
    V1DeleteSessionResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1DeleteSessionResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1GetSessionBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1GetSessionBody.json
          format: uri
          readOnly: true
          type: string
        accountId:
          description: The account id
          example: 123456
          format: int32
          minimum: 0
          type: integer
        resources:
          description: The resources the user has (permissions)
          items:
            $ref: "#/components/schemas/Resource"
          nullable: true
          type: array
        roles:
          description: The roles the user has
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
          type: array
        sessionData:
          $ref: "#/components/schemas/Session"
          description: The session data
        steamId:
          description: The steam id
          example: "76561198842603734"
          type: string
      required:
        - accountId
        - steamId
        - sessionData
        - roles
        - resources
      type: object
    V1GetSettingsBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1GetSettingsBody.json
          format: uri
          readOnly: true
          type: string
        apiKey:
          description: The Generated API Key for this account
          example: api_key
          type: string
        color:
          description: The color the account is using
          example: "#7652c9"
          type: string
        colors:
          description: The colors the account is using
          example: "#7652c9"
          type: string
        connections:
          description: The connections the account has
          items:
            $ref: "#/components/schemas/Connection"
          nullable: true
          type: array
        email:
          description: The email the account is using
          example: steamsets@example.com
          format: email
          type: string
        emailNotifications:
          description: The email notifications the account has
          items:
            $ref: "#/components/schemas/EmailNotification"
          nullable: true
          type: array
        emailVerified:
          description: Whether the account has verified their email
          example: true
          type: boolean
        hidden:
          description: Whether the account is hidden in the leaderboards
          example: true
          type: boolean
        images:
          description: The images the account has
          items:
            $ref: "#/components/schemas/Image"
          nullable: true
          type: array
        language:
          description: The language the account is using
          example: en
          type: string
        sessions:
          description: The sessions the account has
          items:
            $ref: "#/components/schemas/Session"
          nullable: true
          type: array
        theme:
          description: The theme the account is using
          enum:
            - dark
            - light
          example: dark
          type: string
        vanity:
          description: The vanity the account is using
          example: flo
          type: string
      required:
        - hidden
        - language
        - colors
        - color
        - theme
        - vanity
        - email
        - emailVerified
        - apiKey
        - sessions
        - connections
        - images
        - emailNotifications
      type: object
    V1LivenessResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1LivenessResponseBody.json
          format: uri
          readOnly: true
          type: string
        message:
          description: Whether we're alive or not
          example: OK
          type: string
      required:
        - message
      type: object
    V1LoginResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1LoginResponseBody.json
          format: uri
          readOnly: true
          type: string
        avatar:
          description: The avatar of the user
          example: https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/f1/f1a1d2c3d0c9d1e1f2f3f4f5f6f7f8f9.jpg
          type: string
        name:
          description: The name of the user
          example: SteamSets
          type: string
        sessionToken:
          description: The session token
          example: "123456"
          type: string
        steamId:
          description: The steam id
          example: "76561198842603734"
          type: string
      required:
        - steamId
        - avatar
        - name
        - sessionToken
      type: object
    V1UpdateConnectionRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateConnectionRequestBody.json
          format: uri
          readOnly: true
          type: string
        connectionId:
          description: The connection id to update
          example: "123456"
          type: string
        hidden:
          description: Whether the connection should be hidden or not
          example: true
          type: boolean
      required:
        - connectionId
        - hidden
      type: object
    V1UpdateConnectionResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateConnectionResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1UpdateImageRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateImageRequestBody.json
          format: uri
          readOnly: true
          type: string
        active:
          description: Whether the image is active or not, only one of each type can be active
          example: true
          type: boolean
        imageId:
          description: The image id to update
          example: "123456"
          type: string
      required:
        - imageId
        - active
      type: object
    V1UpdateImageResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateImageResponseBody.json
          format: uri
          readOnly: true
          type: string
        key:
          description: The generated API Key
          example: api_123
          type: string
      required:
        - key
      type: object
    V1UpdateSettingsRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateSettingsRequestBody.json
          format: uri
          readOnly: true
          type: string
        color:
          description: The color the account should use, only if the account is private
          example: "#7652c9"
          type: string
        colors:
          description: The colors the account should use, only if the account is private
          example: "#7652c9"
          type: string
        email:
          description: The email the account should use, only if the account is private
          example: steamsets@example.com
          type: string
        emailNotifications:
          description: The email notifications the account wants
          items:
            $ref: "#/components/schemas/EmailNotification"
          nullable: true
          type: array
        hidden:
          description: Whether the account should be hidden in the leaderboards, only possible if the account is private
          example: true
          type: boolean
        language:
          description: The language the account should use, only if the account is private
          example: en
          type: string
        theme:
          description: The theme the account should use, only if the account is private
          enum:
            - dark
            - light
          example: dark
          type: string
        vanity:
          description: The vanity the account should use, only if the account is private
          example: flo
          type: string
      required:
        - hidden
        - language
        - colors
        - color
        - theme
        - vanity
        - email
        - emailNotifications
      type: object
    V1UpdateSettingsResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UpdateSettingsResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1UploadImagesRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1UploadImagesRequestBody.json
          format: uri
          readOnly: true
          type: string
        images:
          description: The images to upload
          items:
            $ref: "#/components/schemas/V1UploaedImage"
          nullable: true
          type: array
      required:
        - images
      type: object
    V1UploaedImage:
      additionalProperties: false
      properties:
        data:
          description: The image data aka base64 encoded image
          example: base64_encoded_image
          type: string
        type:
          description: The Image Type
          enum:
            - avatar
            - background
            - mini_background
            - animated_avatar
            - avatar_frame
          example: avatar
          type: string
      required:
        - data
        - type
      type: object
    V1VerifyConnectionRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1VerifyConnectionRequestBody.json
          format: uri
          readOnly: true
          type: string
        connectionId:
          description: The connection id to verify
          example: "123456"
          type: string
      required:
        - connectionId
      type: object
    V1VerifyConnectionResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1VerifyConnectionResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
    V1VerifyEmailRequestBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1VerifyEmailRequestBody.json
          format: uri
          readOnly: true
          type: string
        code:
          description: The code to verify
          example: "123456"
          type: string
      required:
        - code
      type: object
    V1VerifyEmailResponseBody:
      additionalProperties: false
      properties:
        $schema:
          description: A URL to the JSON Schema for this object.
          example: https://api.steamsets.com/schemas/V1VerifyEmailResponseBody.json
          format: uri
          readOnly: true
          type: string
      type: object
  securitySchemes:
    apiKey:
      in: header
      name: api-key
      type: apiKey
    session:
      scheme: bearer
      type: http
info:
  title: SteamSets API
  version: 1.0.0
openapi: 3.0.3
paths:
  /account.v1.AccountService/Connect:
    post:
      operationId: account.v1.connection.connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1ConnectRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1ConnectResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Connect a new Social Provider
      tags:
        - account
        - connection
  /account.v1.AccountService/CreateSession:
    post:
      operationId: account.v1.session.create
      parameters:
        - in: header
          name: User-Agent
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
        - in: header
          name: X-Fingerprint
          schema:
            type: string
        - in: header
          name: X-Signed
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1CreateSessionBody"
          description: OK
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      summary: Create a new session for non logged in users
      tags:
        - account
        - session
  /account.v1.AccountService/DeleteConnection:
    post:
      operationId: account.v1.connection.deleteConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1DeleteConnectionRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1DeleteConnectionResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Remove a connection
      tags:
        - account
        - connection
  /account.v1.AccountService/DeleteImages:
    post:
      operationId: account.v1.settings.delete-images
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1DeleteImagesRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1DeleteImagesResponseBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Delete mulitple imagest
      tags:
        - account
        - settings
  /account.v1.AccountService/DeleteSession:
    post:
      operationId: account.v1.session.delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1DeleteSessionRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1DeleteSessionResponseBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Deletes a session, can also be used to logout
      tags:
        - account
        - session
  /account.v1.AccountService/GetApps:
    post:
      operationId: account.v1.getApps
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1AccountsAppsResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account Apps
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetBadges:
    post:
      operationId: account.v1.getBadges
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1BadgesResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account Badges
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetDataPoints:
    post:
      operationId: account.v1.getDataPoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1AccountDataPointsResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account DataPoints
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetFriends:
    post:
      operationId: account.v1.getFriends
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1AccountFriendsResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account Friends
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetInfo:
    post:
      operationId: account.v1.getInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account Info
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetLeaderboardHistory:
    post:
      operationId: account.v1.getLeaderboardHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearch"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1AccountLeaderboardHistoryResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get Account Leaderboard History
      tags:
        - account
        - data
        - public
  /account.v1.AccountService/GetSession:
    post:
      operationId: account.v1.session.get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1GetSessionBody"
          description: OK
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Gets all session data
      tags:
        - account
        - session
  /account.v1.AccountService/GetSettings:
    post:
      operationId: account.v1.settings.get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1GetSettingsBody"
          description: OK
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Gets all settings for the account
      tags:
        - account
        - settings
  /account.v1.AccountService/GetStaff:
    post:
      operationId: account.v1.getStaff
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/LeaderboardAccount"
                nullable: true
                type: array
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Get Staff Members and their info
      tags:
        - account
        - data
  /account.v1.AccountService/Login:
    post:
      operationId: account.v1.session.login
      parameters:
        - in: header
          name: User-Agent
          schema:
            type: string
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1LoginResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      summary: Logs a user in and creates a new session
      tags:
        - account
        - session
  /account.v1.AccountService/SendEmailVerification:
    post:
      operationId: account.v1.settings.send-email-verification
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Resend the verification code for an email
      tags:
        - account
        - settings
  /account.v1.AccountService/UpdateConnection:
    post:
      operationId: account.v1.connection.updateConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1UpdateConnectionRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1UpdateConnectionResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Make a connection visible/invisible
      tags:
        - account
        - connection
  /account.v1.AccountService/UpdateImage:
    post:
      operationId: account.v1.settings.update-image
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1UpdateImageRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1UpdateImageResponseBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Update one of the uploaded images
      tags:
        - account
        - settings
  /account.v1.AccountService/UpdateSettings:
    post:
      operationId: account.v1.settings.update
      parameters:
        - in: header
          name: X-Forwarded-For
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1UpdateSettingsRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1UpdateSettingsResponseBody"
          description: OK
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Update settings for the logged in account
      tags:
        - account
        - settings
  /account.v1.AccountService/UploadImages:
    post:
      operationId: account.v1.settings.upload-images
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1UploadImagesRequestBody"
        required: true
      responses:
        "204":
          description: No Content
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Multi Upload Endpoint for images
      tags:
        - account
        - settings
  /account.v1.AccountService/VerifyConnection:
    post:
      operationId: account.v1.connection.verifyConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1VerifyConnectionRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1VerifyConnectionResponseBody"
          description: OK
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Verify a domain connection only atm
      tags:
        - account
        - connection
  /account.v1.AccountService/VerifyEmail:
    post:
      operationId: account.v1.settings.verfy-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1VerifyEmailRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1VerifyEmailResponseBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Verify the email by passing in the code the user should've gotten
      tags:
        - account
        - settings
  /app.v1.AppService/GetApp:
    post:
      operationId: app.v1.get
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V1AppRequestBody"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1AppResponseBody"
          description: OK
        "404":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Not Found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Get details about an app
      tags:
        - app
  /app.v1.AppService/Queue:
    post:
      operationId: account.v1.queue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppSearch"
        required: true
      responses:
        "204":
          description: No Content
          headers:
            X-RateLimit-Reset:
              schema:
                format: int64
                type: integer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Bad Request
        "422":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unprocessable Entity
        "429":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Too Many Requests
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - apiKey: []
          session: []
      summary: Queue a app for processing
      tags:
        - app
        - data
        - public
  /v1/liveness:
    get:
      description: This endpoint checks if the service is alive.
      operationId: liveness
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1LivenessResponseBody"
          description: OK
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      summary: Liveness check
      tags:
        - liveness
  /v1/location:
    get:
      description: Get all of our available locations
      operationId: location
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Region"
                nullable: true
                type: array
          description: OK
        "401":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: Internal Server Error
      security:
        - session: []
      summary: Location List
      tags:
        - location
servers:
  - url: https://api.steamsets.com
  - url: http://localhost:8080
tags:
  - description: Account related operations
    name: account
  - description: Operations related to oauth2/custom connections.
    name: connection
  - description: App related operations
    name: app
  - description: Group related operations
    name: group
  - description: Liveness check
    name: liveness
  - description: This is actual data seen by others then yourself
    name: data
  - description: This API can be accessed by anyone with an API Key
    name: public
